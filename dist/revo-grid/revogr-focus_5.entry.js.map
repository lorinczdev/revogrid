{"version":3,"names":["getCurrentCell","x","y","el","rows","cols","top","left","height","width","getBoundingClientRect","cellY","cellX","rgRow","getItemByPosition","rgCol","itemIndex","getCoordinate","range","focus","changes","isMulti","updateCoordinate","c","start","end","x1","y1","point","isAfterLast","lastCell","isBeforeFirst","styleByCellProps","styles","getCell","dimensionRow","dimensionCol","getItemByIndex","bottom","right","getElStyle","revogrFocusStyleCss","RevogrFocus","this","activeFocus","changed","e","beforeScrollIn","beforeScrollIntoView","emit","defaultPrevented","scrollIntoView","block","inline","model","getSourceItem","dataStore","column","colData","afterFocus","componentDidRender","currentFocus","selectionStore","get","_a","_b","render","editCell","data","event","beforeFocusRender","Object","assign","rowType","colType","h","detail","style","state","extra","focusTemplate","Host","class","FOCUS_CLASS","SelectionStoreService","constructor","store","config","edited","focused","ranged","changeRange","cell","getRange","isEditInput","closest","EDIT_INPUT_WR","DIRECTION_CODES","codesLetter","TAB","ARROW_UP","ARROW_DOWN","ARROW_LEFT","ARROW_RIGHT","KeyboardService","sv","keyDown","canRange","selectionStoreService","code","ESCAPE","cancelEdit","isClear","clearCell","keyChangeSelection","isEnterKey","applyEdit","isCopy","isCut","isPaste","internalPaste","isAll","selectAll","isLetterKey","keyCode","key","preventDefault","changeDirectionKey","timeout","RESIZE_INTERVAL","keyPositionChange","eData","getData","focusNext","shiftKey","includes","AutoFillType","AutoFillService","autoFillType","autoFillInitial","autoFillStart","autoFillLast","renderAutofill","selectionFocus","handlerStyle","CELL_HANDLER_CLASS","MOBILE_CLASS","onMouseDown","autoFillHandler","onTouchStart","type","autoFill","target","Element","selectionStart","isAutoFill","selectionMouseMove","onMouseMoveAutofill","debounce","doAutofillMouseMove","getFocus","getFromEvent","current","isSame","setTempRange","area","selection","clearAutoFillSelection","stopApply","newRange","clearRangeDataApply","applyRangeWithData","applyRangeOnly","onRangeApply","models","rowIndex","parseInt","stopRange","rangeDataApply","columnService","applyRangeData","setRange","oldRange","rangeData","newData","mapping","getRangeData","columns","selectionChanged","rangeCopy","ClipboardService","renderClipboard","readonly","onCopyRegion","onCopy","onClearRegion","rangeClear","ref","clipboard","onPasteRegion","onPaste","getRegion","canCopyEvent","beforeCopy","doCopy","isEditing","getTransformedDataToApply","canPaste","beforePaste","rangeApply","revogrOverlayStyleCss","OverlaySelection","keyboardService","autoFillService","clipboardService","revogrEdit","onMouseMove","onMouseUp","onCellDrag","orderEditor","dragStart","onKeyUp","beforeKeyUp","onKeyDown","proxy","beforeKeyDown","selectionServiceSet","s","triggerRangeEvent","doFocus","r","f","next","val","doEdit","async","cancel","closeEdit","createAutoFillService","createClipboardService","beforeRangeDataApply","types","internalSelectionChanged","beforeRangeCopyApply","internalRangeDataApply","columnServiceSet","destroy","ColumnService","d","undefined","copyRangeArray","rangeClipboardCopy","internalCopy","rangeClipboardPaste","connectedCallback","disconnectedCallback","renderRange","SELECTION_BORDER_CLASS","isMobileDevice","renderEditCell","getCellData","editable","getSaveData","renderEvent","beforeEditRender","onCellEdit","saveEv","beforeCellSave","cellEdit","preventFocus","onCloseEdit","saveOnClose","applyChangesOnClose","editor","getCellEditor","editors","additionalData","els","push","useClipboard","canDrag","parent","element","onInternalRowDragStart","onRowDragStart","mobile","onDblClick","onElementMouseDown","name","beforeFocusCell","evData","applyEvent","applyFocus","focusCell","beforeApplyRange","getRangeTransformedToProps","beforeSetRange","touch","verifyTouchTarget","touches","canEdit","setEdit","dataToSave","internalCellEdit","canFocus","KeyboardEvent","isRangeSingleCell","getRangeStaticData","prop","text","isReadOnly","RowHeaderRender","__","i","RevogrRowHeaders","dataViews","viewport","ViewportStore","totalLength","dataPorts","itemCount","length","DataStore","updateData","cellTemplate","rowHeaderColumn","viewData","rowClass","viewportCol","colSize","calculateRowHeaderSize","setViewport","realCount","virtualSize","items","size","uiid","viewportScroll","UUID","contentHeight","contentWidth","minWidth","elementToScroll","onScrollViewport","scrollViewport","viewportHeader","headerProp","canResize","ROW_HEADER_TYPE","slot","HEADER_SLOT","revogrScrollStyleCss","RevogrScrollVirtual","scrollSize","isAutoHide","autoHideTimeout","setScroll","dimension","scrollService","changeScroll","delta","coordinate","scrollLeft","scrollTop","minHeight","clientHeight","clientWidth","LocalScrollService","beforeScroll","scrollVirtual","afterScroll","clearTimeout","componentWillLoad","getScrollbarWidth","document","setParams","contentSize","dimensionStore","clientSize","viewportStore","onScroll","autoHide","scroll","setTimeout","sizeType","extContentSize","vsize","getVirtualContentSize","revogrTempRangeStyleCss","onChange","throttle","doChange","directionY","derectionX","directionClass","TMP_SELECTION_BG_CLASS","hidden"],"sources":["src/components/overlay/selection.utils.ts","src/components/selectionFocus/revogr-focus-style.scss?tag=revogr-focus","src/components/selectionFocus/revogr-focus.tsx","src/store/selection/selection.store.service.ts","src/components/overlay/editors/edit.utils.ts","src/components/overlay/keyboard.service.ts","src/components/overlay/autofill.service.tsx","src/components/overlay/clipboard.service.tsx","src/components/overlay/revogr-overlay-style.scss?tag=revogr-overlay-selection","src/components/overlay/revogr-overlay-selection.tsx","src/components/rowHeaders/row-header-render.tsx","src/components/rowHeaders/revogr-row-headers.tsx","src/components/scrollable/revogr-scroll-style.scss?tag=revogr-scroll-virtual","src/components/scrollable/revogr-scroll-virtual.tsx","src/components/selectionTempRange/revogr-temp-range-style.scss?tag=revogr-temp-range","src/components/selectionTempRange/revogr-temp-range.tsx"],"sourcesContent":["import { getItemByIndex, getItemByPosition } from '../../store/dimension/dimension.helpers';\nimport { Selection, RevoGrid } from '../../interfaces';\nimport Cell = Selection.Cell;\n\nexport type EventData = {\n  el: HTMLElement;\n  rows: RevoGrid.DimensionSettingsState;\n  cols: RevoGrid.DimensionSettingsState;\n  lastCell: Selection.Cell;\n};\n\n/** Calculate cell based on x, y position */\nexport function getCurrentCell({ x, y }: Cell, { el, rows, cols }: EventData): Cell {\n  const { top, left, height, width } = el.getBoundingClientRect();\n  let cellY = y - top;\n\n  // limit to element height\n\n  if (cellY >= height) {\n    cellY = height - 1;\n  }\n  let cellX = x - left;\n  // limit to element width\n  if (cellX >= width) {\n    cellX = width - 1;\n  }\n  const rgRow = getItemByPosition(rows, cellY);\n  const rgCol = getItemByPosition(cols, cellX);\n  // before first\n  if (rgCol.itemIndex < 0) {\n    rgCol.itemIndex = 0;\n  }\n  // before first\n  if (rgRow.itemIndex < 0) {\n    rgRow.itemIndex = 0;\n  }\n  return { x: rgCol.itemIndex, y: rgRow.itemIndex };\n}\n\nexport function getCoordinate(range: Selection.RangeArea, focus: Cell, changes: Partial<Cell>, isMulti = false) {\n  const updateCoordinate = (c: keyof Cell) => {\n    const start = { x: range.x, y: range.y };\n    const end = isMulti ? { x: range.x1, y: range.y1 } : start;\n    const point = end[c] > focus[c] ? end : start;\n    point[c] += changes[c];\n    return { start, end };\n  };\n\n  if (changes.x) {\n    return updateCoordinate('x');\n  }\n  if (changes.y) {\n    return updateCoordinate('y');\n  }\n  return null;\n}\n\n/** check if out of range */\nexport function isAfterLast({ x, y }: Cell, { lastCell }: EventData) {\n  return x >= lastCell.x || y >= lastCell.y;\n}\n\n/** check if out of range */\nexport function isBeforeFirst({ x, y }: Cell) {\n  return x < 0 || y < 0;\n}\n\n/** Compare cells, only 1 coordinate difference is possible */\n// export function getDirectionCoordinate(initial: Cell, last: Cell): Partial<Cell> | null {\n//   const c: (keyof Cell)[] = ['x', 'y'];\n//   for (let k of c) {\n//     if (initial[k] !== last[k]) {\n//       return { [k]: 1 };\n//     }\n//   }\n//   return null;\n// }\n\n// export function getLargestAxis(initial: Cell, last: Cell): Partial<Cell> | null {\n//   const cell: Partial<Cell> = {};\n//   const c: (keyof Cell)[] = ['x', 'y'];\n//   for (let k of c) {\n//     cell[k] = Math.abs(initial[k] - last[k]);\n//   }\n//   if (cell.x > cell.y) {\n//     return { x: 1 };\n//   }\n//   if (cell.y > cell.x) {\n//     return { y: 1 };\n//   }\n//   return null;\n// }\n\nfunction styleByCellProps(styles: { [key: string]: number }): Selection.RangeAreaCss {\n  return {\n    left: `${styles.left}px`,\n    top: `${styles.top}px`,\n    width: `${styles.width}px`,\n    height: `${styles.height}px`,\n  };\n}\n\nexport function getCell({ x, y, x1, y1 }: Selection.RangeArea, dimensionRow: RevoGrid.DimensionSettingsState, dimensionCol: RevoGrid.DimensionSettingsState) {\n  const top = getItemByIndex(dimensionRow, y).start;\n  const left = getItemByIndex(dimensionCol, x).start;\n  const bottom = getItemByIndex(dimensionRow, y1).end;\n  const right = getItemByIndex(dimensionCol, x1).end;\n\n  return {\n    left,\n    right,\n    top,\n    bottom,\n    width: right - left,\n    height: bottom - top,\n  };\n}\n\nexport function getElStyle(range: Selection.RangeArea, dimensionRow: RevoGrid.DimensionSettingsState, dimensionCol: RevoGrid.DimensionSettingsState): Selection.RangeAreaCss {\n  const styles = getCell(range, dimensionRow, dimensionCol);\n  return styleByCellProps(styles);\n}\n","revogr-focus.focused-cell {\n  @include selection(1px);\n\n  position: absolute;\n  pointer-events: none;\n  z-index: 9;\n  display: block !important;\n}\n","import { Component, Prop, h, Host, Event, Element, EventEmitter } from '@stencil/core';\nimport { FocusRenderEvent, Observable, RevoGrid, Selection } from '../../interfaces';\nimport { FOCUS_CLASS } from '../../utils/consts';\nimport { ColumnSource, RowSource } from '../data/columnService';\nimport { getElStyle } from '../overlay/selection.utils';\nimport { getSourceItem } from '../../store/dataSource/data.store';\n\n@Component({\n  tag: 'revogr-focus',\n  styleUrl: 'revogr-focus-style.scss',\n})\nexport class RevogrFocus {\n  @Element() el: HTMLElement;\n\n  /** Dynamic stores */\n  @Prop() selectionStore!: Observable<Selection.SelectionStoreState>;\n  @Prop() dimensionRow!: Observable<RevoGrid.DimensionSettingsState>;\n  @Prop() dimensionCol!: Observable<RevoGrid.DimensionSettingsState>;\n  @Prop() dataStore!: RowSource;\n  @Prop() colData!: ColumnSource;\n  @Prop() colType!: RevoGrid.DimensionCols;\n  @Prop() rowType!: RevoGrid.DimensionRows;\n\n  @Prop() focusTemplate: RevoGrid.FocusTemplateFunc | null = null;\n  @Event({ eventName: 'before-focus-render' }) beforeFocusRender: EventEmitter<FocusRenderEvent>;\n  /**\n   * Before focus changed verify if it's in view and scroll viewport into this view\n   * Can be prevented by event.preventDefault()\n   */\n  @Event({ eventName: 'beforescrollintoview' }) beforeScrollIntoView: EventEmitter<{ el: HTMLElement }>;\n  /**\n   * Used to setup properties after focus was rendered\n   */\n  @Event({ eventName: 'afterfocus' }) afterFocus: EventEmitter<{\n    model: any;\n    column: RevoGrid.ColumnRegular;\n  }>;\n\n  private activeFocus: Selection.Cell = null;\n\n  private changed(e: HTMLElement, focus: Selection.Cell): void {\n    const beforeScrollIn = this.beforeScrollIntoView.emit({ el: e });\n    if (!beforeScrollIn.defaultPrevented) {\n      e.scrollIntoView({\n        block: 'nearest',\n        inline: 'nearest',\n      });\n    }\n    const model = getSourceItem(this.dataStore, focus.y);\n    const column = getSourceItem(this.colData, focus.x);\n    this.afterFocus.emit({\n      model,\n      column\n    });\n  }\n\n  componentDidRender(): void {\n    const currentFocus = this.selectionStore.get('focus');\n    if (this.activeFocus?.x === currentFocus?.x && this.activeFocus?.y === currentFocus?.y) {\n      return;\n    }\n    this.activeFocus = currentFocus;\n    currentFocus && this.el && this.changed(this.el, currentFocus);\n  }\n\n  render() {\n    const editCell = this.selectionStore.get('edit');\n    if (editCell) {\n      return;\n    }\n    const data = this.selectionStore.get('focus');\n    if (data) {\n      const event = this.beforeFocusRender.emit({\n        range: {\n          ...data,\n          x1: data.x,\n          y1: data.y,\n        },\n        rowType: this.rowType,\n        colType: this.colType,\n      });\n      if (event.defaultPrevented) {\n        return <slot/>;\n      }\n      const { detail } = event;\n      const style = getElStyle(\n        detail.range,\n        this.dimensionRow.state,\n        this.dimensionCol.state,\n      );\n      const extra = this.focusTemplate && this.focusTemplate(h, detail);\n      return <Host class={FOCUS_CLASS} style={style}><slot/>{ extra }</Host>;\n    }\n  }\n}\n","import { Edition, Observable, Selection } from '../../interfaces';\nimport { getRange } from './selection.helpers';\nimport Cell = Selection.Cell;\nimport Range = Selection.RangeArea;\n\ninterface Config {\n  changeRange(range: Range): boolean;\n  focus(focus: Cell, end: Cell): boolean;\n}\n\nexport default class SelectionStoreService {\n  constructor(public store: Observable<Selection.SelectionStoreState>, private config: Config) {\n    this.store = store;\n  }\n\n  get edited(): Edition.EditCellStore | null {\n    return this.store.get('edit');\n  }\n\n  get focused(): Cell | null {\n    return this.store.get('focus');\n  }\n\n  get ranged(): Range | null {\n    return this.store.get('range');\n  }\n\n  changeRange(range: Range) {\n    return this.config.changeRange(range);\n  }\n\n  focus(cell?: Cell, isMulti = false) {\n    if (!cell) {\n      return false;\n    }\n    let end: Cell = cell;\n\n    // range edit\n    if (isMulti) {\n      let start: Cell | null = this.store.get('focus');\n      if (start) {\n        return this.config.changeRange(getRange(start, end));\n      }\n    }\n\n    // single focus\n    return this.config.focus(cell, end);\n  }\n}\n","import { EDIT_INPUT_WR } from '../../../utils/consts';\n\n// is edit input\nexport function isEditInput(el?: HTMLElement) {\n  return !!el?.closest(`.${EDIT_INPUT_WR}`);\n}\n","import { Observable, Selection } from '../../interfaces';\nimport { getRange } from '../../store/selection/selection.helpers';\nimport SelectionStoreService from '../../store/selection/selection.store.service';\nimport { codesLetter } from '../../utils/keyCodes';\nimport { isAll, isClear, isCopy, isCut, isEnterKey, isLetterKey, isPaste } from '../../utils/keyCodes.utils';\nimport { timeout } from '../../utils';\nimport { EventData, getCoordinate, isAfterLast, isBeforeFirst } from './selection.utils';\nimport { RESIZE_INTERVAL } from '../../utils/consts';\n\ntype Config = {\n  selectionStoreService: SelectionStoreService;\n  selectionStore: Observable<Selection.SelectionStoreState>;\n\n  applyEdit(val?: any): void;\n  cancelEdit(): void;\n  clearCell(): void;\n  focusNext(focus: Selection.Cell, next: Partial<Selection.Cell>): boolean;\n  getData(): any;\n  internalPaste(): void;\n  range(range: Selection.RangeArea): boolean;\n  selectAll(): void;\n};\n\nconst DIRECTION_CODES: string[] = [\n  codesLetter.TAB,\n  codesLetter.ARROW_UP,\n  codesLetter.ARROW_DOWN,\n  codesLetter.ARROW_LEFT,\n  codesLetter.ARROW_RIGHT,\n];\nexport class KeyboardService {\n\n  constructor(private sv: Config) {}\n\n  async keyDown(e: KeyboardEvent, canRange: boolean) {\n    // IF EDIT MODE\n    if (this.sv.selectionStoreService.edited) {\n      switch (e.code) {\n        case codesLetter.ESCAPE:\n          this.sv.cancelEdit();\n          break;\n      }\n      return;\n    }\n\n    // IF NOT EDIT MODE\n\n    // pressed clear key\n    if (this.sv.selectionStoreService.ranged && isClear(e.code)) {\n      this.sv.clearCell();\n      return;\n    }\n\n    // below works with focus only\n    if (!this.sv.selectionStoreService.focused) {\n      return;\n    }\n\n    // tab key means same as arrow right\n    if (codesLetter.TAB === e.code) {\n      this.keyChangeSelection(e, canRange);\n      return;\n    }\n\n    // pressed enter\n    if (isEnterKey(e.code)) {\n      this.sv.applyEdit();\n      return;\n    }\n\n    // copy operation\n    if (isCopy(e)) {\n      return;\n    }\n\n    // cut operation\n    if (isCut(e)) {\n      return;\n    }\n\n    // paste operation\n    if (isPaste(e)) {\n      this.sv.internalPaste();\n      return;\n    }\n\n    // select all\n    if (isAll(e)) {\n      if (canRange) {\n        this.selectAll(e);\n      }\n      return;\n    }\n\n    // pressed letter key\n    if (isLetterKey(e.keyCode)) {\n      this.sv.applyEdit(e.key);\n      return;\n    }\n\n    // pressed arrow, change selection position\n    if (await this.keyChangeSelection(e, canRange)) {\n      return;\n    }\n  }\n\n  private selectAll(e: KeyboardEvent) {\n    const range = this.sv.selectionStore.get('range');\n    const focus = this.sv.selectionStore.get('focus');\n    // if no range or focus - do nothing\n    if (!range || !focus) {\n      return;\n    }\n    e.preventDefault();\n    this.sv.selectAll();\n  }\n\n  async keyChangeSelection(e: KeyboardEvent, canRange: boolean) {\n    const data = this.changeDirectionKey(e, canRange);\n    if (!data) {\n      return false;\n    }\n\n    // this interval needed for several cases\n    // grid could be resized before next click\n    // at this case to avoid screen jump we use this interval\n    await timeout(RESIZE_INTERVAL + 30);\n\n    const range = this.sv.selectionStore.get('range');\n    const focus = this.sv.selectionStore.get('focus');\n    return this.keyPositionChange(data.changes, range, focus, data.isMulti);\n  }\n\n  keyPositionChange(\n    changes: Partial<Selection.Cell>,\n    range?: Selection.RangeArea,\n    focus?: Selection.Cell,\n    isMulti = false\n  ) {\n    if (!range || !focus) {\n      return false;\n    }\n    const data = getCoordinate(range, focus, changes, isMulti);\n    if (!data) {\n      return false;\n    }\n    if (isMulti) {\n      const eData: EventData = this.sv.getData();\n      if (isAfterLast(data.end, eData) || isBeforeFirst(data.start)) {\n        return false;\n      }\n      const range = getRange(data.start, data.end);\n      return this.sv.range(range);\n    }\n    return this.sv.focusNext(data.start, changes);\n  }\n\n  /** Monitor key direction changes */\n  changeDirectionKey(e: KeyboardEvent, canRange: boolean): { changes: Partial<Selection.Cell>; isMulti?: boolean } | void {\n    const isMulti = canRange && e.shiftKey;\n    if (DIRECTION_CODES.includes(e.code)) {\n      e.preventDefault();\n    }\n    switch (e.code) {\n      case codesLetter.ARROW_UP:\n        return { changes: { y: -1 }, isMulti };\n      case codesLetter.ARROW_DOWN:\n        return { changes: { y: 1 }, isMulti };\n      case codesLetter.ARROW_LEFT:\n        return { changes: { x: -1 }, isMulti };\n      case codesLetter.TAB:\n      case codesLetter.ARROW_RIGHT:\n        return { changes: { x: 1 }, isMulti };\n    }\n  }\n}\n","import debounce from 'lodash/debounce';\nimport { DebouncedFunc } from 'lodash';\n\nimport { h } from '@stencil/core';\nimport { CELL_HANDLER_CLASS, MOBILE_CLASS } from '../../utils/consts';\nimport { Observable, Selection, RevoGrid, Edition } from '../../interfaces';\nimport { EventData, getCell, getCurrentCell, isAfterLast } from './selection.utils';\nimport { getRange } from '../../store/selection/selection.helpers';\nimport SelectionStoreService from '../../store/selection/selection.store.service';\nimport ColumnService from '../data/columnService';\nimport { DataSourceState, getSourceItem } from '../../store/dataSource/data.store';\nimport { getFromEvent } from '../../utils/events';\n\ntype Config = {\n  selectionStoreService: SelectionStoreService;\n  dimensionRow: Observable<RevoGrid.DimensionSettingsState>;\n  dimensionCol: Observable<RevoGrid.DimensionSettingsState>;\n  columnService: ColumnService;\n  dataStore: Observable<DataSourceState<RevoGrid.DataType, RevoGrid.DimensionRows>>;\n\n  setTempRange(e: Selection.TempRange | null): Event;\n  selectionChanged(e: Selection.ChangedRange): Event;\n  rangeCopy(e: Selection.ChangedRange): Event;\n  rangeDataApply(e: Edition.BeforeRangeSaveDataDetails): CustomEvent;\n  setRange(e: Selection.RangeArea): boolean;\n  clearRangeDataApply(e: {\n    range: Selection.RangeArea\n  }): CustomEvent<{\n    range: Selection.RangeArea\n  }>;\n\n  getData(): any;\n};\n\nenum AutoFillType {\n  selection = 'Selection',\n  autoFill = 'AutoFill',\n}\n\nexport class AutoFillService {\n  private autoFillType: AutoFillType | null = null;\n  private autoFillInitial: Selection.Cell | null = null;\n  private autoFillStart: Selection.Cell | null = null;\n  private autoFillLast: Selection.Cell | null = null;\n\n  private onMouseMoveAutofill: DebouncedFunc<(e: MouseEvent | TouchEvent, data: EventData) => void>;\n\n  constructor(private sv: Config) {}\n\n  /**\n   * Render autofill box\n   * @param range\n   * @param selectionFocus\n   */\n  renderAutofill(range: Selection.RangeArea, selectionFocus: Selection.Cell) {\n    let handlerStyle;\n    if (range) {\n      handlerStyle = getCell(range, this.sv.dimensionRow.state, this.sv.dimensionCol.state);\n    } else {\n      handlerStyle = getCell(\n        {\n          ...selectionFocus,\n          x1: selectionFocus.x,\n          y1: selectionFocus.y,\n        },\n        this.sv.dimensionRow.state,\n        this.sv.dimensionCol.state,\n      );\n    }\n    return (\n      <div\n        class={{\n          [CELL_HANDLER_CLASS]: true,\n          [MOBILE_CLASS]: true,\n        }}\n        style={{ left: `${handlerStyle.right}px`, top: `${handlerStyle.bottom}px` }}\n        onMouseDown={(e: MouseEvent) => this.autoFillHandler(e)}\n        onTouchStart={(e: TouchEvent) => this.autoFillHandler(e)}\n      />\n    );\n  }\n\n  private autoFillHandler(e: MouseEvent | TouchEvent, type = AutoFillType.autoFill) {\n    let target: Element | null = null;\n    if (e.target instanceof Element) {\n      target = e.target;\n    }\n    if (!target) {\n      return;\n    }\n    this.selectionStart(target, this.sv.getData(), type);\n    e.preventDefault();\n  }\n\n  get isAutoFill() {\n    return !!this.autoFillType;\n  }\n\n  /** Process mouse move events */\n  selectionMouseMove(e: MouseEvent | TouchEvent) {\n    // initiate mouse move debounce if not present\n    if (!this.onMouseMoveAutofill) {\n      this.onMouseMoveAutofill = debounce((e: MouseEvent | TouchEvent, data: EventData) => this.doAutofillMouseMove(e, data), 5);\n    }\n    if (this.isAutoFill) {\n      this.onMouseMoveAutofill(e, this.sv.getData());\n    }\n  }\n\n  private getFocus() {\n    let focus = this.sv.selectionStoreService.focused;\n    const range = this.sv.selectionStoreService.ranged;\n    // there was an issue that it was taking last cell from range but focus was out\n    if (!focus && range) {\n      focus = { x: range.x, y: range.y };\n    }\n    return focus || null;\n  }\n\n  /**\n   * Autofill logic:\n   * on mouse move apply based on previous direction (if present)\n   */\n  private doAutofillMouseMove(event: MouseEvent | TouchEvent, data: EventData) {\n    // if no initial - not started\n    if (!this.autoFillInitial) {\n      return;\n    }\n    const x = getFromEvent(event, 'clientX', MOBILE_CLASS);\n    const y = getFromEvent(event, 'clientY', MOBILE_CLASS);\n    // skip touch\n    if (x === null || y === null) {\n      return;\n    }\n    const current = getCurrentCell({ x, y }, data);\n\n    // first time or direction equal to start(same as first time)\n    if (!this.autoFillLast) {\n      if (!this.autoFillLast) {\n        this.autoFillLast = this.autoFillStart;\n      }\n    }\n\n    // check if not the latest, if latest - do nothing\n    if (isAfterLast(current, data)) {\n      return;\n    }\n    this.autoFillLast = current;\n\n    const isSame = current.x === this.autoFillInitial.x && current.y === this.autoFillInitial.y;\n    // if same as initial - clear\n    if (isSame) {\n      this.sv.setTempRange(null);\n    } else {\n      this.sv.setTempRange({\n        area: getRange(this.autoFillInitial, this.autoFillLast),\n        type: this.autoFillType,\n      });\n    }\n  }\n\n  /**\n   * Range selection started\n   * Mode @param type:\n   * Can be triggered from MouseDown selection on element\n   * Or can be triggered on corner square drag\n   */\n  selectionStart(target: Element, data: EventData, type = AutoFillType.selection) {\n    /** Get cell by autofill element */\n    const { top, left } = target.getBoundingClientRect();\n    this.autoFillInitial = this.getFocus();\n    this.autoFillType = type;\n    this.autoFillStart = getCurrentCell({ x: left, y: top }, data);\n  }\n\n  /**\n   * Clear current range selection\n   * on mouse up and mouse leave events\n   */ \n  clearAutoFillSelection() {\n    // Apply autofill values on mouse up if present\n    if (this.autoFillInitial) {\n      // Get latest\n      this.autoFillInitial = this.getFocus();\n\n      // Apply range data if present\n      if (this.autoFillType === AutoFillType.autoFill) {\n        const range = getRange(this.autoFillInitial, this.autoFillLast);\n        if (range) {\n          const {\n            defaultPrevented: stopApply,\n            detail: { range: newRange }\n          } = this.sv.clearRangeDataApply({\n            range,\n          });\n          if (!stopApply) {\n            this.applyRangeWithData(newRange);\n          } else {\n            // if prevented - clear temp range\n            this.sv.setTempRange(null);\n          }\n        }\n      } else {\n        this.applyRangeOnly(this.autoFillInitial, this.autoFillLast);\n      }\n    }\n\n    this.autoFillType = null;\n    this.autoFillInitial = null;\n    this.autoFillLast = null;\n    this.autoFillStart = null;\n  }\n\n  /** Trigger range apply events and handle responses */\n  onRangeApply(data: RevoGrid.DataLookup, range: Selection.RangeArea): void {\n    const models: RevoGrid.DataLookup = {};\n    for (let rowIndex in data) {\n      models[rowIndex] = getSourceItem(this.sv.dataStore, parseInt(rowIndex, 10));\n    }\n    const {\n      defaultPrevented: stopRange,\n      detail,\n    } = this.sv.rangeDataApply({\n      data,\n      models,\n      type: this.sv.dataStore.get('type'),\n    });\n    if (!stopRange) {\n      this.sv.columnService.applyRangeData(detail.data);\n    }\n    this.sv.setRange(range);\n  }\n\n  /** Apply range and copy data during range application */\n  private applyRangeWithData(newRange: Selection.RangeArea) {\n    const oldRange = this.sv.selectionStoreService.ranged;\n    const rangeData: Selection.ChangedRange = {\n      type: this.sv.dataStore.get('type'),\n      colType: this.sv.columnService.type,\n      newData: {},\n      mapping: {},\n      newRange,\n      oldRange,\n    };\n    const { mapping, changed } = this.sv.columnService.getRangeData(rangeData, this.sv.columnService.columns);\n    rangeData.newData = changed;\n    rangeData.mapping = mapping;\n    let e = this.sv.selectionChanged(rangeData);\n\n    // if default prevented - clear range\n    if (e.defaultPrevented) {\n      this.sv.setTempRange(null);\n      return;\n    }\n\n    e = this.sv.rangeCopy(rangeData);\n    if (e.defaultPrevented) {\n      this.sv.setRange(newRange);\n      return;\n    }\n    this.onRangeApply(rangeData.newData, newRange);\n  }\n\n  /**\n   * Update range selection only,\n   * no data change (mouse selection)\n   */\n  private applyRangeOnly(start?: Selection.Cell, end?: Selection.Cell) {\n    // no changes to apply\n    if (!start || !end) {\n      return;\n    }\n\n    const newRange = getRange(start, end);\n    this.sv.setRange(newRange);\n  }\n}\n","import { h } from '@stencil/core';\nimport SelectionStoreService from '../../store/selection/selection.store.service';\nimport { Observable, RevoGrid, Selection } from '../../interfaces';\nimport { getRange } from '../../store/selection/selection.helpers';\nimport ColumnService from '../data/columnService';\nimport { DataSourceState } from '../../store/dataSource/data.store';\n\ntype Config = {\n  selectionStoreService: SelectionStoreService;\n  columnService: ColumnService;\n  dataStore: Observable<DataSourceState<RevoGrid.DataType, RevoGrid.DimensionRows>>;\n  rangeApply(data: RevoGrid.DataLookup, range: Selection.RangeArea): void;\n  rangeCopy(range: Selection.RangeArea): any;\n  rangeClear(): void;\n  beforeCopy(range: Selection.RangeArea): CustomEvent;\n  beforePaste(data: RevoGrid.DataLookup, range: Selection.RangeArea): CustomEvent;\n};\n\nexport class ClipboardService {\n  private clipboard: HTMLRevogrClipboardElement;\n  constructor(private sv: Config) {}\n\n  renderClipboard(readonly = false) {\n    return <revogr-clipboard\n      readonly={readonly}\n      onCopyRegion={e => this.onCopy(e.detail)}\n      onClearRegion={() => this.sv.rangeClear()}\n      ref={e => (this.clipboard = e)}\n      onPasteRegion={e => this.onPaste(e.detail)} />;\n  }\n  private getRegion() {\n    const focus = this.sv.selectionStoreService.focused;\n    let range = this.sv.selectionStoreService.ranged;\n    if (!range) {\n      range = getRange(focus, focus);\n    }\n    return range;\n  }\n  private onCopy(e: DataTransfer) {\n    const range = this.getRegion();\n    const canCopyEvent = this.sv.beforeCopy(range);\n    if (canCopyEvent.defaultPrevented) {\n      return false;\n    }\n    const data = this.sv.rangeCopy(range);\n    this.clipboard.doCopy(e, data);\n    return true;\n  }\n\n  private onPaste(data: string[][]) {\n    const focus = this.sv.selectionStoreService.focused;\n    const isEditing = this.sv.selectionStoreService.edited !== null;\n    if (!focus || isEditing) {\n      return;\n    }\n    let { changed, range } = this.sv.columnService.getTransformedDataToApply(focus, data);\n    const { defaultPrevented: canPaste } = this.sv.beforePaste(changed, range);\n    if (canPaste) {\n      return;\n    }\n    this.sv.rangeApply(changed, range);\n  }\n}\n","@mixin autofill-handle($handler-size: 14px, $icon-size: 10px) {\n  .autofill-handle {\n    position: absolute;\n    width: $handler-size;\n    height: $handler-size;\n    margin-left: -$handler-size + 1;\n    margin-top: -$handler-size + 1;\n    z-index: 10;\n    cursor: crosshair;\n\n    &::before {\n      content: '';\n      position: absolute;\n      right: 0;\n      bottom: 0;\n      width: $icon-size;\n      height: $icon-size;\n      background: $selection-border;\n      border: 1px solid white;\n      box-sizing: border-box;\n    }\n  }\n}\n\nrevogr-overlay-selection {\n  display: block;\n  position: relative;\n  width: 100%;\n\n\n  @include autofill-handle;\n\n  &.mobile {\n    @include autofill-handle(30px, 12px);\n  }\n\n  .selection-border-range {\n    position: absolute;\n    pointer-events: none;\n    z-index: 9;\n\n    .range-handlers {\n      height: 100%;\n      background-color: transparent;\n      width: calc(50% + (50% / 2));\n      max-width: 50px;\n      min-width: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      position: absolute;\n\n      $btn-size: 20px;\n      $handler-w: 15px;\n      $handler-h: 5px;\n      \n      > span {\n        pointer-events: auto;\n        height: $btn-size;\n        width: $btn-size;\n        position: absolute;\n        left: 50%;\n        transform: translateX(-50%);\n\n\n        &:before, &:after {\n          position: absolute;\n          border-radius: 5px;\n          width: $handler-w;\n          height: $handler-h;\n          left: 50%;\n          transform: translateX(-50%);\n          background-color: rgba(black, 20%);\n        }\n        &:first-child {\n          top: -($handler-h + 2px);\n          &:before{\n            content: '';\n            top: 0;\n          }\n        }\n        &:last-child {\n          bottom: -($handler-h + 2px);\n          &:after{\n            content: '';\n            bottom: 0;\n          }\n        }\n      }\n    }\n    @include selection();\n  }\n\n  revogr-edit {\n    z-index: 10;\n  }\n}\n","import { Component, Event, EventEmitter, h, Host, Listen, Prop, VNode, Element, Watch } from '@stencil/core';\n\nimport { AllDimensionType, ApplyFocusEvent, FocusRenderEvent, Edition, Observable, RevoGrid, Selection, DragStartEvent } from '../../interfaces';\nimport ColumnService from '../data/columnService';\nimport SelectionStoreService from '../../store/selection/selection.store.service';\nimport { codesLetter } from '../../utils/keyCodes';\nimport { MOBILE_CLASS, SELECTION_BORDER_CLASS } from '../../utils/consts';\nimport { DataSourceState } from '../../store/dataSource/data.store';\nimport { isRangeSingleCell } from '../../store/selection/selection.helpers';\nimport { getCurrentCell, getElStyle } from './selection.utils';\nimport { isEditInput } from './editors/edit.utils';\nimport { KeyboardService } from './keyboard.service';\nimport { AutoFillService } from './autofill.service';\nimport { ClipboardService } from './clipboard.service';\nimport { getFromEvent, verifyTouchTarget } from '../../utils/events';\n\n@Component({\n  tag: 'revogr-overlay-selection',\n  styleUrl: 'revogr-overlay-style.scss',\n})\nexport class OverlaySelection {\n\n  @Element() element: HTMLElement;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * If readonly mode enables\n   */\n  @Prop() readonly: boolean;\n  /**\n   * Range selection mode\n   */\n  @Prop() range: boolean;\n  /**\n   * Enable revogr-order-editor component (read more in revogr-order-editor component)\n   * Allows D&D\n   */\n  @Prop() canDrag: boolean;\n\n  /**\n   * Enable revogr-clipboard component (read more in revogr-clipboard component)\n   * Allows copy/paste\n   */\n  @Prop() useClipboard: boolean;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Dynamic stores\n  //\n  // --------------------------------------------------------------------------\n  @Prop() selectionStore: Observable<Selection.SelectionStoreState>;\n  @Prop() dimensionRow: Observable<RevoGrid.DimensionSettingsState>;\n  @Prop() dimensionCol: Observable<RevoGrid.DimensionSettingsState>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Static stores, not expected to change during component lifetime\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Row data store\n   */\n  @Prop() dataStore: Observable<DataSourceState<RevoGrid.DataType, RevoGrid.DimensionRows>>;\n\n  /**\n   * Column data store\n   */\n  @Prop() colData: Observable<DataSourceState<RevoGrid.ColumnRegular, RevoGrid.DimensionCols>>;\n  /**\n   * Last cell position\n   */\n  @Prop() lastCell: Selection.Cell;\n  /**\n   * Custom editors register\n   */\n  @Prop() editors: Edition.Editors;\n  /**\n   * If true applys changes when cell closes if not Escape\n   */\n  @Prop() applyChangesOnClose: boolean = false;\n  /**\n   * Additional data to pass to renderer\n   */\n  @Prop() additionalData: any;\n\n  /**\n   * Is mobile view mode\n   */\n  @Prop() isMobileDevice: boolean;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Before clipboard copy happened\n   */\n  @Event({ cancelable: true }) internalCopy: EventEmitter;\n  /**\n   * Before paste happened\n   */\n  @Event({ cancelable: true }) internalPaste: EventEmitter;\n\n  @Event({ cancelable: true }) internalCellEdit: EventEmitter<Edition.BeforeSaveDataDetails>;\n  @Event({ cancelable: true }) beforeFocusCell: EventEmitter<Edition.BeforeSaveDataDetails>;\n\n  /**\n   * Set edit cell\n   */\n  @Event() setEdit: EventEmitter<Edition.BeforeEdit>;\n  @Event({ eventName: 'before-apply-range' }) beforeApplyRange: EventEmitter<FocusRenderEvent>;\n  /**\n   * Before range selection applied\n   */\n  @Event({ eventName: 'before-set-range' }) beforeSetRange: EventEmitter;\n  @Event({ eventName: 'before-edit-render' }) beforeEditRender: EventEmitter<FocusRenderEvent>;\n  @Event() setRange: EventEmitter<Selection.RangeArea & { type: RevoGrid.MultiDimensionType }>;\n  @Event({ eventName: 'selectall' }) selectAll: EventEmitter;\n  /**\n   * Used for editors support when close requested\n   */\n  @Event() cancelEdit: EventEmitter;\n  @Event() setTempRange: EventEmitter<Selection.TempRange | null>;\n\n  @Event() applyFocus: EventEmitter<FocusRenderEvent>;\n  @Event() focusCell: EventEmitter<ApplyFocusEvent>;\n  /** Range data apply */\n  @Event() beforeRangeDataApply: EventEmitter<FocusRenderEvent>;\n  /** Selection range changed */\n  @Event({ cancelable: true }) internalSelectionChanged: EventEmitter<Selection.ChangedRange>;\n  /** Selection range changed */\n  @Event({ cancelable: true, bubbles: true }) beforeRangeCopyApply: EventEmitter<Selection.ChangedRange>;\n\n  /** Range data apply */\n  @Event({ cancelable: true }) internalRangeDataApply: EventEmitter<Edition.BeforeRangeSaveDataDetails>;\n  /** Range copy */\n  @Event({ cancelable: true }) rangeClipboardCopy: EventEmitter;\n  @Event({ cancelable: true }) rangeClipboardPaste: EventEmitter;\n\n  /**\n   * Before key up event proxy, used to prevent key up trigger.\n   * If you have some custom behaviour event, use this event to check if it wasn't processed by internal logic.\n   * Call preventDefault()\n   */\n  @Event({ eventName: 'beforekeydown' }) beforeKeyDown: EventEmitter<KeyboardEvent>;\n  /**\n   * Before key down event proxy, used to prevent key down trigger.\n   * If you have some custom behaviour event, use this event to check if it wasn't processed by internal logic.\n   * Call preventDefault()\n   */\n  @Event({ eventName: 'beforekeyup' }) beforeKeyUp: EventEmitter<KeyboardEvent>;\n\n  protected columnService: ColumnService;\n\n  protected selectionStoreService: SelectionStoreService;\n  private keyboardService: KeyboardService | null = null;\n  private autoFillService: AutoFillService | null = null;\n  private clipboardService: ClipboardService | null = null;\n  private orderEditor: HTMLRevogrOrderEditorElement;\n  private revogrEdit: HTMLRevogrEditElement | null = null;\n  /**\n   * Runs before cell save\n   * Can be used to override or cancel original save\n   */\n  @Event({ eventName: 'before-cell-save', cancelable: true }) beforeCellSave: EventEmitter;\n  // --------------------------------------------------------------------------\n  //\n  //  Listeners\n  //\n  // --------------------------------------------------------------------------\n  @Listen('touchmove', { target: 'document' })\n  @Listen('mousemove', { target: 'document' })\n  onMouseMove(e: MouseEvent | TouchEvent) {\n    if (this.selectionStoreService.focused) {\n      this.autoFillService.selectionMouseMove(e);\n    }\n  }\n\n\n  /** Action finished inside of the document */\n  /** Pointer left document, clear any active operation */\n  @Listen('touchend', { target: 'document' })\n  @Listen('mouseup', { target: 'document' })\n  @Listen('mouseleave', { target: 'document' })\n  onMouseUp() {\n    this.autoFillService.clearAutoFillSelection();\n  }\n\n  /** Row drag started */\n  @Listen('dragStartCell') onCellDrag(e: CustomEvent<DragStartEvent>) {\n    this.orderEditor?.dragStart(e.detail);\n  }\n\n  /** Get keyboard down from element */\n  @Listen('keyup', { target: 'document' }) onKeyUp(e: KeyboardEvent) {\n    this.beforeKeyUp.emit(e);\n  }\n\n  /** Get keyboard down from element */\n  @Listen('keydown', { target: 'document' }) onKeyDown(e: KeyboardEvent) {\n    const proxy = this.beforeKeyDown.emit(e);\n    if (e.defaultPrevented || proxy.defaultPrevented) {\n      return;\n    }\n    this.keyboardService?.keyDown(e, this.range);\n  }\n\n  // selection & keyboard\n  @Watch('selectionStore') selectionServiceSet(s: Observable<Selection.SelectionStoreState>) {\n    this.selectionStoreService = new SelectionStoreService(s, {\n      changeRange: range => this.triggerRangeEvent(range),\n      focus: (focus, end) => this.doFocus(focus, end),\n    });\n\n    this.keyboardService = new KeyboardService({\n      selectionStoreService: this.selectionStoreService,\n      selectionStore: s,\n      range: r => this.selectionStoreService.changeRange(r),\n      focusNext: (f, next) => this.doFocus(f, f, next),\n      applyEdit: val => {\n        if (this.readonly) {\n          return;\n        }\n        this.doEdit(val);\n      },\n      cancelEdit: async () => {\n        await this.revogrEdit.cancel();\n        this.closeEdit();\n      },\n      clearCell: () => !this.readonly && this.clearCell(),\n      internalPaste: () => !this.readonly && this.internalPaste.emit(),\n      getData: () => this.getData(),\n      selectAll: () => this.selectAll.emit(),\n    });\n    this.createAutoFillService();\n    this.createClipboardService();\n  }\n  // autofill\n  @Watch('dimensionRow')\n  @Watch('dimensionCol')\n  createAutoFillService() {\n    this.autoFillService = new AutoFillService({\n      selectionStoreService: this.selectionStoreService,\n      dimensionRow: this.dimensionRow,\n      dimensionCol: this.dimensionCol,\n      columnService: this.columnService,\n      dataStore: this.dataStore,\n\n      clearRangeDataApply: e =>\n        this.beforeRangeDataApply.emit({\n          ...e,\n          ...this.types,\n        }),\n      setTempRange: e => this.setTempRange.emit(e),\n      selectionChanged: e => this.internalSelectionChanged.emit(e),\n      rangeCopy: e => this.beforeRangeCopyApply.emit(e),\n      rangeDataApply: e => this.internalRangeDataApply.emit(e),\n\n      setRange: e => this.triggerRangeEvent(e),\n      getData: () => this.getData(),\n    });\n  }\n\n  // columns\n  @Watch('dataStore')\n  @Watch('colData')\n  columnServiceSet() {\n    this.columnService?.destroy();\n    this.columnService = new ColumnService(this.dataStore, this.colData);\n    this.createAutoFillService();\n    this.createClipboardService();\n  }\n\n  // clipboard\n  createClipboardService() {\n    this.clipboardService = new ClipboardService({\n      selectionStoreService: this.selectionStoreService,\n      columnService: this.columnService,\n      dataStore: this.dataStore,\n      rangeApply: (d, r) => this.autoFillService.onRangeApply(d, r),\n      rangeCopy: range => {\n        if (!range) {\n          return undefined;\n        }\n        const { data, mapping } = this.columnService.copyRangeArray(range, this.dataStore);\n        const event = this.rangeClipboardCopy.emit({\n          range,\n          data,\n          mapping,\n          ...this.types,\n        });\n        if (event.defaultPrevented) {\n          return undefined;\n        }\n        return event.detail.data;\n      },\n      rangeClear: () => !this.readonly && this.clearCell(),\n      beforeCopy: range => this.internalCopy.emit(range),\n      beforePaste: (data, range) => {\n        return this.rangeClipboardPaste.emit({\n          data,\n          range,\n          ...this.types,\n        });\n      },\n    });\n  }\n\n  connectedCallback() {\n    this.columnServiceSet();\n    this.selectionServiceSet(this.selectionStore);\n  }\n\n  disconnectedCallback() {\n    this.columnService?.destroy();\n  }\n\n  private renderRange(range: Selection.RangeArea) {\n    const style = getElStyle(range, this.dimensionRow.state, this.dimensionCol.state);\n    return [\n      <div class={SELECTION_BORDER_CLASS} style={style}>\n        {this.isMobileDevice && <div class=\"range-handlers\"><span class={MOBILE_CLASS}></span><span class={MOBILE_CLASS}></span></div>}\n      </div>\n    ];\n  }\n\n  private renderEditCell() {\n    // if can edit\n    const editCell = this.selectionStore.get('edit');\n    if (this.readonly || !editCell) {\n      return null;\n    }\n    const val = editCell.val || this.columnService.getCellData(editCell.y, editCell.x);\n    const editable = {\n      ...editCell,\n      ...this.columnService.getSaveData(editCell.y, editCell.x, val),\n    };\n    const renderEvent = this.beforeEditRender.emit({\n      range: {\n        ...editCell,\n        x1: editCell.x,\n        y1: editCell.y,\n      },\n      ...this.types,\n    });\n    if (renderEvent.defaultPrevented) {\n      return null;\n    }\n\n    const {\n      detail: { range },\n    } = renderEvent;\n    const style = getElStyle(range, this.dimensionRow.state, this.dimensionCol.state);\n    return (\n      <revogr-edit\n        ref={el => {\n          this.revogrEdit = el;\n        }}\n        onCellEdit={e => {\n          const saveEv = this.beforeCellSave.emit(e.detail);\n          if (!saveEv.defaultPrevented) {\n            this.cellEdit(saveEv.detail);\n          }\n\n          // if not clear navigate to next cell after edit\n          if (!saveEv.detail.preventFocus) {\n            this.focusNext();\n          }\n        }}\n        onCloseEdit={e => this.closeEdit(e)}\n        editCell={editable}\n        saveOnClose={this.applyChangesOnClose}\n        column={this.columnService.columns[editCell.x]}\n        editor={this.columnService.getCellEditor(editCell.y, editCell.x, this.editors)}\n        additionalData={this.additionalData}\n        style={style}\n      />\n    );\n  }\n\n  render() {\n    const els: VNode[] = [];\n    const editCell = this.renderEditCell();\n    if (editCell) {\n      els.push(editCell);\n    } else {\n      const range = this.selectionStoreService.ranged;\n      const selectionFocus = this.selectionStoreService.focused;\n      if ((range || selectionFocus) && this.useClipboard) {\n        els.push(this.clipboardService.renderClipboard(this.readonly));\n      }\n\n      if (range) {\n        els.push(...this.renderRange(range));\n      }\n      if (selectionFocus && !this.readonly && this.range) {\n        els.push(this.autoFillService.renderAutofill(range, selectionFocus));\n      }\n      if (this.canDrag) {\n        els.push(\n          <revogr-order-editor\n            ref={e => (this.orderEditor = e)}\n            dataStore={this.dataStore}\n            dimensionRow={this.dimensionRow}\n            dimensionCol={this.dimensionCol}\n            parent={this.element}\n            onInternalRowDragStart={e => this.onRowDragStart(e)}\n          />,\n        );\n      }\n    }\n    return (\n      <Host\n        class={{ mobile: this.isMobileDevice }}\n        // run edit on dblclick\n        onDblClick={(e: MouseEvent) => {\n          // if dblclick prevented outside edit will not start\n          if (!e.defaultPrevented) {\n            this.doEdit();\n          }\n        }}\n        onMouseDown={(e: MouseEvent) => this.onElementMouseDown(e)}\n        onTouchStart={(e: TouchEvent) => this.onElementMouseDown(e, true)}>\n        {els}\n        <slot name=\"data\" />\n      </Host>\n    );\n  }\n\n  private doFocus(focus: Selection.Cell, end: Selection.Cell, next?: Partial<Selection.Cell>) {\n    const { defaultPrevented } = this.beforeFocusCell.emit(this.columnService.getSaveData(focus.y, focus.x));\n    if (defaultPrevented) {\n      return false;\n    }\n    const evData = {\n      range: {\n        ...focus,\n        x1: end.x,\n        y1: end.y,\n      },\n      next,\n      ...this.types,\n    };\n    const applyEvent = this.applyFocus.emit(evData);\n    if (applyEvent.defaultPrevented) {\n      return false;\n    }\n    const { range } = applyEvent.detail;\n    return !this.focusCell.emit({\n      focus: {\n        x: range.x,\n        y: range.y,\n      },\n      end: {\n        x: range.x1,\n        y: range.y1,\n      },\n      ...applyEvent.detail,\n    }).defaultPrevented;\n  }\n\n  private triggerRangeEvent(range: Selection.RangeArea) {\n    const type = this.types.rowType;\n    const applyEvent = this.beforeApplyRange.emit({\n      range: { ...range },\n      ...this.types,\n    });\n    if (applyEvent.defaultPrevented) {\n      return false;\n    }\n    const data = this.columnService.getRangeTransformedToProps(applyEvent.detail.range, this.dataStore);\n    let e = this.beforeSetRange.emit(data);\n    e = this.setRange.emit({ ...applyEvent.detail.range, type });\n    if (e.defaultPrevented) {\n      return false;\n    }\n    return !e.defaultPrevented;\n  }\n\n  protected onElementMouseDown(e: MouseEvent | TouchEvent, touch = false) {\n    // Ignore focus if clicked input\n    if (isEditInput(e.target as HTMLElement | undefined)) {\n      return;\n    }\n    const data = this.getData();\n    if (e.defaultPrevented) {\n      return;\n    }\n    const x = getFromEvent(e, 'clientX');\n    const y = getFromEvent(e, 'clientY');\n    // skip touch\n    if (x === null || y === null) {\n      return;\n    }\n    // Regular cell click\n    const focusCell = getCurrentCell({ x, y }, data);\n    this.selectionStoreService.focus(focusCell, this.range && e.shiftKey);\n\n    // Initiate autofill selection\n    if (this.range) {\n      this.autoFillService.selectionStart(e.target as HTMLElement, data);\n      if (!touch) {\n        e.preventDefault();\n      } else if (verifyTouchTarget((e as TouchEvent).touches[0], MOBILE_CLASS)) {\n        e.preventDefault();\n      }\n    }\n  }\n\n  /** \n   * Start cell editing\n   */\n  protected doEdit(val = '') {\n    if (this.canEdit()) {\n      const editCell = this.selectionStore.get('focus');\n      const data = this.columnService.getSaveData(editCell.y, editCell.x);\n      this.setEdit?.emit({\n        ...data,\n        val,\n      });\n    }\n  }\n\n  /**\n   * Close editor event triggered\n   * @param details - if requires focus next\n   */\n  private closeEdit(e?: CustomEvent<boolean>) {\n    this.cancelEdit.emit();\n    if (e?.detail) {\n      this.focusNext();\n    }\n  }\n\n  /** Edit finished, close cell and save */\n  protected cellEdit(e: Edition.SaveDataDetails) {\n    const dataToSave = this.columnService.getSaveData(e.rgRow, e.rgCol, e.val);\n    this.internalCellEdit.emit(dataToSave);\n  }\n\n  private async focusNext() {\n    const canFocus = await this.keyboardService.keyChangeSelection(\n      new KeyboardEvent('keydown', {\n        code: codesLetter.ARROW_DOWN,\n      }),\n      this.range,\n    );\n    if (!canFocus) {\n      this.closeEdit();\n    }\n  }\n\n  protected clearCell() {\n    if (this.selectionStoreService.ranged && !isRangeSingleCell(this.selectionStoreService.ranged)) {\n      const data = this.columnService.getRangeStaticData(this.selectionStoreService.ranged, '');\n      this.autoFillService.onRangeApply(data, this.selectionStoreService.ranged);\n    } else if (this.canEdit()) {\n      const focused = this.selectionStoreService.focused;\n      const cell = this.columnService.getSaveData(focused.y, focused.x);\n      this.cellEdit({\n        rgRow: focused.y,\n        rgCol: focused.x,\n        val: '',\n        type: cell.type,\n        prop: cell.prop,\n      });\n    }\n  }\n\n  private onRowDragStart({ detail }: CustomEvent<{ cell: Selection.Cell; text: string }>) {\n    detail.text = this.columnService.getCellData(detail.cell.y, detail.cell.x);\n  }\n\n  /** Check if edit possible */\n  protected canEdit() {\n    if (this.readonly) {\n      return false;\n    }\n    const editCell = this.selectionStoreService.focused;\n    return editCell && !this.columnService?.isReadOnly(editCell.y, editCell.x);\n  }\n\n  get types(): AllDimensionType {\n    return {\n      rowType: this.dataStore.get('type'),\n      colType: this.columnService.type,\n    };\n  }\n\n  /** Collect data from element */\n  protected getData() {\n    return {\n      el: this.element,\n      rows: this.dimensionRow.state,\n      cols: this.dimensionCol.state,\n      lastCell: this.lastCell,\n    };\n  }\n}\n","import { VNode } from '@stencil/core';\nimport { RevoGrid } from '../../interfaces';\n\ntype HeaderRender = {\n  (start: number): (h: RevoGrid.HyperFunc<VNode>, e: { rowIndex: number }) => number;\n};\nexport const RowHeaderRender: HeaderRender = s => (__, { rowIndex: i }) => s + i;\n","import { h, Host } from '@stencil/core';\nimport { Component, Prop, Event, EventEmitter } from '@stencil/core';\nimport { RevoGrid } from '../../interfaces';\nimport DataStore from '../../store/dataSource/data.store';\nimport ViewportStore from '../../store/viewPort/viewport.store';\nimport { ROW_HEADER_TYPE, UUID } from '../../utils/consts';\nimport { ElementScroll } from '../revoGrid/viewport.scrolling.service';\nimport { ViewportData } from '../revoGrid/viewport.interfaces';\nimport { RowHeaderRender } from './row-header-render';\nimport { calculateRowHeaderSize } from '../../utils/row-header-utils';\nimport { HEADER_SLOT } from '../revoGrid/viewport.helpers';\nimport { JSX } from '../..';\n\n/**\n * Row headers component\n * Visible on the left side of the table\n */\n\n@Component({ tag: 'revogr-row-headers' })\nexport class RevogrRowHeaders {\n  @Prop() height: number;\n\n  @Prop() dataPorts: ViewportData[];\n  @Prop() headerProp: Record<string, any>;\n  @Prop() uiid: string;\n  @Prop() rowClass: string;\n\n  @Prop() resize: boolean;\n  @Prop() rowHeaderColumn: RevoGrid.RowHeaders;\n  /** Additional data to pass to renderer */\n  @Prop() additionalData: any;\n\n  @Event({ bubbles: false })\n  scrollViewport: EventEmitter<RevoGrid.ViewPortScrollEvent>;\n  @Event({ bubbles: false }) elementToScroll: EventEmitter<ElementScroll>;\n\n  render() {\n    const dataViews: HTMLElement[] = [];\n    const viewport = new ViewportStore('colPinStart');\n\n    /** render viewports rows */\n    let totalLength = 1;\n    for (let data of this.dataPorts) {\n      const itemCount = data.dataStore.get('items').length;\n      // initiate row data\n      const dataStore = new DataStore<\n        RevoGrid.DataType,\n        RevoGrid.DimensionRows\n      >(data.type);\n      dataStore.updateData(data.dataStore.get('source'));\n      // initiate column data\n      const colData = new DataStore<\n        RevoGrid.ColumnRegular,\n        RevoGrid.DimensionCols\n      >('colPinStart');\n      const column: RevoGrid.ColumnRegular = {\n        cellTemplate: RowHeaderRender(totalLength),\n        ...this.rowHeaderColumn,\n      };\n      colData.updateData([column]);\n\n      const viewData = {\n        ...data,\n        rowClass: this.rowClass,\n        dataStore: dataStore.store,\n        colData: colData.store,\n        viewportCol: viewport.store,\n        readonly: true,\n        range: false,\n      };\n      dataViews.push(\n        <revogr-data {...viewData}></revogr-data>,\n      );\n      totalLength += itemCount;\n    }\n\n    const colSize = calculateRowHeaderSize(totalLength, this.rowHeaderColumn);\n    viewport.setViewport({\n      realCount: 1,\n      virtualSize: 0,\n      items: [\n        {\n          size: colSize,\n          start: 0,\n          end: colSize,\n          itemIndex: 0,\n        },\n      ],\n    });\n\n    const parent = `${this.uiid}-rowHeaders`;\n    const viewportScroll = {\n      [UUID]: parent,\n      contentHeight: this.height,\n      contentWidth: 0,\n      style: { minWidth: `${colSize}px` },\n      ref: (el: ElementScroll) => this.elementToScroll.emit(el),\n      onScrollViewport: (e: CustomEvent) => this.scrollViewport.emit(e.detail),\n    };\n    const viewportHeader: JSX.RevogrHeader & { slot: string } = {\n      ...this.headerProp,\n      colData:\n        typeof this.rowHeaderColumn === 'object' ? [this.rowHeaderColumn] : [],\n      viewportCol: viewport.store,\n      canResize: false,\n      type: ROW_HEADER_TYPE,\n      parent,\n      slot: HEADER_SLOT,\n    };\n    return (\n      <Host class={{ [ROW_HEADER_TYPE]: true }} key={ROW_HEADER_TYPE}>\n        <revogr-viewport-scroll {...viewportScroll} row-header={true}>\n          <revogr-header {...viewportHeader} />\n          {dataViews}\n        </revogr-viewport-scroll>\n      </Host>\n    );\n  }\n}\n","revogr-scroll-virtual {\n  &[auto-hide] {\n    position: absolute;\n    z-index: 100;\n\n    &.vertical {\n      right: 0;\n      top: 0;\n\n      &:hover {\n        min-width: 20px;\n      }\n    }\n\n    &.horizontal {\n      bottom: 0;\n      left: 0;\n\n      &:hover {\n        min-height: 20px;\n      }\n    }\n  }\n\n  &.vertical {\n    overflow-y: auto;\n    overflow-x: hidden;\n    height: 100%;\n\n    > div {\n      width: 1px;\n    }\n  }\n\n  &.horizontal {\n    overflow-x: auto;\n    overflow-y: hidden;\n    width: 100%;\n\n    > div {\n      height: 1px;\n    }\n  }\n}\n","import { Component, Element, Event, EventEmitter, h, Host, Method, Prop } from '@stencil/core';\nimport LocalScrollService from '../../services/localScrollService';\nimport { Observable, RevoGrid } from '../../interfaces';\nimport { getScrollbarWidth } from '../../utils';\n\n@Component({\n  tag: 'revogr-scroll-virtual',\n  styleUrl: 'revogr-scroll-style.scss',\n})\nexport class RevogrScrollVirtual {\n  private scrollSize: number = 0;\n  private isAutoHide: boolean = false;\n  private autoHideTimeout: number = 0;\n  private scrollService: LocalScrollService;\n\n  @Element() element: HTMLElement;\n\n  @Prop() dimension: RevoGrid.DimensionType = 'rgRow';\n  @Prop() viewportStore: Observable<RevoGrid.ViewportState>;\n  @Prop() dimensionStore: Observable<RevoGrid.DimensionSettingsState>;\n\n  @Event() scrollVirtual: EventEmitter<RevoGrid.ViewPortScrollEvent>;\n\n  @Method()\n  async setScroll(e: RevoGrid.ViewPortScrollEvent): Promise<void> {\n    if (this.dimension !== e.dimension) {\n      return;\n    }\n    this.scrollService?.setScroll(e);\n  }\n\n  // update on delta in case we don't know existing position or external change\n  @Method()\n  async changeScroll(e: RevoGrid.ViewPortScrollEvent): Promise<RevoGrid.ViewPortScrollEvent> {\n    if (e.delta) {\n      switch (e.dimension) {\n        case 'rgCol':\n          e.coordinate = this.element.scrollLeft + e.delta;\n          break;\n        case 'rgRow':\n          e.coordinate = this.element.scrollTop + e.delta;\n          break;\n      }\n      this.setScroll(e);\n    }\n    return e;\n  }\n\n  set size(s: number) {\n    if (this.dimension === 'rgRow') {\n      this.element.style.minWidth = `${s}px`;\n      return;\n    }\n    this.element.style.minHeight = `${s}px`;\n  }\n\n  get size(): number {\n    if (this.dimension === 'rgRow') {\n      return this.element.clientHeight;\n    }\n    return this.element.clientWidth;\n  }\n\n  connectedCallback(): void {\n    this.scrollService = new LocalScrollService({\n      beforeScroll: e => this.scrollVirtual.emit(e),\n      afterScroll: e => {\n        const type = e.dimension === 'rgRow' ? 'scrollTop' : 'scrollLeft';\n        this.element[type] = e.coordinate;\n      },\n    });\n  }\n\n  disconnectedCallback(): void {\n    clearTimeout(this.autoHideTimeout);\n  }\n\n  componentWillLoad(): void {\n    this.scrollSize = getScrollbarWidth(document);\n    this.isAutoHide = !this.scrollSize;\n  }\n\n  componentDidRender(): void {\n    const type = this.dimension === 'rgRow' ? 'scrollHeight' : 'scrollWidth';\n    if (this.element[type] > this.size) {\n      this.size = this.scrollSize;\n    } else {\n      this.size = 0;\n    }\n    this.scrollService.setParams(\n      {\n        contentSize: this.dimensionStore.get('realSize'),\n        clientSize: this.size,\n        virtualSize: this.viewportStore.get('virtualSize'),\n      },\n      this.dimension,\n    );\n  }\n\n  onScroll(e: MouseEvent): void {\n    let type: 'scrollLeft' | 'scrollTop' = 'scrollLeft';\n    if (this.dimension === 'rgRow') {\n      type = 'scrollTop';\n    }\n    if (this.isAutoHide) {\n      this.size = 20;\n      this.autoHideTimeout = this.autoHide(this.autoHideTimeout);\n    }\n    const target: HTMLElement = e.target as HTMLElement;\n    this.scrollService?.scroll(target[type] || 0, this.dimension);\n  }\n\n  autoHide(timeout?: number): number {\n    clearTimeout(timeout);\n    return (setTimeout(() => {\n      this.size = 0;\n    }, 6000) as unknown) as number;\n  }\n\n  render() {\n    const sizeType = this.dimension === 'rgRow' ? 'height' : 'width';\n    return (\n      <Host {...{ 'auto-hide': this.isAutoHide }} onScroll={(e: MouseEvent) => this.onScroll(e)}>\n        <div style={{ [sizeType]: `${this.extContentSize(this.viewportStore.get('virtualSize'), this.dimensionStore.get('realSize'))}px` }} />\n      </Host>\n    );\n  }\n\n  private extContentSize(vsize: number, contentSize: number): number {\n    return LocalScrollService.getVirtualContentSize(contentSize, this.size, vsize);\n  }\n}\n",".temp-bg-range {\n  display: block !important;\n  position: absolute;\n  pointer-events: none;\n  z-index: 9;\n  border: 1px solid rgb(255, 94, 0);\n  box-sizing: border-box;\n\n  &.Selection {\n    border: 1px dashed gray;\n  }\n\n  > div {\n    width: 1px;\n    height: 1px;\n    position: absolute;\n\n    &.top {\n      top: -1px;\n    }\n\n    &.bottom {\n      bottom: -1px;\n    }\n\n    &.left {\n      left: -1px;\n    }\n\n    &.right {\n      right: -1px;\n    }\n  }\n}\n","import { Component, Prop, h, Host } from '@stencil/core';\nimport { throttle } from 'lodash';\nimport { Observable, RevoGrid, Selection } from '../../interfaces';\nimport { TMP_SELECTION_BG_CLASS } from '../../utils/consts';\nimport { getElStyle } from '../overlay/selection.utils';\n\n/**\n * Temporary range selection\n */\n@Component({\n  tag: 'revogr-temp-range',\n  styleUrl: 'revogr-temp-range-style.scss',\n})\nexport class RevogrFocus {\n  el: HTMLElement;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Dynamic stores\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Selection store, shows current selection and focus\n   */\n  @Prop() selectionStore: Observable<Selection.SelectionStoreState>;\n\n  /**\n   * Dimension row store\n   */\n  @Prop() dimensionRow: Observable<RevoGrid.DimensionSettingsState>;\n  /**\n   * Dimension column store\n   */\n  @Prop() dimensionCol: Observable<RevoGrid.DimensionSettingsState>;\n  private readonly onChange = throttle((e: HTMLElement) => this.doChange(e), 300);\n\n  private doChange(e: HTMLElement): void {\n    e?.scrollIntoView({\n      block: 'nearest',\n      inline: 'nearest',\n    });\n  }\n\n  componentDidRender(): void {\n    if (this.el) {\n      this.onChange(this.el);\n    }\n  }\n\n  render() {\n    const data = this.selectionStore.get('tempRange');\n    const type = this.selectionStore.get('tempRangeType');\n    if (!data) {\n      return;\n    }\n    let directionY = 'bottom';\n    let derectionX = 'right';\n    const range = this.getRange();\n    if (!range) {\n      return;\n    }\n    if (data.y < range.y) {\n      directionY = 'top';\n    }\n    if (data.x < range.x) {\n      derectionX = 'left';\n    }\n    const directionClass = `${derectionX} ${directionY}`;\n    const style = getElStyle(data, this.dimensionRow.state, this.dimensionCol.state);\n    return (\n      <Host\n        class={{\n          [TMP_SELECTION_BG_CLASS]: true,\n          [type || '']: true,\n        }}\n        style={style}\n        hidden={false}\n      >\n        <div class={directionClass} ref={(e: HTMLElement) => (this.el = e)} />\n      </Host>\n    );\n  }\n\n  private getRange(): Selection.RangeArea | null {\n    const range = this.selectionStore.get('range');\n    if (range) {\n      return range;\n    }\n    const focus = this.selectionStore.get('focus');\n    if (!focus) {\n      return null;\n    }\n    return {\n      ...focus,\n      x1: focus.x,\n      y1: focus.y,\n    };\n  }\n}\n"],"mappings":"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"}