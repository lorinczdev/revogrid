{"file":"revo-grid.entry.js","mappings":"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","names":["isArrayLike","baseIteratee","keys","createFind","findIndex","baseEach","isArray","arrayMap","baseMap","map","reduce","find","debounce","gt","isObjectLike","baseGetTag","baseProperty","rsAstralRange","rsComboMarksRange","reComboHalfMarksRange","rsComboSymbolsRange","rsComboRange","rsVarRange","rsZWJ","hasUnicode","unicodeSize","asciiSize","isString","stringSize","getTag","baseKeys","size","baseClamp","toInteger","toLength","isIterateeCall","baseFill","fill","each","columnDimensions","rowDimensions","AutoSize"],"sources":["src/themeManager/theme.compact.ts","src/themeManager/theme.default.ts","src/themeManager/theme.material.ts","src/themeManager/themeService.ts","node_modules/lodash/_createFind.js","node_modules/lodash/find.js","src/store/storeTypes.ts","node_modules/lodash/_baseMap.js","node_modules/lodash/map.js","src/plugins/basePlugin.ts","src/plugins/groupingColumn/grouping.col.plugin.ts","src/services/column.data.provider.ts","src/services/data.provider.ts","src/store/dimension/dimension.store.ts","src/services/dimension.provider.ts","src/services/viewport.provider.ts","src/plugins/autoSizeColumn.ts","src/plugins/filter/conditions/equal.ts","src/plugins/filter/conditions/number/greaterThan.ts","src/plugins/filter/conditions/number/greaterThanOrEqual.ts","src/plugins/filter/conditions/number/lessThan.ts","src/plugins/filter/conditions/number/lessThanOrEqual.ts","src/plugins/filter/conditions/set.ts","src/plugins/filter/conditions/string/beginswith.ts","src/plugins/filter/conditions/string/contains.ts","src/plugins/filter/filter.service.ts","src/plugins/filter/filter.plugin.tsx","node_modules/lodash/isString.js","node_modules/lodash/_asciiSize.js","node_modules/lodash/_hasUnicode.js","node_modules/lodash/_unicodeSize.js","node_modules/lodash/_stringSize.js","node_modules/lodash/size.js","src/plugins/sorting/sorting.plugin.ts","node_modules/lodash/_baseClamp.js","node_modules/lodash/toLength.js","node_modules/lodash/_baseFill.js","node_modules/lodash/fill.js","src/plugins/export/csv.ts","src/plugins/export/export.plugin.ts","src/plugins/groupingRow/grouping.row.expand.service.ts","src/plugins/groupingRow/grouping.trimmed.service.ts","src/plugins/groupingRow/grouping.row.plugin.ts","src/components/order/orderRenderer.tsx","src/components/revoGrid/viewport.tsx","src/components/revoGrid/viewport.service.ts","src/utils/mobile.ts","src/components/revoGrid/viewport.section.tsx","src/components/revoGrid/viewport.scrolling.service.ts","src/plugins/stretchPlugin.ts","src/components/revoGrid/grid.helpers.ts","src/plugins/moveColumn/columnOrderHandler.tsx","src/plugins/moveColumn/columnDragPlugin.ts","src/components/revoGrid/revo-grid-style.scss?tag=revo-grid","src/components/revoGrid/revo-grid.tsx"],"sourcesContent":["import { ThemeSpace } from '../interfaces';\n\nexport default class ThemeCompact implements ThemeSpace.ThemePackage {\n  defaultRowSize: number = 32;\n}\n","import { ThemeSpace } from '../interfaces';\n\nexport default class ThemeDefault implements ThemeSpace.ThemePackage {\n  defaultRowSize: number = 27;\n}\n","import { ThemeSpace } from '../interfaces';\n\nexport default class ThemeMaterial implements ThemeSpace.ThemePackage {\n  defaultRowSize: number = 42;\n}\n","import { ThemeSpace } from '../interfaces';\nimport ThemeCompact from './theme.compact';\nimport ThemeDefault from './theme.default';\nimport ThemeMaterial from './theme.material';\n\nexport const DEFAULT_THEME = 'default';\nexport const allowedThemes: ThemeSpace.Theme[] = [DEFAULT_THEME, 'material', 'compact', 'darkMaterial', 'darkCompact'];\nexport default class ThemeService {\n  private currentTheme: ThemeSpace.ThemePackage;\n  private customRowSize: number = 0;\n\n  get theme() {\n    return this.currentTheme;\n  }\n\n  get rowSize(): number {\n    return this.customRowSize || this.currentTheme.defaultRowSize;\n  }\n\n  set rowSize(size: number) {\n    this.customRowSize = size;\n  }\n\n  constructor(cfg: ThemeSpace.ThemeConfig) {\n    this.customRowSize = cfg.rowSize;\n    this.register('default');\n  }\n\n  register(theme: ThemeSpace.Theme) {\n    const parsedTheme = ThemeService.getTheme(theme);\n    switch (parsedTheme) {\n      case 'material':\n      case 'darkMaterial':\n        this.currentTheme = new ThemeMaterial();\n        break;\n      case 'compact':\n      case 'darkCompact':\n        this.currentTheme = new ThemeCompact();\n        break;\n      default:\n        this.currentTheme = new ThemeDefault();\n        break;\n    }\n  }\n\n  static getTheme(theme: string): ThemeSpace.Theme {\n    if (allowedThemes.indexOf(theme as ThemeSpace.Theme) > -1) {\n      return theme as ThemeSpace.Theme;\n    }\n    return DEFAULT_THEME;\n  }\n}\n","var baseIteratee = require('./_baseIteratee'),\n    isArrayLike = require('./isArrayLike'),\n    keys = require('./keys');\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nmodule.exports = createFind;\n","var createFind = require('./_createFind'),\n    findIndex = require('./findIndex');\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nmodule.exports = find;\n","import { RevoGrid } from '../interfaces';\n\nexport const rowTypes: RevoGrid.DimensionRows[] = ['rowPinStart', 'rgRow', 'rowPinEnd'];\nexport const columnTypes: RevoGrid.DimensionCols[] = ['colPinStart', 'rgCol', 'colPinEnd'];\n\nexport function isRowType(type: RevoGrid.DimensionRows | any): type is RevoGrid.DimensionRows {\n  return rowTypes.indexOf(type) > -1;\n}\n","var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nmodule.exports = map;\n","import { RevoPlugin, RevoGrid } from '../interfaces';\n\ntype DispatchDetail = RevoGrid.ColumnRegular | RevoGrid.ColumnTemplateProp;\ntype Target = HTMLElement | null;\ntype Event = {\n  target: HTMLElement | null;\n  preventDefault(): void;\n};\n\ntype WatchConfig = { immediate: boolean };\n\nexport function dispatchElement(target: Target, eventName: string, detail: DispatchDetail): CustomEvent {\n  const event = new CustomEvent(eventName, {\n    detail,\n    cancelable: true,\n    bubbles: true,\n  });\n  target?.dispatchEvent(event);\n  return event;\n}\nexport function dispatch(e: Event, eventName: string, detail: DispatchDetail): CustomEvent {\n  e.preventDefault();\n  return dispatchElement(e.target as Target, eventName, detail);\n}\n\n/**\n * Base layer for plugins\n * Provide minimal starting core\n */\nexport default abstract class BasePlugin implements RevoPlugin.Plugin {\n  protected readonly subscriptions: Record<string, (e?: any) => void> = {};\n  constructor(protected revogrid: HTMLRevoGridElement) {}\n  /**\n   *\n   * @param eventName - event name to subscribe to in revo-grid\n   * @param callback - callback function for event\n   */\n  protected addEventListener(eventName: string, callback: (e: CustomEvent) => void) {\n    this.revogrid.addEventListener(eventName, callback);\n    this.subscriptions[eventName] = callback;\n  }\n\n  /**\n   * Subscribe to grid properties to watch changes\n   * You can return false in callback to prevent default value set\n   * \n   * @param prop - property name\n   * @param callback - callback function\n   * @param immediate - trigger callback immediately with current value\n   */\n  protected watch<T extends any>(\n    prop: string,\n    callback: (arg: T) => boolean | void,\n    { immediate }: Partial<WatchConfig> = { immediate: false }\n  ) {\n    const nativeValueDesc =\n      Object.getOwnPropertyDescriptor(this.revogrid, prop) ||\n      Object.getOwnPropertyDescriptor(this.revogrid.constructor.prototype, prop);\n  \n    // Overwrite property descriptor for this instance\n    Object.defineProperty(this.revogrid, prop, {\n      set(val: T){\n        const keepDefault = callback(val);\n        if (keepDefault === false) {\n          return;\n        }\n        // Continue with native behavior\n        return nativeValueDesc?.set?.call(this, val);\n      },\n      get(){\n        // Continue with native behavior\n        return nativeValueDesc?.get?.call(this);\n      },\n    });\n    if (immediate) {\n      callback(nativeValueDesc?.value);\n    }\n  }\n\n  /**\n   * Remove event subscription\n   * @param eventName\n   */\n  protected removeEventListener(eventName: string) {\n    this.revogrid.removeEventListener(eventName, this.subscriptions[eventName]);\n    delete this.subscriptions[eventName];\n  }\n\n  /**\n   * Trigger event to grid upper level\n   * Event can be cancelled\n   * @param eventName\n   * @param detail\n   * @returns event\n   */\n  protected emit(eventName: string, detail?: any) {\n    const event = new CustomEvent(eventName, { detail, cancelable: true });\n    this.revogrid.dispatchEvent(event);\n    return event;\n  }\n\n  /**\n   * Clearing inner subscription\n   */\n  protected clearSubscriptions() {\n    for (let type in this.subscriptions) {\n      this.removeEventListener(type);\n    }\n  }\n\n  /**\n   * Minimal destroy implementations\n   */\n  destroy() {\n    this.clearSubscriptions();\n  }\n}\n","import isArray from 'lodash/isArray';\nimport map from 'lodash/map';\nimport { RevoGrid } from '../../interfaces';\nimport { ColumnCollection } from '../../services/column.data.provider';\nimport { ColumnItems } from '../../services/dimension.provider';\nimport { Group as StoreGroup } from '../../store/dataSource/data.store';\nimport BasePlugin from '../basePlugin';\ninterface Group extends StoreGroup {\n  level: number;\n}\nexport type ColumnGrouping = Record<RevoGrid.DimensionCols, Group[]>;\n\nexport default class GroupingColumnPlugin extends BasePlugin {\n  static gatherGroup<T extends ColumnCollection>(res: T, colData: RevoGrid.ColumnGrouping, collection: T, level = 0): T {\n    // group template\n    const group: Group = {\n      ...colData,\n      level,\n      ids: [],\n    };\n\n    // check columns for update\n    for (let k in collection.columns) {\n      const key = k as keyof ColumnItems;\n      const resultItem = res.columns[key];\n      const collectionItem = collection.columns[key];\n\n      // if column data\n      if (isArray(resultItem) && isArray(collectionItem)) {\n        // fill columns\n        resultItem.push(...collectionItem);\n\n        // fill grouping\n        if (collectionItem.length) {\n          res.columnGrouping[key].push({\n            ...group,\n            ids: map(collectionItem, 'prop'),\n          });\n        }\n      }\n    }\n    // merge column groupings\n    for (let k in collection.columnGrouping) {\n      const key = k as RevoGrid.DimensionCols;\n      const collectionItem = collection.columnGrouping[key];\n      res.columnGrouping[key].push(...collectionItem);\n    }\n    res.maxLevel = Math.max(res.maxLevel, collection.maxLevel);\n    res.sort = { ...res.sort, ...collection.sort };\n    return res;\n  }\n}\nexport function isColGrouping(colData: RevoGrid.ColumnGrouping | RevoGrid.ColumnRegular): colData is RevoGrid.ColumnGrouping {\n  return !!(colData as RevoGrid.ColumnGrouping).children;\n}\n","import reduce from 'lodash/reduce';\nimport each from 'lodash/each';\nimport find from 'lodash/find';\n\nimport DataStore, {\n  getSourceItem,\n  getSourceItemVirtualIndexByProp,\n  Groups,\n  setSourceByVirtualIndex,\n} from '../store/dataSource/data.store';\nimport { columnTypes } from '../store/storeTypes';\nimport { RevoGrid } from '../interfaces';\nimport GroupingColumnPlugin, {\n  ColumnGrouping,\n  isColGrouping,\n} from '../plugins/groupingColumn/grouping.col.plugin';\n\nexport type ColumnCollection = {\n  columns: Record<RevoGrid.DimensionCols, RevoGrid.ColumnRegular[]>;\n  columnByProp: Record<RevoGrid.ColumnProp, RevoGrid.ColumnRegular[]>;\n  columnGrouping: ColumnGrouping;\n  maxLevel: number;\n  sort: Record<RevoGrid.ColumnProp, RevoGrid.ColumnRegular>;\n};\n\nexport type ColumnDataSources = Record<\n  RevoGrid.DimensionCols,\n  DataStore<RevoGrid.ColumnRegular, RevoGrid.DimensionCols>\n>;\ntype Sorting = Record<RevoGrid.ColumnProp, RevoGrid.ColumnRegular>;\ntype SortingOrder = Record<RevoGrid.ColumnProp, 'asc' | 'desc'>;\n\nexport default class ColumnDataProvider {\n  readonly dataSources: ColumnDataSources;\n  sorting: Sorting | null = null;\n\n  get order() {\n    return reduce(\n      this.sorting,\n      (r: SortingOrder, c, prop) => {\n        r[prop] = c.order;\n        return r;\n      },\n      {},\n    );\n  }\n\n  get stores() {\n    return this.dataSources;\n  }\n  constructor() {\n    this.dataSources = reduce(\n      columnTypes,\n      (sources: Partial<ColumnDataSources>, k: RevoGrid.DimensionCols) => {\n        sources[k] = new DataStore(k);\n        return sources;\n      },\n      {},\n    ) as ColumnDataSources;\n  }\n\n  column(\n    c: number,\n    pin?: RevoGrid.DimensionColPin,\n  ): RevoGrid.ColumnRegular | undefined {\n    return this.getColumn(c, pin || 'rgCol');\n  }\n\n  getColumn(\n    virtualIndex: number,\n    type: RevoGrid.DimensionCols,\n  ): RevoGrid.ColumnRegular | undefined {\n    return getSourceItem(this.dataSources[type].store, virtualIndex);\n  }\n\n  getRawColumns() {\n    return reduce(\n      this.dataSources,\n      (\n        result: Record<RevoGrid.DimensionCols, RevoGrid.ColumnRegular[]>,\n        item,\n        type: RevoGrid.DimensionCols,\n      ) => {\n        result[type] = item.store.get('source');\n        return result;\n      },\n      {\n        rgCol: [],\n        colPinStart: [],\n        colPinEnd: [],\n      },\n    );\n  }\n\n  getColumns(type: RevoGrid.DimensionCols | 'all' = 'all') {\n    if (type !== 'all') {\n      return this.dataSources[type].store.get('source');\n    }\n    return columnTypes.reduce((r: RevoGrid.ColumnRegular[], t) => {\n      r.push(...this.dataSources[t].store.get('source'));\n      return r;\n    }, []);\n  }\n\n  getColumnIndexByProp(\n    prop: RevoGrid.ColumnProp,\n    type: RevoGrid.DimensionCols,\n  ): number {\n    return getSourceItemVirtualIndexByProp(this.dataSources[type].store, prop);\n  }\n\n  getColumnByProp(\n    prop: RevoGrid.ColumnProp,\n    type: RevoGrid.DimensionCols,\n  ): RevoGrid.ColumnRegular | undefined {\n    const items = this.dataSources[type].store.get('source');\n    return find(items, { prop });\n  }\n\n  refreshByType(type: RevoGrid.DimensionCols) {\n    this.dataSources[type].refresh();\n  }\n\n  setColumns(data: ColumnCollection): ColumnCollection {\n    columnTypes.forEach(k => {\n      // set columns data\n      this.dataSources[k].updateData(data.columns[k], {\n        // max depth level\n        depth: data.maxLevel,\n\n        // groups\n        groups: data.columnGrouping[k].reduce((res: Groups, g) => {\n            if (!res[g.level]) {\n              res[g.level] = [];\n            }\n            res[g.level].push(g);\n            return res;\n          },\n          {},\n        ),\n      });\n    });\n    this.sorting = data.sort;\n    return data;\n  }\n\n  updateColumns(cols: RevoGrid.ColumnRegular[]) {\n    // collect column by type and propert\n    const columnByKey: Partial<\n      Record<\n        RevoGrid.DimensionCols,\n        Record<RevoGrid.ColumnProp, RevoGrid.ColumnRegular>\n      >\n    > = cols.reduce(\n      (\n        res: Partial<\n          Record<\n            RevoGrid.DimensionCols,\n            Record<RevoGrid.ColumnProp, RevoGrid.ColumnRegular>\n          >\n        >,\n        c,\n      ) => {\n        const type = ColumnDataProvider.getColumnType(c);\n        if (!res[type]) {\n          res[type] = {};\n        }\n        res[type][c.prop] = c;\n        return res;\n      },\n      {},\n    );\n\n    // find indexes in source\n    const colByIndex: Partial<\n      Record<RevoGrid.DimensionCols, Record<number, RevoGrid.ColumnRegular>>\n    > = {};\n    each(columnByKey, (colsToUpdate, type: RevoGrid.DimensionCols) => {\n      const items = this.dataSources[type].store.get('source');\n      colByIndex[type] = items.reduce(\n        (result: Record<number, RevoGrid.ColumnRegular>, rgCol, index) => {\n          const colToUpdateIfExists = colsToUpdate[rgCol.prop];\n          if (colToUpdateIfExists) {\n            result[index] = colToUpdateIfExists;\n          }\n          return result;\n        },\n        {},\n      );\n    });\n    each(colByIndex, (colsToUpdate, type: RevoGrid.DimensionCols) =>\n      setSourceByVirtualIndex(this.dataSources[type].store, colsToUpdate),\n    );\n  }\n\n  updateColumn(column: RevoGrid.ColumnRegular, index: number) {\n    const type = ColumnDataProvider.getColumnType(column);\n    setSourceByVirtualIndex(this.dataSources[type].store, { [index]: column });\n  }\n\n  updateColumnSorting(\n    column: RevoGrid.ColumnRegular,\n    index: number,\n    sorting: 'asc' | 'desc',\n    additive: boolean,\n  ): RevoGrid.ColumnRegular {\n    if (!additive) {\n      this.clearSorting();\n    }\n    column.order = sorting;\n    this.sorting[column.prop] = column;\n    this.updateColumn(column, index);\n    return column;\n  }\n\n  clearSorting(): void {\n    const types = reduce(\n      this.sorting,\n      (\n        r: { [key in Partial<RevoGrid.DimensionCols>]: boolean },\n        c: RevoGrid.ColumnRegular,\n      ) => {\n        const k = ColumnDataProvider.getColumnType(c);\n        r[k] = true;\n        return r;\n      },\n      {} as { [key in Partial<RevoGrid.DimensionCols>]: boolean },\n    );\n    each(types, (_, type: RevoGrid.DimensionCols) => {\n      const cols = this.dataSources[type].store.get('source');\n      each(cols, (c: RevoGrid.ColumnRegular) => (c.order = undefined));\n      this.dataSources[type].setData({ source: [...cols] });\n    });\n\n    this.sorting = {};\n  }\n\n  static getSizes(\n    cols: RevoGrid.ColumnRegular[],\n  ): RevoGrid.ViewSettingSizeProp {\n    return reduce(\n      cols,\n      (\n        res: RevoGrid.ViewSettingSizeProp,\n        c: RevoGrid.ColumnRegular,\n        i: number,\n      ) => {\n        if (c.size) {\n          res[i] = c.size;\n        }\n        return res;\n      },\n      {},\n    );\n  }\n\n  static getColumnByProp(\n    columns: RevoGrid.ColumnData,\n    prop: RevoGrid.ColumnProp,\n  ): RevoGrid.ColumnRegular | undefined {\n    return find(columns, c => {\n      if (isColGrouping(c)) {\n        return ColumnDataProvider.getColumnByProp(c.children, prop);\n      }\n      return c.prop === prop;\n    }) as RevoGrid.ColumnRegular | undefined;\n  }\n\n  // columns processing\n  static getColumns(\n    columns: RevoGrid.ColumnData,\n    level = 0,\n    types?: RevoGrid.ColumnTypes,\n  ): ColumnCollection {\n    const collection: ColumnCollection = {\n      // columns as they are in stores per type\n      columns: {\n        rgCol: [],\n        colPinStart: [],\n        colPinEnd: [],\n      },\n      // columns grouped by prop for quick access\n      columnByProp: {},\n      // column grouping\n      columnGrouping: {\n        rgCol: [],\n        colPinStart: [],\n        colPinEnd: [],\n      },\n      // max depth level for column grouping\n      maxLevel: level,\n      // sorting\n      sort: {},\n    };\n\n    return reduce(\n      columns,\n      (res: ColumnCollection, colData: RevoGrid.ColumnDataSchema) => {\n        // Grouped column\n        if (isColGrouping(colData)) {\n          return GroupingColumnPlugin.gatherGroup(\n            res,\n            colData,\n            ColumnDataProvider.getColumns(colData.children, level + 1, types),\n            level,\n          );\n        }\n        // Regular column\n        const regularColumn = {\n          ...(colData.columnType && types && types[colData.columnType]),\n          ...colData,\n        };\n        // Regular column, no Pin\n        if (!regularColumn.pin) {\n          res.columns.rgCol.push(regularColumn);\n          // Pin\n        } else {\n          res.columns[regularColumn.pin].push(regularColumn);\n        }\n        if (regularColumn.order) {\n          res.sort[regularColumn.prop] = regularColumn;\n        }\n        // technically it's possible that some columns have same prop, but better to avoid it\n        if (!res.columnByProp[regularColumn.prop]) {\n          res.columnByProp[regularColumn.prop] = [];\n        }\n        res.columnByProp[regularColumn.prop].push(regularColumn);\n\n        // trigger setup hook if present\n        regularColumn.beforeSetup && regularColumn.beforeSetup(regularColumn);\n        return res;\n      },\n      collection,\n    );\n  }\n\n  static getColumnType(rgCol: RevoGrid.ColumnRegular): RevoGrid.DimensionCols {\n    if (rgCol.pin) {\n      return rgCol.pin;\n    }\n    return 'rgCol';\n  }\n}\n","import reduce from 'lodash/reduce';\n\nimport DataStore, { getSourceItem, getVisibleSourceItem, Groups, setSourceByVirtualIndex } from '../store/dataSource/data.store';\nimport { isRowType, rowTypes } from '../store/storeTypes';\nimport DimensionProvider from './dimension.provider';\nimport { RevoGrid, Edition } from '../interfaces';\nimport { Trimmed } from '../store/dataSource/trimmed.plugin';\nimport { GroupLabelTemplateFunc } from '../plugins/groupingRow/grouping.row.types';\n\nexport type RowDataSources = { [T in RevoGrid.DimensionRows]: DataStore<RevoGrid.DataType, RevoGrid.DimensionRows> };\n\nexport class DataProvider {\n  public readonly stores: RowDataSources;\n  constructor(private dimensionProvider: DimensionProvider) {\n    this.stores = reduce(\n      rowTypes,\n      (sources: Partial<RowDataSources>, k: RevoGrid.DimensionRows) => {\n        sources[k] = new DataStore(k);\n        return sources;\n      },\n      {},\n    ) as RowDataSources;\n  }\n\n  setData(\n    data: RevoGrid.DataType[],\n    type: RevoGrid.DimensionRows = 'rgRow',\n    grouping?: { depth: number; groups?: Groups, customRenderer?: GroupLabelTemplateFunc },\n    silent = false,\n  ): RevoGrid.DataType[] {\n    // set rgRow data\n    this.stores[type].updateData([...data], grouping, silent);\n    this.dimensionProvider.setData(data.length, type, type !== 'rgRow');\n    return data;\n  }\n\n  getModel(virtualIndex: number, type: RevoGrid.DimensionRows = 'rgRow') {\n    const store = this.stores[type].store;\n    return getSourceItem(store, virtualIndex);\n  }\n\n  setCellData({ type, rowIndex, prop, val }: Edition.BeforeSaveDataDetails) {\n    const model = this.getModel(rowIndex, type);\n    model[prop] = val;\n    setSourceByVirtualIndex(this.stores[type].store, { [rowIndex]: model });\n  }\n\n  refresh(type: RevoGrid.DimensionRows | 'all' = 'all') {\n    if (isRowType(type)) {\n      this.refreshItems(type);\n    }\n    rowTypes.forEach((t: RevoGrid.DimensionRows) => this.refreshItems(t));\n  }\n\n  refreshItems(type: RevoGrid.DimensionRows = 'rgRow') {\n    const items = this.stores[type].store.get('items');\n    this.stores[type].setData({ items: [...items] });\n  }\n\n  setGrouping({ depth }: { depth: number }, type: RevoGrid.DimensionRows = 'rgRow') {\n    this.stores[type].setData({ groupingDepth: depth });\n  }\n\n  setTrimmed(trimmed: Partial<Trimmed>, type: RevoGrid.DimensionRows = 'rgRow') {\n    const store = this.stores[type];\n    store.addTrimmed(trimmed);\n    this.dimensionProvider.setTrimmed(trimmed, type);\n    if (type === 'rgRow') {\n      this.dimensionProvider.setData(getVisibleSourceItem(store.store).length, type);\n    }\n  }\n}\n","/**\n * Storing pre-calculated\n * Dimension information and sizes\n */\n\nimport { createStore } from '@stencil/store';\nimport reduce from 'lodash/reduce';\n\nimport { setStore } from '../../utils/store.utils';\nimport { calculateDimensionData } from './dimension.helpers';\nimport { Observable, PluginSubscribe, RevoGrid } from '../../interfaces';\nimport each from 'lodash/each';\n\ntype Item = keyof RevoGrid.DimensionSettingsState;\n\nconst trimmedPlugin = (store: DimensionStore): PluginSubscribe<RevoGrid.DimensionSettingsState> => {\n  let trimmedSize: RevoGrid.DimensionSettingsState['sizes'] = {};\n\n  const setTrimmed = (sizes: RevoGrid.DimensionSettingsState['sizes'], trimmed: RevoGrid.DimensionSettingsState['trimmed']) => {\n    const newSize = { ...sizes };\n    trimmedSize = {};\n    each(trimmed, (v, index) => {\n      if (v && newSize[index]) {\n        trimmedSize[index] = newSize[index];\n        delete newSize[index];\n      }\n    });\n    store.setDimensionSize(newSize);\n  };\n  return {\n    set(key, val) {\n      switch (key) {\n        case 'trimmed':\n          const trim = val as RevoGrid.DimensionSettingsState['trimmed'];\n          const sizes = store.store.get('sizes');\n          // recover trimmed, apply new trim\n          setTrimmed({ ...sizes, ...trimmedSize }, trim);\n          break;\n      }\n    }\n  }\n};\n\nconst realSizePlugin = (store: DimensionStore): PluginSubscribe<RevoGrid.DimensionSettingsState> => {\n  return {\n    set(k) {\n      switch (k) {\n        case 'count':\n        case 'sizes':\n        case 'originItemSize':\n          let realSize = 0;\n          const count = store.store.get('count');\n          for (let i = 0; i < count; i++) {\n            realSize += store.store.get('sizes')[i] || store.store.get('originItemSize');\n          }\n          store.setStore({ realSize });\n      }\n    }\n  };\n};\n\nfunction initialBase(): RevoGrid.DimensionCalc {\n  return {\n    indexes: [],\n    count: 0,\n\n    // plugin support\n    trimmed: {},\n\n\n    // size operations, this provider stores only changed sizes, not all of them\n    // same as indexes but for sizes and positions\n    // item index to size\n    sizes: {},\n    // order in indexes[] to coordinate\n    positionIndexToItem: {},\n    // initial element to coordinate ^\n    indexToItem: {},\n    positionIndexes: [],\n  };\n}\n\nfunction initialState(): RevoGrid.DimensionSettingsState {\n  return {\n    ...initialBase(),\n    // size which all items can take\n    realSize: 0,\n\n    // initial item size if it wasn't changed\n    originItemSize: 0,\n  };\n}\n\nexport default class DimensionStore {\n  readonly store: Observable<RevoGrid.DimensionSettingsState>;\n  constructor() {\n    this.store = createStore(initialState());\n    this.store.use(trimmedPlugin(this));\n    this.store.use(realSizePlugin(this));\n  }\n\n  getCurrentState(): RevoGrid.DimensionSettingsState {\n    const state = initialState();\n    const keys = Object.keys(state);\n    return reduce(\n      keys,\n      (r: RevoGrid.DimensionSettingsState, k: Item) => {\n        const data = this.store.get(k);\n        r[k] = data as never;\n        return r;\n      },\n      state,\n    );\n  }\n\n  dispose() {\n    setStore(this.store, initialState());\n  }\n\n  setStore<T extends Record<string, any>>(data: Partial<T>) {\n    setStore(this.store, data);\n  }\n\n  drop() {\n    setStore(this.store, initialBase());\n  }\n\n  /**\n   * Set custom dimension sizes and overwrite old\n   * Generates new indexes based on sizes\n   * @param sizes - sizes to set\n   */\n  setDimensionSize(sizes: RevoGrid.ViewSettingSizeProp) {\n    const dimensionData = calculateDimensionData(this.store.get('originItemSize'), sizes);\n    setStore(this.store, dimensionData);\n    return dimensionData;\n  }\n}\n","import reduce from 'lodash/reduce';\nimport { debounce } from 'lodash';\nimport { columnTypes, rowTypes } from '../store/storeTypes';\nimport DimensionStore from '../store/dimension/dimension.store';\nimport ViewportProvider from './viewport.provider';\nimport { RevoGrid } from '../interfaces';\nimport { getItemByIndex } from '../store/dimension/dimension.helpers';\nimport { gatherTrimmedItems, Trimmed } from '../store/dataSource/trimmed.plugin';\nimport { RESIZE_INTERVAL } from '../utils/consts';\n\nexport type ColumnItems = Record<RevoGrid.DimensionCols, RevoGrid.ColumnRegular[]>;\n\nexport type DimensionStores = { [T in RevoGrid.MultiDimensionType]: DimensionStore };\nexport type DimensionConfig = {\n  realSizeChanged(k: RevoGrid.MultiDimensionType): void;\n};\n/**\n * Dimension provider\n * Stores dimension information and custom sizes\n */\nexport default class DimensionProvider {\n  readonly stores: DimensionStores;\n  constructor(private viewports: ViewportProvider, config: DimensionConfig) {\n    const sizeChanged = debounce((k: RevoGrid.MultiDimensionType) => config.realSizeChanged(k), RESIZE_INTERVAL);\n    this.stores = reduce(\n      [...rowTypes, ...columnTypes],\n      (sources: Partial<DimensionStores>, k: RevoGrid.MultiDimensionType) => {\n        sources[k] = new DimensionStore();\n        sources[k].store.onChange('realSize', () => sizeChanged(k));\n        return sources;\n      },\n      {},\n    ) as DimensionStores;\n  }\n  \n  /**\n   * Clear old sizes from dimension and viewports\n   * @param type - dimension type\n   * @param count - count of items\n   */\n  clearSize(t: RevoGrid.MultiDimensionType, count: number) {\n    this.stores[t].drop();\n    // after we done with drop trigger viewport recalculaction\n    this.viewports.stores[t].setOriginalSizes(this.stores[t].store.get('originItemSize'));\n    this.setItemCount(count, t);\n  }\n\n  /**\n   * Apply new custom sizes to dimension and view port\n   * @param type - dimension type\n   * @param sizes - new custom sizes\n   * @param keepOld - keep old sizes merge new with old\n   */\n  setCustomSizes(type: RevoGrid.MultiDimensionType, sizes: RevoGrid.ViewSettingSizeProp, keepOld = false) {\n    let newSizes = sizes;\n    if (keepOld) {\n      const oldSizes = this.stores[type].store.get('sizes');\n      newSizes = {\n        ...oldSizes,\n        ...sizes,\n      };\n    }\n    this.stores[type].setDimensionSize(newSizes);\n    this.viewports.stores[type].setViewPortDimensionSizes(\n      newSizes,\n      !keepOld ? this.stores[type].store.get('originItemSize') : undefined\n    );\n  }\n\n  setItemCount(realCount: number, type: RevoGrid.MultiDimensionType) {\n    this.viewports.stores[type].setViewport({ realCount });\n    this.stores[type].setStore({ count: realCount });\n  }\n\n  /**\n   * Apply trimmed items\n   * @param trimmed - trimmed items\n   * @param type \n   */\n  setTrimmed(trimmed: Partial<Trimmed>, type: RevoGrid.MultiDimensionType) {\n    const allTrimmed = gatherTrimmedItems(trimmed);\n    const dimStoreType = this.stores[type];\n    dimStoreType.setStore({ trimmed: allTrimmed });\n    this.viewports.stores[type].setViewPortDimensionSizes(dimStoreType.store.get('sizes'));\n  }\n\n  /**\n   * Sets dimension data and view port coordinate\n   * @param items - data/column items\n   * @param type - dimension type\n   */\n  setData(\n    itemCount: number,\n    type: RevoGrid.MultiDimensionType,\n    noVirtual = false\n  ) {\n    this.setItemCount(itemCount, type);\n    if (noVirtual) {\n      this.setNoVirtual(type);\n    }\n    this.updateViewport(type);\n  }\n  /**\n   * Virtualization will get disabled\n   * @param type - dimension type\n   */\n\n  private setNoVirtual(type: RevoGrid.MultiDimensionType) {\n    const dimension: RevoGrid.DimensionSettingsState = this.stores[type].getCurrentState();\n    this.viewports.stores[type].setViewport({ virtualSize: dimension.realSize });\n  }\n\n  /**\n   * Drop all dimension data\n   */\n  dropColumns(types: RevoGrid.MultiDimensionType[] = columnTypes) {\n    for (let type of types) {\n      this.stores[type].drop();\n      this.viewports.stores[type].clearItems(); // check if needed\n    }\n  }\n\n  getFullSize(): { x: number; y: number } {\n    let x = 0;\n    let y = 0;\n    for (let type of columnTypes) {\n      x += this.stores[type]?.store.get('realSize') || 0;\n    }\n    for (let type of rowTypes) {\n      y += this.stores[type]?.store.get('realSize') || 0;\n    }\n    return { y, x };\n  }\n\n  setNewColumns(\n    type: RevoGrid.MultiDimensionType,\n    newLength: number,\n    sizes?: RevoGrid.ViewSettingSizeProp,\n    noVirtual = false\n  ) {\n    this.setItemCount(newLength, type);\n    this.setCustomSizes(type, sizes);\n\n    if (noVirtual) {\n      this.setNoVirtual(type);\n    }\n    this.updateViewport(type);\n  }\n  \n  updateViewport(type: RevoGrid.MultiDimensionType) {\n    this.setViewPortCoordinate({\n      coordinate: this.viewports.stores[type].lastCoordinate,\n      type,\n    });\n  }\n\n  setViewPortCoordinate({ coordinate, type }: { coordinate: number; type: RevoGrid.MultiDimensionType }) {\n    const dimension = this.stores[type].getCurrentState();\n    this.viewports.stores[type].setViewPortCoordinate(coordinate, dimension);\n  }\n\n  getViewPortPos(e: RevoGrid.ViewPortScrollEvent): number {\n    const dimension: RevoGrid.DimensionSettingsState = this.stores[e.dimension].getCurrentState();\n    const item = getItemByIndex(dimension, e.coordinate);\n\n    return item.start;\n  }\n\n  setSettings(data: Partial<RevoGrid.DimensionSettingsState>, dimensionType: RevoGrid.DimensionType) {\n    let stores: RevoGrid.MultiDimensionType[] = [];\n    switch (dimensionType) {\n      case 'rgCol':\n        stores = columnTypes;\n        break;\n      case 'rgRow':\n        stores = rowTypes;\n        break;\n    }\n    for (let s of stores) {\n      this.stores[s].setStore(data);\n    }\n  }\n}\n","import reduce from 'lodash/reduce';\nimport { columnTypes, rowTypes } from '../store/storeTypes';\nimport ViewportStore from '../store/viewPort/viewport.store';\nimport { RevoGrid } from '../interfaces';\n\nexport type ViewportStores = { [T in RevoGrid.MultiDimensionType]: ViewportStore };\nexport default class ViewportProvider {\n  readonly stores: ViewportStores;\n  constructor() {\n    this.stores = reduce(\n      [...rowTypes, ...columnTypes],\n      (sources: Partial<ViewportStores>, k: RevoGrid.MultiDimensionType) => {\n        sources[k] = new ViewportStore(k);\n        return sources;\n      },\n      {},\n    ) as ViewportStores;\n  }\n\n  setViewport(type: RevoGrid.MultiDimensionType, data: Partial<RevoGrid.ViewportState>): void {\n    this.stores[type].setViewport(data);\n  }\n}\n","/**\n * Plugin module for revo-grid grid system\n * Add support for automatic column resize\n */\nimport each from 'lodash/each';\nimport reduce from 'lodash/reduce';\nimport BasePlugin from './basePlugin';\nimport { RevoGrid, Edition } from '../interfaces';\nimport ColumnDataProvider, { ColumnCollection } from '../services/column.data.provider';\nimport { DataProvider } from '../services/data.provider';\nimport { columnTypes } from '../store/storeTypes';\nimport DimensionProvider, { ColumnItems } from '../services/dimension.provider';\nimport { getSourceItem } from '../store/dataSource/data.store';\n\ninterface Column extends RevoGrid.ColumnRegular {\n  index: number;\n}\n\ntype AutoSizeColumns = Record<RevoGrid.DimensionCols, ColumnRecords>;\ntype ColumnRecords = Record<any, Column>;\ntype SourceSetEvent = { type: RevoGrid.DimensionRows; source: RevoGrid.DataType[] };\ntype EditEvent = Edition.BeforeSaveDataDetails | Edition.BeforeRangeSaveDataDetails;\ntype Resolve = (cols: Partial<AutoSizeColumns>) => void;\ntype Reject = () => void;\n\nexport type AutoSizeColumnConfig = {\n  // ui behavior mode\n  mode?: ColumnAutoSizeMode;\n  /**\n   * autoSize for all columns\n   * if allColumnes true all columns treated as autoSize, worse for performance\n   * false by default\n   */\n  allColumns?: boolean;\n  /**\n   * assumption per characted size\n   * by default defined as 8, can be changed in this config\n   */\n  letterBlockSize?: number;\n  /** make size calculation exact\n   * by default it based on assumption each character takes some space defined in letterBlockSize */\n  preciseSize?: boolean;\n};\n\ntype Providers = {\n  dataProvider: DataProvider;\n  dimensionProvider: DimensionProvider;\n  columnProvider: ColumnDataProvider;\n};\n\nconst LETTER_BLOCK_SIZE = 7;\n\nenum ColumnAutoSizeMode {\n  // increases column width on header click according the largest text value\n  headerClickAutosize = 'headerClickAutoSize',\n  // increases column width on data set and text edit, decreases performance\n  autoSizeOnTextOverlap = 'autoSizeOnTextOverlap',\n  // increases and decreases column width based on all items sizes, worst for performance\n  autoSizeAll = 'autoSizeAll',\n}\n\nexport default class AutoSizeColumn extends BasePlugin {\n  private autoSizeColumns: Partial<AutoSizeColumns> | null = null;\n  private readonly letterBlockSize: number;\n\n  /** for config option when @preciseSize enabled */\n  private readonly precsizeCalculationArea: HTMLElement;\n\n  /** for edge case when no columns defined before data */\n  private dataResolve: Resolve | null = null;\n  private dataReject: Reject | null = null;\n\n  constructor(revogrid: HTMLRevoGridElement, protected providers: Providers, private config?: AutoSizeColumnConfig) {\n    super(revogrid);\n    this.letterBlockSize = config?.letterBlockSize || LETTER_BLOCK_SIZE;\n\n    // create test container to check text width\n    if (config?.preciseSize) {\n      this.precsizeCalculationArea = this.initiatePresizeElement();\n      revogrid.appendChild(this.precsizeCalculationArea);\n    }\n\n    const aftersourceset = ({ detail: { source } }: CustomEvent<SourceSetEvent>) => {\n      this.setSource(source);\n    };\n    const afteredit = ({ detail }: CustomEvent<EditEvent>) => {\n      this.afteredit(detail);\n    };\n    const afterEditAll = ({ detail }: CustomEvent<EditEvent>) => {\n      this.afterEditAll(detail);\n    };\n    const beforecolumnsset = ({ detail: { columns } }: CustomEvent<ColumnCollection>) => {\n      this.columnSet(columns);\n    };\n    const headerDblClick = ({ detail }: CustomEvent<RevoGrid.InitialHeaderClick>) => {\n      const type = ColumnDataProvider.getColumnType(detail.column);\n      const size = this.getColumnSize(detail.index, type);\n      if (size) {\n        this.providers.dimensionProvider.setCustomSizes(type, {\n          [detail.index]: size,\n        }, true);\n      }\n    };\n    this.addEventListener('beforecolumnsset', beforecolumnsset);\n    switch (config?.mode) {\n      case ColumnAutoSizeMode.autoSizeOnTextOverlap:\n        this.addEventListener('aftersourceset', aftersourceset);\n        this.addEventListener('afteredit', afteredit);\n        break;\n      case ColumnAutoSizeMode.autoSizeAll:\n        this.addEventListener('aftersourceset', aftersourceset);\n        this.addEventListener('afteredit', afterEditAll);\n        break;\n      default:\n        this.addEventListener('headerdblClick', headerDblClick);\n        break;\n    }\n  }\n\n  private async setSource(source: RevoGrid.DataType[]): Promise<void> {\n    let autoSize = this.autoSizeColumns;\n    if (this.dataReject) {\n      this.dataReject();\n      this.clearPromise();\n    }\n\n    /** If data set first and no column provided await until get one */\n    if (!autoSize) {\n      const request = new Promise((resolve: Resolve, reject: Reject) => {\n        this.dataResolve = resolve;\n        this.dataReject = reject;\n      });\n      try {\n        autoSize = await request;\n      } catch (e) {\n        return;\n      }\n    }\n\n    // calculate sizes\n    each(autoSize, (_v, type: RevoGrid.DimensionCols) => {\n      const sizes: RevoGrid.ViewSettingSizeProp = {};\n      each(autoSize[type], rgCol => {\n        // calculate size\n        rgCol.size = sizes[rgCol.index] = source.reduce((prev, rgRow) => Math.max(prev, this.getLength(rgRow[rgCol.prop])), this.getLength(rgCol.name || ''));\n      });\n      this.providers.dimensionProvider.setCustomSizes(type, sizes, true);\n    });\n  }\n\n  private getLength(len?: any): number {\n    const padding = 15;\n    if (!len) {\n      return 0;\n    }\n    try {\n      const str = len.toString();\n\n      /**if exact calculation required proxy with html element, slow operation */\n      if (this.config?.preciseSize) {\n        this.precsizeCalculationArea.innerText = str;\n        return this.precsizeCalculationArea.scrollWidth + padding * 2;\n      }\n      return str.length * this.letterBlockSize + padding * 2;\n    } catch (e) {\n      return 0;\n    }\n  }\n\n  private afteredit(e: EditEvent): void {\n    let data: Record<string, RevoGrid.DataType>;\n    if (this.isRangeEdit(e)) {\n      data = e.data;\n    } else {\n      data = { 0: { [e.prop]: e.val } };\n    }\n    each(this.autoSizeColumns, (columns, type: RevoGrid.DimensionCols) => {\n      const sizes: RevoGrid.ViewSettingSizeProp = {};\n\n      each(columns, rgCol => {\n        // calculate size\n        const size = reduce(\n          data,\n          (prev: number | undefined, rgRow) => {\n            if (typeof rgRow[rgCol.prop] === 'undefined') {\n              return prev;\n            }\n            return Math.max(prev || 0, this.getLength(rgRow[rgCol.prop]));\n          },\n          undefined,\n        );\n\n        if (size && rgCol.size < size) {\n          rgCol.size = sizes[rgCol.index] = size;\n        }\n      });\n\n      this.providers.dimensionProvider.setCustomSizes(type, sizes, true);\n    });\n  }\n\n  private afterEditAll(e: EditEvent): void {\n    const props: Record<any, true> = {};\n    if (this.isRangeEdit(e)) {\n      each(e.data, r => each(r, (_v, p) => (props[p] = true)));\n    } else {\n      props[e.prop] = true;\n    }\n    each(this.autoSizeColumns, (columns, type: RevoGrid.DimensionCols) => {\n      const sizes: RevoGrid.ViewSettingSizeProp = {};\n\n      each(columns, rgCol => {\n        if (props[rgCol.prop]) {\n          const size = this.getColumnSize(rgCol.index, type);\n          if (size) {\n            sizes[rgCol.index] = size;\n          }\n        }\n      });\n      this.providers.dimensionProvider.setCustomSizes(type, sizes, true);\n    });\n  }\n\n  private getColumnSize(index: number, type: RevoGrid.DimensionCols): number {\n    const rgCol = this.autoSizeColumns[type][index];\n    if (!rgCol) {\n      return 0;\n    }\n    return reduce(\n      this.providers.dataProvider.stores,\n      (r, s) => {\n        const perStore = reduce(\n          s.store.get('items'),\n          (prev, _row, i) => {\n            const item = getSourceItem(s.store, i);\n            return Math.max(prev || 0, this.getLength(item[rgCol.prop]));\n          },\n          0,\n        );\n        return Math.max(r, perStore);\n      },\n      rgCol.size || 0,\n    );\n  }\n\n  private columnSet(columns: ColumnItems): void {\n    for (let t of columnTypes) {\n      const type = t as RevoGrid.DimensionCols;\n      const cols = columns[type];\n\n      for (let i in cols) {\n        if (cols[i].autoSize || this.config?.allColumns) {\n          if (!this.autoSizeColumns) {\n            this.autoSizeColumns = {};\n          }\n          if (!this.autoSizeColumns[type]) {\n            this.autoSizeColumns[type] = {};\n          }\n          this.autoSizeColumns[type][i] = {\n            ...cols[i],\n            index: parseInt(i, 10),\n          };\n        }\n      }\n    }\n\n    if (this.dataResolve) {\n      this.dataResolve(this.autoSizeColumns);\n      this.clearPromise();\n    }\n  }\n\n  private clearPromise() {\n    this.dataResolve = null;\n    this.dataReject = null;\n  }\n\n  private isRangeEdit(e: EditEvent): e is Edition.BeforeRangeSaveDataDetails {\n    return !!(e as Edition.BeforeRangeSaveDataDetails).data;\n  }\n\n  private initiatePresizeElement(): HTMLElement {\n    const styleForFontTest: Partial<CSSStyleDeclaration> = {\n      position: 'absolute',\n      fontSize: '14px',\n      height: '0',\n      width: '0',\n      whiteSpace: 'nowrap',\n      top: '0',\n      overflowX: 'scroll',\n    };\n\n    const el = document.createElement('div');\n    for (let s in styleForFontTest) {\n      el.style[s] = styleForFontTest[s];\n    }\n    el.classList.add('revo-test-container');\n    return el;\n  }\n\n  destroy() {\n    super.destroy();\n    this.precsizeCalculationArea?.remove();\n  }\n}\n","import { LogicFunction, LogicFunctionExtraParam, LogicFunctionParam, ExtraField } from '../filter.types';\n\nconst eq: LogicFunction = (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) => {\n  if (typeof value === 'undefined' || (value === null && !extra)) {\n    return true;\n  }\n  if (typeof value !== 'string') {\n    value = JSON.stringify(value);\n  }\n\n  const filterVal = extra.toString().toLocaleLowerCase();\n  if (filterVal.length === 0) {\n    return true;\n  }\n  \n  return value.toLocaleLowerCase() === filterVal;\n};\n\nexport const notEq: LogicFunction = (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) => !eq(value, extra);\nnotEq.extra = 'input' as ExtraField;\neq.extra = 'input' as ExtraField;\nexport default eq;\n","import { LogicFunction, LogicFunctionExtraParam, LogicFunctionParam } from '../../filter.types';\n\nconst gtThan: LogicFunction = function (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) {\n  let conditionValue: number;\n\n  if (typeof value === 'number') {\n    conditionValue = parseFloat(extra?.toString());\n    return value > conditionValue;\n  }\n  return false;\n};\n\ngtThan.extra = 'input';\nexport default gtThan;\n","import { LogicFunction, LogicFunctionExtraParam, LogicFunctionParam } from '../../filter.types';\nimport eq from '../equal';\nimport gt from './greaterThan';\n\nconst gtThanEq: LogicFunction = function (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) {\n  return eq(value, extra) || gt(value, extra);\n};\n\ngtThanEq.extra = 'input';\nexport default gtThanEq;\n","import { LogicFunction, LogicFunctionExtraParam, LogicFunctionParam } from '../../filter.types';\n\nconst lt: LogicFunction = function (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) {\n  let conditionValue: number;\n  if (typeof value === 'number') {\n    conditionValue = parseFloat(extra?.toString());\n    return value < conditionValue;\n  } else {\n    return false;\n  }\n};\n\nlt.extra = 'input';\nexport default lt;\n","import { LogicFunction, LogicFunctionExtraParam, LogicFunctionParam } from '../../filter.types';\nimport eq from '../equal';\nimport lt from './lessThan';\n\nconst lsEq: LogicFunction = function (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) {\n  return eq(value, extra) || lt(value, extra);\n};\n\nlsEq.extra = 'input';\nexport default lsEq;\n","import { LogicFunction, LogicFunctionParam } from '../filter.types';\n\nconst set: LogicFunction = (value: LogicFunctionParam) => !(value === '' || value === null || value === void 0);\nexport const notSet: LogicFunction = (value: LogicFunctionParam) => !set(value);\nexport default set;\n","import { LogicFunction, LogicFunctionExtraParam, LogicFunctionParam } from '../../filter.types';\n\nconst beginsWith: LogicFunction = (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) => {\n  if (!value) {\n    return false;\n  }\n  if (!extra) {\n    return true;\n  }\n  if (typeof value !== 'string') {\n    value = JSON.stringify(value);\n  }\n  if (typeof extra !== 'string') {\n    extra = JSON.stringify(extra);\n  }\n  return value.toLocaleLowerCase().indexOf(extra.toLocaleLowerCase()) === 0;\n};\n\nbeginsWith.extra = 'input';\nexport default beginsWith;\n","import { LogicFunction, LogicFunctionExtraParam, LogicFunctionParam } from '../../filter.types';\n\nconst contains: LogicFunction = (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) => {\n  if (!extra) {\n    return true;\n  }\n  if (!value) {\n    return false;\n  }\n  if (extra) {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    return value.toLocaleLowerCase().indexOf(extra.toString().toLowerCase()) > -1;\n  }\n  return true;\n};\n\nexport const notContains: LogicFunction = (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) => {\n  return !contains(value, extra);\n};\nnotContains.extra = 'input';\ncontains.extra = 'input';\nexport default contains;\n","import eq, { notEq } from './conditions/equal';\nimport gtThan from './conditions/number/greaterThan';\nimport gtThanEq from './conditions/number/greaterThanOrEqual';\nimport lt from './conditions/number/lessThan';\nimport lsEq from './conditions/number/lessThanOrEqual';\nimport set, { notSet } from './conditions/set';\nimport beginsWith from './conditions/string/beginswith';\nimport contains, { notContains } from './conditions/string/contains';\nimport { LogicFunction } from './filter.types';\n\nexport const filterNames = {\n  none: 'None',\n  empty: 'Not set',\n  notEmpty: 'Set',\n\n  eq: 'Equal',\n  notEq: 'Not equal',\n  begins: 'Begins with',\n  contains: 'Contains',\n  notContains: 'Does not contain',\n\n  eqN: '=',\n  neqN: '!=',\n  gt: '>',\n  gte: '>=',\n  lt: '<',\n  lte: '<=',\n};\n\nexport type FilterType = keyof typeof filterNames;\n\nexport const filterEntities: Record<FilterType, LogicFunction> = {\n  none: () => true,\n  empty: notSet,\n  notEmpty: set,\n  eq: eq,\n  notEq: notEq,\n  begins: beginsWith,\n  contains: contains,\n  notContains: notContains,\n\n  eqN: eq,\n  neqN: notEq,\n  gt: gtThan,\n  gte: gtThanEq,\n  lt: lt,\n  lte: lsEq,\n};\n\nexport const filterTypes: Record<string, FilterType[]> = {\n  string: ['notEmpty', 'empty', 'eq', 'notEq', 'begins', 'contains', 'notContains'],\n  number: ['notEmpty', 'empty', 'eqN', 'neqN', 'gt', 'gte', 'lt', 'lte'],\n};\n","import { h } from '@stencil/core';\nimport BasePlugin from '../basePlugin';\nimport { RevoGrid } from '../../interfaces';\nimport { FILTER_PROP, isFilterBtn } from './filter.button';\nimport { MultiFilterItem } from './filter.pop';\nimport { filterEntities, filterNames, FilterType, filterTypes } from './filter.service';\nimport { LogicFunction } from './filter.types';\nimport { reduce } from 'lodash';\n\ntype CustomFilter = {\n  columnFilterType: string; // property defined in column filter: string/number/abstract/enum...etc\n  name: string;\n  func: LogicFunction;\n};\n\nexport type FilterCaptions = {\n  title: string;\n  save: string;\n  reset: string;\n  cancel: string;\n};\n\nexport type FilterLocalization = {\n  captions: FilterCaptions;\n  filterNames: Record<FilterType, string>;\n};\n\n/**\n * @typedef ColumnFilterConfig\n * @type {object}\n * @property {FilterCollection|undefined} collection - preserved filter data\n * @property {string[]|undefined} include - filters to be included, if defined everything else out of scope will be ignored\n * @property {Record<string, CustomFilter>|undefined} customFilters - hash map of {FilterType:CustomFilter}.\n * @property {FilterLocalization|undefined} localization - translation for filter popup captions.\n * @property {MultiFilterItem|undefined} multiFilterItems - data for multi filtering.\n * @property {boolean|undefined} disableDynamicFiltering - disables dynamic filtering.\n * A way to define your own filter types per column\n */\nexport type ColumnFilterConfig = {\n  collection?: FilterCollection;\n  include?: string[];\n  customFilters?: Record<string, CustomFilter>;\n  filterProp?: string;\n  localization?: FilterLocalization;\n  multiFilterItems?: MultiFilterItem;\n  disableDynamicFiltering?: boolean;\n};\ntype HeaderEvent = CustomEvent<RevoGrid.ColumnRegular>;\ntype FilterCollectionItem = {\n  filter: LogicFunction;\n  type: FilterType;\n  value?: any;\n};\n\nexport type FilterCollection = Record<RevoGrid.ColumnProp, FilterCollectionItem>;\n\nexport const FILTER_TRIMMED_TYPE = 'filter';\nexport const FILTER_CONFIG_CHANGED_EVENT = 'filterconfigchanged';\n\nexport default class FilterPlugin extends BasePlugin {\n  private pop: HTMLRevogrFilterPanelElement;\n  private filterCollection: FilterCollection = {};\n  private multiFilterItems: MultiFilterItem = {};\n  private possibleFilters: Record<string, string[]> = { ...filterTypes };\n  private possibleFilterNames: Record<string, string> = { ...filterNames };\n  private possibleFilterEntities: Record<string, LogicFunction> = { ...filterEntities };\n  private filterProp = FILTER_PROP;\n\n  constructor(protected revogrid: HTMLRevoGridElement, uiid: string, config?: ColumnFilterConfig) {\n    super(revogrid);\n    if (config) {\n      this.initConfig(config);\n    }\n\n    const headerclick = (e: HeaderEvent) => this.headerclick(e);\n\n    const aftersourceset = async () => {\n      const filterCollectionProps = Object.keys(this.filterCollection);\n      if (filterCollectionProps.length > 0) {\n        // handle old way of filtering by reworking FilterCollection to new MultiFilterItem\n        filterCollectionProps.forEach((prop, index) => {\n          if (!this.multiFilterItems[prop]) {\n            this.multiFilterItems[prop] = [\n              {\n                id: index,\n                type: this.filterCollection[prop].type,\n                value: this.filterCollection[prop].value,\n                relation: 'and',\n              },\n            ];\n          }\n        });\n      }\n      await this.runFiltering();\n    };\n    this.addEventListener('headerclick', headerclick);\n    this.addEventListener(FILTER_CONFIG_CHANGED_EVENT, ({ detail }: CustomEvent<ColumnFilterConfig | boolean>) => {\n      if (!detail) {\n        this.clearFiltering();\n        return;\n      }\n      if (typeof detail === 'object') {\n        this.initConfig(detail);\n      }\n      aftersourceset();\n    });\n    this.addEventListener('aftersourceset', aftersourceset);\n    this.addEventListener('filter', ({ detail }: CustomEvent) => this.onFilterChange(detail));\n\n    this.revogrid.registerVNode([\n      <revogr-filter-panel\n        uuid={`filter-${uiid}`}\n        filterItems={this.multiFilterItems}\n        filterNames={this.possibleFilterNames}\n        filterEntities={this.possibleFilterEntities}\n        filterCaptions={config?.localization?.captions}\n        onFilterChange={e => this.onFilterChange(e.detail)}\n        disableDynamicFiltering={config?.disableDynamicFiltering}\n        ref={e => (this.pop = e)}\n      />,\n    ]);\n  }\n\n  private initConfig(config: ColumnFilterConfig) {\n    if (config.multiFilterItems) {\n      this.multiFilterItems = { ...config.multiFilterItems };\n    }\n    if (config.customFilters) {\n      for (let cType in config.customFilters) {\n        const cFilter = config.customFilters[cType];\n        if (!this.possibleFilters[cFilter.columnFilterType]) {\n          this.possibleFilters[cFilter.columnFilterType] = [];\n        }\n        this.possibleFilters[cFilter.columnFilterType].push(cType);\n        this.possibleFilterEntities[cType] = cFilter.func;\n        this.possibleFilterNames[cType] = cFilter.name;\n      }\n    }\n\n    if (config.filterProp) {\n      this.filterProp = config.filterProp;\n    }\n\n    /**\n     * which filters has to be included/excluded\n     * convinient way to exclude system filters\n     */\n    if (config.include) {\n      const filters: Record<string, string[]> = {};\n\n      for (let t in this.possibleFilters) {\n        // validate filters, if appropriate function present\n        const newTypes = this.possibleFilters[t].filter(f => config.include.indexOf(f) > -1);\n        if (newTypes.length) {\n          filters[t] = newTypes;\n        }\n      }\n      // if any valid filters provided show them\n      if (Object.keys(filters).length > 0) {\n        this.possibleFilters = filters;\n      }\n    }\n    if (config.collection) {\n      this.filterCollection = reduce(config.collection, (result: FilterCollection, item, prop) => {\n        if (this.possibleFilterEntities[item.type]) {\n          result[prop] = item;\n        } else {\n          console.warn(`${item.type} type is not found.`);\n        }\n        return result;\n      }, {});\n    }\n\n    if (config.localization) {\n      if (config.localization.filterNames) {\n        Object.entries(config.localization.filterNames).forEach(([k, v]) => {\n          if (this.possibleFilterNames[k] != void 0) {\n            this.possibleFilterNames[k] = v;\n          }\n        });\n      }\n    }\n  }\n\n  private async headerclick(e: HeaderEvent) {\n    const el = e.detail.originalEvent?.target as HTMLElement;\n    if (!isFilterBtn(el)) {\n      return;\n    }\n    e.preventDefault();\n\n    // close if same\n    const changes = await this.pop.getChanges();\n    if (changes && changes?.prop === e.detail.prop) {\n      this.pop.show();\n      return;\n    }\n\n    // filter button clicked, open filter dialog\n    const gridPos = this.revogrid.getBoundingClientRect();\n    const buttonPos = el.getBoundingClientRect();\n    const prop = e.detail.prop;\n    this.pop.filterTypes = this.getColumnFilter(e.detail.filter);\n    this.pop.show({\n      ...this.filterCollection[prop],\n      x: buttonPos.x - gridPos.x,\n      y: buttonPos.y - gridPos.y + buttonPos.height,\n      prop,\n    });\n  }\n\n  private getColumnFilter(type?: boolean | string | string[]): Record<string, string[]> {\n    let filterType = 'string';\n    if (!type) {\n      return { [filterType]: this.possibleFilters[filterType] };\n    }\n\n    // if custom column filter\n    if (this.isValidType(type)) {\n      filterType = type;\n\n      // if multiple filters applied\n    } else if (typeof type === 'object' && type.length) {\n      return type.reduce((r: Record<string, string[]>, multiType) => {\n        if (this.isValidType(multiType)) {\n          r[multiType] = this.possibleFilters[multiType];\n        }\n        return r;\n      }, {});\n    }\n    return { [filterType]: this.possibleFilters[filterType] };\n  }\n\n  private isValidType(type: any): type is string {\n    return !!(typeof type === 'string' && this.possibleFilters[type]);\n  }\n\n  // called on internal component change\n  private async onFilterChange(filterItems: MultiFilterItem) {\n    this.multiFilterItems = filterItems;\n    this.runFiltering();\n  }\n\n  /**\n   * Triggers grid filtering\n   */\n  async doFiltering(collection: FilterCollection, items: RevoGrid.DataType[], columns: RevoGrid.ColumnRegular[], filterItems: MultiFilterItem) {\n    const columnsToUpdate: RevoGrid.ColumnRegular[] = [];\n\n    columns.forEach(rgCol => {\n      const column = { ...rgCol };\n      const hasFilter = filterItems[column.prop];\n      if (column[this.filterProp] && !hasFilter) {\n        delete column[this.filterProp];\n        columnsToUpdate.push(column);\n      }\n      if (!column[this.filterProp] && hasFilter) {\n        columnsToUpdate.push(column);\n        column[this.filterProp] = true;\n      }\n    });\n    const itemsToFilter = this.getRowFilter(items, filterItems);\n    // check is filter event prevented\n    const { defaultPrevented, detail } = this.emit('beforefiltertrimmed', { collection, itemsToFilter, source: items, filterItems });\n    if (defaultPrevented) {\n      return;\n    }\n\n    // check is trimmed event prevented\n    const isAddedEvent = await this.revogrid.addTrimmed(detail.itemsToFilter, FILTER_TRIMMED_TYPE);\n    if (isAddedEvent.defaultPrevented) {\n      return;\n    }\n\n    // applies the hasFilter to the columns to show filter icon\n    await this.revogrid.updateColumns(columnsToUpdate);\n    this.emit('afterFilterApply');\n  }\n\n  async clearFiltering() {\n    this.multiFilterItems = {};\n    await this.runFiltering();\n  }\n\n  private async runFiltering() {\n    const collection: FilterCollection = {};\n\n    // handle old filterCollection to return the first filter only (if any) from multiFilterItems\n    const filterProps = Object.keys(this.multiFilterItems);\n\n    for (const prop of filterProps) {\n      // check if we have any filter for a column\n      if (this.multiFilterItems[prop].length > 0) {\n        const firstFilterItem = this.multiFilterItems[prop][0];\n        collection[prop] = {\n          filter: filterEntities[firstFilterItem.type],\n          type: firstFilterItem.type,\n          value: firstFilterItem.value,\n        };\n      }\n    }\n\n    this.filterCollection = collection;\n\n    const { source, columns } = await this.getData();\n    const { defaultPrevented, detail } = this.emit('beforefilterapply', { collection: this.filterCollection, source, columns, filterItems: this.multiFilterItems });\n    if (defaultPrevented) {\n      return;\n    }\n    this.doFiltering(detail.collection, detail.source, detail.columns, detail.filterItems);\n  }\n\n  private async getData() {\n    return {\n      source: await this.revogrid.getSource(),\n      columns: await this.revogrid.getColumns(),\n    };\n  }\n\n  private getRowFilter(rows: RevoGrid.DataType[], filterItems: MultiFilterItem) {\n    const propKeys = Object.keys(filterItems);\n\n    const trimmed: Record<number, boolean> = {};\n    let propFilterSatisfiedCount: number = 0;\n    let lastFilterResults: boolean[] = [];\n\n    // each rows\n    rows.forEach((model, rowIndex) => {\n      // working on all props\n      for (const prop of propKeys) {\n        const propFilters = filterItems[prop];\n\n        propFilterSatisfiedCount = 0;\n        lastFilterResults = [];\n\n        // testing each filter for a prop\n        for (const [filterIndex, filterData] of propFilters.entries()) {\n          // the filter LogicFunction based on the type\n          const filter = this.possibleFilterEntities[filterData.type];\n\n          // THE MAGIC OF FILTERING IS HERE\n          if (filterData.relation === 'or') {\n            lastFilterResults = [];\n            if (filter(model[prop], filterData.value)) {\n              continue;\n            }\n            propFilterSatisfiedCount++;\n          } else {\n            // 'and' relation will need to know the next filter\n            // so we save this current filter to include it in the next filter\n            lastFilterResults.push(!filter(model[prop], filterData.value));\n\n            // check first if we have a filter on the next index to pair it with this current filter\n            const nextFilterData = propFilters[filterIndex + 1];\n            // stop the sequence if there is no next filter or if the next filter is not an 'and' relation\n            if (!nextFilterData || nextFilterData.relation !== 'and') {\n              // let's just continue since for sure propFilterSatisfiedCount cannot be satisfied\n              if (lastFilterResults.indexOf(true) === -1) {\n                lastFilterResults = [];\n                continue;\n              }\n\n              // we need to add all of the lastFilterResults since we need to satisfy all\n              propFilterSatisfiedCount += lastFilterResults.length;\n              lastFilterResults = [];\n            }\n          }\n        } // end of propFilters forEach\n\n        // add to the list of removed/trimmed rows of filter condition is satisfied\n        if (propFilterSatisfiedCount === propFilters.length) trimmed[rowIndex] = true;\n      } // end of for-of propKeys\n    });\n    return trimmed;\n  }\n}\n","var baseGetTag = require('./_baseGetTag'),\n    isArray = require('./isArray'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nmodule.exports = isString;\n","var baseProperty = require('./_baseProperty');\n\n/**\n * Gets the size of an ASCII `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nvar asciiSize = baseProperty('length');\n\nmodule.exports = asciiSize;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Gets the size of a Unicode `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nfunction unicodeSize(string) {\n  var result = reUnicode.lastIndex = 0;\n  while (reUnicode.test(string)) {\n    ++result;\n  }\n  return result;\n}\n\nmodule.exports = unicodeSize;\n","var asciiSize = require('./_asciiSize'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeSize = require('./_unicodeSize');\n\n/**\n * Gets the number of symbols in `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the string size.\n */\nfunction stringSize(string) {\n  return hasUnicode(string)\n    ? unicodeSize(string)\n    : asciiSize(string);\n}\n\nmodule.exports = stringSize;\n","var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArrayLike = require('./isArrayLike'),\n    isString = require('./isString'),\n    stringSize = require('./_stringSize');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/**\n * Gets the size of `collection` by returning its length for array-like\n * values or the number of own enumerable string keyed properties for objects.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @returns {number} Returns the collection size.\n * @example\n *\n * _.size([1, 2, 3]);\n * // => 3\n *\n * _.size({ 'a': 1, 'b': 2 });\n * // => 2\n *\n * _.size('pebbles');\n * // => 7\n */\nfunction size(collection) {\n  if (collection == null) {\n    return 0;\n  }\n  if (isArrayLike(collection)) {\n    return isString(collection) ? stringSize(collection) : collection.length;\n  }\n  var tag = getTag(collection);\n  if (tag == mapTag || tag == setTag) {\n    return collection.size;\n  }\n  return baseKeys(collection).length;\n}\n\nmodule.exports = size;\n","import size from 'lodash/size';\nimport debounce from 'lodash/debounce';\n\nimport { RevoGrid } from '../../interfaces';\nimport { setStore } from '../../utils/store.utils';\nimport ColumnDataProvider from '../../services/column.data.provider';\nimport BasePlugin from '../basePlugin';\n\nexport type SortingOrder = Record<RevoGrid.ColumnProp, RevoGrid.Order>;\ntype SortingOrderFunction = Record<RevoGrid.ColumnProp, RevoGrid.CellCompareFunc | undefined>;\ntype ColumnSetEvent = {\n  order: SortingOrder;\n};\n\n/**\n * lifecycle\n * 1) @event beforesorting - sorting just started, nothing happened yet, can be from column or from source, if type is from rows - column will be undefined\n * 2) @metod updateColumnSorting - column sorting icon applied to grid and column get updated, data still untiuched\n * 3) @event beforesortingapply - before we applied sorting data to data source, you can prevent event and data will not be sorted. It's called only from column sorting click\n * 4) @event afterSortingApply - sorting applied, just finished event, from rows and columns\n *\n * If you prevent event it'll not reach farther steps\n */\n\nexport default class SortingPlugin extends BasePlugin {\n  // sorting order per column\n  private sorting: SortingOrder | null = null;\n\n  // sorting function per column, multiple columns sorting supported\n  private sortingFunc: SortingOrderFunction | null = null;\n  private doSort = debounce((order: SortingOrder, comparison: SortingOrderFunction) => this.sort(order, comparison), 50);\n\n\n  constructor(protected revogrid: HTMLRevoGridElement) {\n    super(revogrid);\n\n    const aftersourceset = async ({ detail: { type } }: CustomEvent<{\n      type: RevoGrid.DimensionRows\n    }>) => {\n      // if sorting was provided - sort data\n      if (!!this.sorting && this.sortingFunc) {\n        const beforeEvent = this.emit('beforesorting', { type });\n        if (beforeEvent.defaultPrevented) {\n          return;\n        }\n        this.doSort(this.sorting, this.sortingFunc);\n      }\n    };\n    const aftercolumnsset = async ({ detail: { order } }: CustomEvent<ColumnSetEvent>) => {\n      // const columns = await this.revogrid.getColumns();\n      // const sortingFunc: SortingOrderFunction = {};\n\n      // for (let prop in order) {\n      //   const cmp = this.getComparer(ColumnDataProvider.getColumnByProp(columns, prop), order[prop]);\n      //   sortingFunc[prop] = cmp;\n      // }\n      // this.doSort(order, sortingFunc);\n    };\n    const headerclick = async (e: CustomEvent<RevoGrid.InitialHeaderClick>) => {\n      if (e.defaultPrevented) {\n        return;\n      }\n\n      if (!e.detail.column.sortable) {\n        return;\n      }\n\n      this.headerclick(e.detail.column, e.detail.index, e.detail?.originalEvent?.shiftKey);\n    };\n\n    this.addEventListener('after-any-source', aftersourceset);\n    this.addEventListener('aftercolumnsset', aftercolumnsset);\n    this.addEventListener('initialHeaderClick', headerclick);\n  }\n\n  private getComparer(column: RevoGrid.ColumnRegular, order: RevoGrid.Order): RevoGrid.CellCompareFunc {\n    const cellCmp: RevoGrid.CellCompareFunc = column?.cellCompare?.bind({ order }) || this.defaultCellCompare;\n    if (order == 'asc') {\n      return cellCmp;\n    }\n    if (order == 'desc') {\n      return this.descCellCompare(cellCmp);\n    }\n    return undefined;\n  }\n\n  /**\n   * Apply sorting to data on header click\n   * If additive - add to existing sorting, multiple columns can be sorted\n   */\n  async headerclick(column: RevoGrid.ColumnRegular, index: number, additive: boolean) {\n    let order: RevoGrid.Order = this.getNextOrder(column.order);\n    const beforeEvent = this.emit('beforesorting', { column, order, additive });\n    if (beforeEvent.defaultPrevented) {\n      return;\n    }\n    order = beforeEvent.detail.order;\n    const newCol = await this.revogrid.updateColumnSorting(beforeEvent.detail.column, index, order, additive);\n\n    // apply sort data\n    const beforeApplyEvent = this.emit('beforesortingapply', { column: newCol, order, additive });\n    if (beforeApplyEvent.defaultPrevented) {\n      return;\n    }\n    order = beforeApplyEvent.detail.order;\n    const cmp = this.getComparer(column, order);\n\n    if (additive && this.sorting) {\n      const sorting: SortingOrder = {};\n      const sortingFunc: SortingOrderFunction = {};\n\n      this.sorting = {\n        ...this.sorting,\n        ...sorting,\n      };\n      // extend sorting function with new sorting for multiple columns sorting\n      this.sortingFunc = {\n        ...this.sortingFunc,\n        ...sortingFunc,\n      };\n\n      if (column.prop in sorting && size(sorting) > 1 && order === undefined) {\n        delete sorting[column.prop];\n        delete sortingFunc[column.prop];\n      } else {\n        sorting[column.prop] = order;\n        sortingFunc[column.prop] = cmp;\n      }\n    } else {\n      // reset sorting\n      this.sorting = { [column.prop]: order };\n      this.sortingFunc = { [column.prop]: cmp };\n    }\n\n    this.doSort(this.sorting, this.sortingFunc);\n  }\n\n  /**\n   * Sort items by sorting function\n   * @requires proxyItems applied to row store\n   * @requires source applied to row store\n   * \n   * @param sorting - per column sorting\n   * @param data - this.stores['rgRow'].store.get('source')\n   */\n  async sort(sorting: SortingOrder, sortingFunc: SortingOrderFunction, types: RevoGrid.DimensionRows[] = ['rgRow', 'rowPinStart', 'rowPinEnd']) {\n    return\n    // if no sorting - reset\n    if (!size(sorting)) {\n      this.sorting = null;\n      this.sortingFunc = null;\n      return;\n    }\n    // set sorting\n    this.sorting = sorting;\n    this.sortingFunc = sortingFunc;\n\n    // by default it'll sort by rgRow store\n    // todo: support multiple stores\n    for (let type of types) {\n      const store = await this.revogrid.getSourceStore(type);\n      // row data\n      const source = store.get('source');\n      // row indexes\n      const proxyItems = store.get('proxyItems');\n      const data = this.sortIndexByItems([...proxyItems], source, sortingFunc);\n      setStore(store, {\n        proxyItems: data,\n        source: [...source],\n      });\n    }\n    this.emit('afterSortingApply');\n  }\n\n  defaultCellCompare(prop: RevoGrid.ColumnProp, a: RevoGrid.DataType, b: RevoGrid.DataType) {\n    const av = a[prop]?.toString().toLowerCase();\n    const bv = b[prop]?.toString().toLowerCase();\n\n    return av == bv ? 0 : av > bv ? 1 : -1;\n  }\n\n  descCellCompare(cmp: RevoGrid.CellCompareFunc) {\n    return (prop: RevoGrid.ColumnProp, a: RevoGrid.DataType, b: RevoGrid.DataType): number => {\n      return -1 * cmp(prop, a, b);\n    };\n  }\n\n  sortIndexByItems(indexes: number[], source: RevoGrid.DataType[], sortingFunc: SortingOrderFunction): number[] {\n    // if no sorting - return unsorted indexes\n    if (Object.entries(sortingFunc).length === 0) {\n      // Unsort indexes\n      return [...Array(indexes.length).keys()];\n    }\n    // \n    /**\n     * go through all indexes and align in new order\n     * performs a multi-level sorting by applying multiple comparison functions to determine the order of the items based on different properties.\n     */\n    return indexes.sort((a, b) => {\n      for (const [prop, cmp] of Object.entries(sortingFunc)) {\n        const itemA = source[a];\n        const itemB = source[b];\n\n        /**\n         * If the comparison function returns a non-zero value (sorted), it means that the items should be sorted based on the given property. In such a case, the function immediately returns the sorted value, indicating the order in which the items should be arranged.\n         * If none of the comparison functions result in a non-zero value, indicating that the items are equal or should remain in the same order, the function eventually returns 0.\n         */\n        const sorted = cmp(prop, itemA, itemB);\n        if (sorted) {\n          return sorted;\n        }\n      }\n      return 0;\n    });\n  }\n\n  getNextOrder(currentOrder: RevoGrid.Order): RevoGrid.Order {\n    switch (currentOrder) {\n      case undefined:\n        return 'asc';\n      case 'asc':\n        return 'desc';\n      case 'desc':\n        return undefined;\n    }\n  }\n}\n","/**\n * The base implementation of `_.clamp` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */\nfunction baseClamp(number, lower, upper) {\n  if (number === number) {\n    if (upper !== undefined) {\n      number = number <= upper ? number : upper;\n    }\n    if (lower !== undefined) {\n      number = number >= lower ? number : lower;\n    }\n  }\n  return number;\n}\n\nmodule.exports = baseClamp;\n","var baseClamp = require('./_baseClamp'),\n    toInteger = require('./toInteger');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Converts `value` to an integer suitable for use as the length of an\n * array-like object.\n *\n * **Note:** This method is based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toLength(3.2);\n * // => 3\n *\n * _.toLength(Number.MIN_VALUE);\n * // => 0\n *\n * _.toLength(Infinity);\n * // => 4294967295\n *\n * _.toLength('3.2');\n * // => 3\n */\nfunction toLength(value) {\n  return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n}\n\nmodule.exports = toLength;\n","var toInteger = require('./toInteger'),\n    toLength = require('./toLength');\n\n/**\n * The base implementation of `_.fill` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to fill.\n * @param {*} value The value to fill `array` with.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns `array`.\n */\nfunction baseFill(array, value, start, end) {\n  var length = array.length;\n\n  start = toInteger(start);\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = (end === undefined || end > length) ? length : toInteger(end);\n  if (end < 0) {\n    end += length;\n  }\n  end = start > end ? 0 : toLength(end);\n  while (start < end) {\n    array[start++] = value;\n  }\n  return array;\n}\n\nmodule.exports = baseFill;\n","var baseFill = require('./_baseFill'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Fills elements of `array` with `value` from `start` up to, but not\n * including, `end`.\n *\n * **Note:** This method mutates `array`.\n *\n * @static\n * @memberOf _\n * @since 3.2.0\n * @category Array\n * @param {Array} array The array to fill.\n * @param {*} value The value to fill `array` with.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns `array`.\n * @example\n *\n * var array = [1, 2, 3];\n *\n * _.fill(array, 'a');\n * console.log(array);\n * // => ['a', 'a', 'a']\n *\n * _.fill(Array(3), 2);\n * // => [2, 2, 2]\n *\n * _.fill([4, 6, 8, 10], '*', 1, 3);\n * // => [4, '*', '*', 10]\n */\nfunction fill(array, value, start, end) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n    start = 0;\n    end = length;\n  }\n  return baseFill(array, value, start, end);\n}\n\nmodule.exports = fill;\n","import { getGroupingName, isGrouping } from '../groupingRow/grouping.service';\nimport { CSVFormat, DataInput, Formatter } from './types';\n\nconst INITIAL: CSVFormat = {\n  mime: 'text/csv',\n  fileKind: 'csv',\n  // BOM signature\n  bom: true,\n  columnDelimiter: ',',\n  rowDelimiter: '\\r\\n',\n  encoding: '',\n};\n\nexport type CSVFormatter = (options: Partial<CSVFormat>, data: DataInput) => string;\n\n// The ASCII character code 13 is called a Carriage Return or CR.\nconst CARRIAGE_RETURN = String.fromCharCode(13);\n// Chr(13) followed by a Chr(10) that compose a proper CRLF.\nconst LINE_FEED = String.fromCharCode(10);\nconst DOUBLE_QT = String.fromCharCode(34);\nconst NO_BREAK_SPACE = String.fromCharCode(0xfeff);\nconst escapeRegex = new RegExp('\"', 'g');\n\nexport default class ExportCsv implements Formatter {\n  readonly options: Readonly<CSVFormat>;\n  constructor(options: Partial<CSVFormat> = {}) {\n    this.options = { ...INITIAL, ...options };\n  }\n\n  doExport({ data, headers, props }: DataInput) {\n    let result = this.options.bom ? NO_BREAK_SPACE : '';\n\n    // any header\n    if (headers?.length > 0) {\n      headers.forEach(header => {\n        // ignore empty\n        if (!header.length) {\n          return;\n        }\n        result += this.prepareHeader(header, this.options.columnDelimiter);\n        result += this.options.rowDelimiter;\n      });\n    }\n\n    data.forEach((rgRow, index) => {\n      if (index > 0) {\n        result += this.options.rowDelimiter;\n      }\n      // support grouping\n      if (isGrouping(rgRow)) {\n        result += this.parseCell(getGroupingName(rgRow), this.options.columnDelimiter);\n        return;\n      }\n      result += props.map(p => this.parseCell(rgRow[p], this.options.columnDelimiter)).join(this.options.columnDelimiter);\n    });\n\n    return result;\n  }\n\n  private prepareHeader(columnHeaders: string[], columnDelimiter: string) {\n    let result = '';\n    const newColumnHeaders = columnHeaders.map(v => this.parseCell(v, columnDelimiter, true));\n    result += newColumnHeaders.join(columnDelimiter);\n    return result;\n  }\n\n  private parseCell(value: any, columnDelimiter: string, force = false) {\n    let escape = value;\n    if (typeof value !== 'string') {\n      escape = JSON.stringify(value);\n    }\n    const toEscape = [CARRIAGE_RETURN, DOUBLE_QT, LINE_FEED, columnDelimiter];\n    if (typeof escape === 'undefined') {\n      return '';\n    }\n    if (escape !== '' && (force || toEscape.some(i => escape.indexOf(i) >= 0))) {\n      return `\"${escape.replace(escapeRegex, '\"\"')}\"`;\n    }\n\n    return escape;\n  }\n}\n","import fill from 'lodash/fill';\nimport { RevoGrid } from '../../interfaces';\nimport { Group, Groups } from '../../store/dataSource/data.store';\nimport { ColSource, CSVFormat, DataInput, Formatter } from './types';\n\nimport { columnTypes, rowTypes } from '../../store/storeTypes';\nimport { timeout } from '../../utils';\nimport BasePlugin from '../basePlugin';\nimport ExportCsv from './csv';\n\nenum ExportTypes {\n  csv = 'csv',\n}\n\nexport type ExportFormat = Partial<CSVFormat>;\n\nexport default class ExportFilePlugin extends BasePlugin {\n  /** Exports string */\n  async exportString(options: ExportFormat = {}, t: ExportTypes = ExportTypes.csv) {\n    const data = await this.beforeexport();\n    if (!data) {\n      return null;\n    }\n    return this.formatter(t, options).doExport(data);\n  }\n\n  /** Exports Blob */\n  async exportBlob(options: ExportFormat = {}, t: ExportTypes = ExportTypes.csv) {\n    return await this.getBlob(this.formatter(t, options));\n  }\n\n  /** Export file */\n  async exportFile(options: ExportFormat = {}, t: ExportTypes = ExportTypes.csv) {\n    const formatter = this.formatter(t, options);\n    const blob = await this.getBlob(formatter);\n\n    // url\n    const URL = window.URL || window.webkitURL;\n\n    const a = document.createElement('a');\n    const { filename, fileKind } = formatter.options;\n    const name = `${filename}.${fileKind}`;\n    const url = URL.createObjectURL(blob);\n\n    a.style.display = 'none';\n    a.setAttribute('href', url);\n    a.setAttribute('download', name);\n    this.revogrid.appendChild(a);\n    a.dispatchEvent(new MouseEvent('click'));\n    this.revogrid.removeChild(a);\n\n    // delay for revoke, correct for some browsers\n    await timeout(120);\n    URL.revokeObjectURL(url);\n  }\n\n  /** Blob object */\n  async getBlob(formatter: Formatter) {\n    const type = `${formatter.options.mime};charset=${formatter.options.encoding}`;\n    if (typeof Blob !== 'undefined') {\n      const data = await this.beforeexport();\n      if (!data) {\n        return null;\n      }\n      return new Blob([formatter.doExport(data)], { type });\n    }\n    return null;\n  }\n\n  // before event\n  private async beforeexport() {\n    let data = await this.getData();\n    const event: CustomEvent<{ data: DataInput }> = this.emit('beforeexport', { data });\n    if (event.defaultPrevented) {\n      return null;\n    }\n    return event.detail.data;\n  }\n\n  private async getData(): Promise<DataInput> {\n    const data = await this.getSource();\n    const colSource: ColSource[] = [];\n    const colPromises: Promise<ColSource>[] = [];\n    columnTypes.forEach((t, i) => {\n      colPromises.push(this.getColPerSource(t).then(s => (colSource[i] = s)));\n    });\n    await Promise.all(colPromises);\n    const columns: ColSource = {\n      headers: [],\n      props: [],\n    };\n    for (let source of colSource) {\n      source.headers.forEach((h, i) => {\n        if (!columns.headers[i]) {\n          columns.headers[i] = [];\n        }\n        columns.headers[i].push(...h);\n      });\n      columns.props.push(...source.props);\n    }\n    return {\n      data,\n      ...columns,\n    };\n  }\n\n  private async getColPerSource(t: RevoGrid.DimensionCols) {\n    const store = await this.revogrid.getColumnStore(t);\n    const source = store.get('source');\n    const virtualIndexes = store.get('items');\n    const depth = store.get('groupingDepth');\n    const groups = store.get('groups');\n    const colNames: string[] = [];\n    const colProps: RevoGrid.ColumnProp[] = [];\n    const visibleItems = virtualIndexes.reduce((r: Record<string, number>, v, virtualIndex) => {\n      const prop = source[v].prop;\n      colNames.push(source[v].name || '');\n      colProps.push(prop);\n      r[prop] = virtualIndex;\n      return r;\n    }, {});\n    const rows: string[][] = this.getGroupHeaders(depth, groups, virtualIndexes, visibleItems);\n    rows.push(colNames);\n    return {\n      headers: rows,\n      props: colProps,\n    };\n  }\n\n  private getGroupHeaders(depth: number, groups: Groups, items: number[], visibleItems: Record<string, number>) {\n    const rows: string[][] = [];\n    const template = fill(new Array(items.length), '');\n    for (let d = 0; d < depth; d++) {\n      const rgRow = [...template];\n      rows.push(rgRow);\n      if (!groups[d]) {\n        continue;\n      }\n      const levelGroups = groups[d];\n\n      // add names of groups\n      levelGroups.forEach((group: Group) => {\n        const minIndex = this.findGroupStartIndex(group.ids, visibleItems);\n        if (typeof minIndex === 'number') {\n          rgRow[minIndex] = group.name;\n        }\n      });\n    }\n    return rows;\n  }\n\n  private findGroupStartIndex(ids: (string | number)[], visibleItems: Record<string, number>): number | undefined {\n    let min: number | undefined;\n    ids.forEach(id => {\n      const current = visibleItems[id];\n      if (typeof current === 'number') {\n        if (typeof min !== 'number' || min > current) {\n          min = current;\n        }\n      }\n    });\n    return min;\n  }\n\n  private async getSource() {\n    const data: RevoGrid.DataType[][] = [];\n    const promisesData: Promise<number>[] = [];\n    rowTypes.forEach(t => {\n      const dataPart: RevoGrid.DataType[] = [];\n      data.push(dataPart);\n      const promise = this.revogrid.getVisibleSource(t).then((d: RevoGrid.DataType[]) => dataPart.push(...d));\n      promisesData.push(promise);\n    });\n    await Promise.all(promisesData);\n    return data.reduce((r, v) => {\n      r.push(...v);\n      return r;\n    }, []);\n  }\n\n  // get correct class for future multiple types support\n  private formatter(type: ExportTypes, options: ExportFormat = {}) {\n    switch (type) {\n      case ExportTypes.csv:\n        return new ExportCsv(options);\n      default:\n        throw new Error('Unknown format');\n    }\n  }\n}\n","import { RevoGrid } from '../../interfaces';\nimport { PSEUDO_GROUP_ITEM_ID, PSEUDO_GROUP_ITEM_VALUE, GROUP_EXPANDED, GROUP_DEPTH } from './grouping.const';\nimport { isGrouping, getParsedGroup, isSameGroup } from './grouping.service';\n\n// provide collapse data\nexport function doCollapse(pIndex: number, source: RevoGrid.DataType[]) {\n  const model = source[pIndex];\n  const collapseValue = model[PSEUDO_GROUP_ITEM_VALUE];\n  const trimmed: Record<number, boolean> = {};\n  let i = pIndex + 1;\n  const total = source.length;\n  while (i < total) {\n    const currentModel = source[i];\n    if (isGrouping(currentModel)) {\n      const currentValue = currentModel[PSEUDO_GROUP_ITEM_VALUE];\n      if (!currentValue.length || !currentValue.startsWith(collapseValue + ',')) {\n        break;\n      }\n      currentModel[GROUP_EXPANDED] = false;\n    }\n    trimmed[i++] = true;\n  }\n  model[GROUP_EXPANDED] = false;\n  return { trimmed };\n}\n\n/**\n *\n * @param pIndex - physical index\n * @param vIndex - virtual index, need to update item collection\n * @param source - data source\n * @param rowItemsIndexes - rgRow indexes\n */\nexport function doExpand(vIndex: number, source: RevoGrid.DataType[], rowItemsIndexes: number[]) {\n  const physicalIndex = rowItemsIndexes[vIndex];\n  const model = source[physicalIndex];\n  const currentGroup = getParsedGroup(model[PSEUDO_GROUP_ITEM_ID]);\n  const trimmed: Record<number, boolean> = {};\n\n  // no group found\n  if (!currentGroup) {\n    return { trimmed };\n  }\n\n  const groupItems: number[] = [];\n  model[GROUP_EXPANDED] = true;\n  let i = physicalIndex + 1;\n  const total = source.length;\n  let groupLevelOnly = 0;\n\n  // go through all rows\n  while (i < total) {\n    const currentModel = source[i];\n    const isGroup = isGrouping(currentModel);\n    // group found\n    if (isGroup) {\n      if (!isSameGroup(currentGroup, model, currentModel)) {\n        break;\n      } else if (!groupLevelOnly) {\n        // if get group first it's group only level\n        groupLevelOnly = currentModel[GROUP_DEPTH];\n      }\n    }\n    // level 0 or same depth\n    if (!groupLevelOnly || (isGroup && groupLevelOnly === currentModel[GROUP_DEPTH])) {\n      trimmed[i] = false;\n      groupItems.push(i);\n    }\n    i++;\n  }\n  const result: {\n    trimmed: Record<number, boolean>;\n    items?: number[];\n  } = {\n    trimmed,\n  };\n  if (groupItems.length) {\n    const items = [...rowItemsIndexes];\n    items.splice(vIndex + 1, 0, ...groupItems);\n    result.items = items;\n  }\n  return result;\n}\n","import { gatherTrimmedItems, Trimmed, TrimmedEntity } from '../../store/dataSource/trimmed.plugin';\n\nexport const TRIMMED_GROUPING = 'grouping';\n\n/**\n * Prepare trimming updated indexes for grouping\n * @param initiallyTrimed\n * @param firstLevelMap\n * @param secondLevelMap\n */\nexport function processDoubleConversionTrimmed(initiallyTrimed: Trimmed, firstLevelMap: Record<number, number>, secondLevelMap?: Record<number, number>) {\n  const trimemedOptionsToUpgrade: Trimmed = {};\n  /**\n   * go through all groups except grouping\n   */\n  for (let type in initiallyTrimed) {\n    if (type === TRIMMED_GROUPING) {\n      continue;\n    }\n    const items = initiallyTrimed[type];\n    const newItems: TrimmedEntity = {};\n\n    for (let initialIndex in items) {\n      /**\n       * if item exists we find it in collection\n       * we support 2 level of conversions\n       */\n      let newConversionIndex = firstLevelMap[initialIndex];\n      if (secondLevelMap) {\n        newConversionIndex = secondLevelMap[newConversionIndex];\n      }\n\n      /**\n       * if item was trimmed previously\n       * trimming makes sense to apply\n       */\n      if (items[initialIndex]) {\n        newItems[newConversionIndex] = true;\n        /**\n         * If changes present apply changes to new source\n         */\n        if (newConversionIndex !== parseInt(initialIndex, 10)) {\n          trimemedOptionsToUpgrade[type] = newItems;\n        }\n      }\n    }\n  }\n  return trimemedOptionsToUpgrade;\n}\n\nexport function filterOutEmptyGroups(allTrimmedGroups: Trimmed, childrenByGroup: Record<number, number[]> = {}) {\n  const trimmedGroup: TrimmedEntity = {};\n  const allTrimmed = gatherTrimmedItems(allTrimmedGroups);\n  // find is groups are filled\n  for (let groupIndex in childrenByGroup) {\n    const hasChidlren = childrenByGroup[groupIndex].filter(childIndex => !allTrimmed[childIndex]).length > 0;\n    if (!hasChidlren) {\n      trimmedGroup[groupIndex] = true;\n    }\n  }\n  return trimmedGroup;\n}\n","import { Edition, RevoGrid } from '../../interfaces';\nimport ColumnDataProvider, { ColumnCollection } from '../../services/column.data.provider';\nimport { DataProvider } from '../../services/data.provider';\nimport { getPhysical, setItems } from '../../store/dataSource/data.store';\nimport { columnTypes } from '../../store/storeTypes';\nimport BasePlugin from '../basePlugin';\nimport { FILTER_TRIMMED_TYPE } from '../filter/filter.plugin';\nimport { TrimmedEntity } from '../../store/dataSource/trimmed.plugin';\nimport { GROUPING_ROW_TYPE, GROUP_EXPANDED, GROUP_EXPAND_EVENT, PSEUDO_GROUP_COLUMN, PSEUDO_GROUP_ITEM_VALUE } from './grouping.const';\nimport { doExpand, doCollapse } from './grouping.row.expand.service';\nimport { BeforeSourceSetEvent, GroupingOptions, OnExpandEvent, SourceGather } from './grouping.row.types';\nimport { ExpandedOptions, gatherGrouping, isGrouping, isGroupingColumn } from './grouping.service';\nimport { processDoubleConversionTrimmed, TRIMMED_GROUPING } from './grouping.trimmed.service';\n\nexport default class GroupingRowPlugin extends BasePlugin {\n  private options: GroupingOptions | undefined;\n\n  get hasProps() {\n    return this.options?.props && this.options?.props?.length;\n  }\n\n  get store() {\n    return this.providers.dataProvider.stores[GROUPING_ROW_TYPE].store;\n  }\n\n  // proxy for items get\n  get rowItems() {\n    return this.store.get('items');\n  }\n\n  get trimmed() {\n    return this.store.get('trimmed');\n  }\n\n  constructor(\n    protected revogrid: HTMLRevoGridElement,\n    protected providers: {\n      dataProvider: DataProvider;\n      columnProvider: ColumnDataProvider;\n    },\n  ) {\n    super(revogrid);\n  }\n\n  // befoce cell focus\n  private onFocus(e: CustomEvent<Edition.BeforeSaveDataDetails>) {\n    if (isGrouping(e.detail.model)) {\n      e.preventDefault();\n    }\n  }\n\n  // expand event triggered\n  private onExpand({ virtualIndex }: OnExpandEvent) {\n    const { source } = this.getSource();\n    let newTrimmed = this.trimmed[TRIMMED_GROUPING];\n\n    let i = getPhysical(this.store, virtualIndex);\n    const model = source[i];\n    const prevExpanded = model[GROUP_EXPANDED];\n    if (!prevExpanded) {\n      const { trimmed, items } = doExpand(virtualIndex, source, this.rowItems);\n      newTrimmed = { ...newTrimmed, ...trimmed };\n      if (items) {\n        setItems(this.store, items);\n      }\n    } else {\n      const { trimmed } = doCollapse(i, source);\n      newTrimmed = { ...newTrimmed, ...trimmed };\n      this.revogrid.clearFocus();\n    }\n\n    this.store.set('source', source);\n    this.revogrid.addTrimmed(newTrimmed, TRIMMED_GROUPING);\n  }\n\n  // get source based on proxy item collection to preserve rgRow order\n  private getSource(withoutGrouping = false) {\n    const source = this.store.get('source');\n    const items = this.store.get('proxyItems');\n    let index = 0;\n    // order important here, expected parent is first, then others\n    return items.reduce(\n      (result: SourceGather, i) => {\n        const model = source[i];\n        if (!withoutGrouping) {\n          result.source.push(model);\n          return result;\n        }\n\n        // grouping filter\n        if (!isGrouping(model)) {\n          result.source.push(model);\n          result.oldNewIndexes[i] = index;\n          index++;\n        } else {\n          if (model[GROUP_EXPANDED]) {\n            result.prevExpanded[model[PSEUDO_GROUP_ITEM_VALUE]] = true;\n          }\n        }\n        return result;\n      },\n      {\n        source: [],\n        prevExpanded: {},\n        oldNewIndexes: {},\n      },\n    );\n  }\n\n  private setColumnGrouping(cols?: RevoGrid.ColumnRegular[]) {\n    // if 0 column as holder\n    if (cols?.length) {\n      cols[0][PSEUDO_GROUP_COLUMN] = true;\n      return true;\n    }\n    return false;\n  }\n\n  private setColumns({ columns }: ColumnCollection) {\n    for (let type of columnTypes) {\n      if (this.setColumnGrouping(columns[type])) {\n        break;\n      }\n    }\n  }\n\n  // evaluate drag between groups\n  private onDrag(e: CustomEvent<{ from: number; to: number }>) {\n    const { from, to } = e.detail;\n    const isDown = to - from >= 0;\n    const { source } = this.getSource();\n    const items = this.rowItems;\n    let i = isDown ? from : to;\n    const end = isDown ? to : from;\n    for (; i < end; i++) {\n      const model = source[items[i]];\n      const isGroup = isGrouping(model);\n      if (isGroup) {\n        e.preventDefault();\n        return;\n      }\n    }\n  }\n\n  private beforeTrimmedApply(trimmed: Record<number, boolean>, type: string) {\n    /** Before filter apply remove grouping filtering */\n    if (type === FILTER_TRIMMED_TYPE) {\n      const source = this.store.get('source');\n      for (let index in trimmed) {\n        if (trimmed[index] && isGrouping(source[index])) {\n          trimmed[index] = false;\n        }\n      }\n    }\n  }\n\n  // subscribe to grid events to process them accordingly\n  private subscribe() {\n    /** if grouping present and new data source arrived */\n    this.addEventListener('beforesourceset', ({ detail }: CustomEvent<BeforeSourceSetEvent>) => this.onDataSet(detail));\n    this.addEventListener('beforecolumnsset', ({ detail }: CustomEvent<ColumnCollection>) => this.setColumns(detail));\n\n    /**\n     * filter applied need to clear grouping and apply again\n     * based on new results can be new grouping\n     */\n    this.addEventListener('beforetrimmed', ({ detail: { trimmed, trimmedType } }) => this.beforeTrimmedApply(trimmed, trimmedType));\n    /**\n     * sorting applied need to clear grouping and apply again\n     * based on new results whole grouping order will changed\n     */\n    this.addEventListener('afterSortingApply', () => this.doSourceUpdate({ ...this.options }));\n\n    /**\n     * Apply logic for focus inside of grouping\n     * We can't focus on grouping rows, navigation only inside of groups for now\n     */\n    this.addEventListener('beforecellfocus', e => this.onFocus(e));\n    /**\n     * Prevent rgRow drag outside the group\n     */\n    this.addEventListener('roworderchanged', e => this.onDrag(e));\n\n    /**\n     * When grouping expand icon was clicked\n     */\n    this.addEventListener(GROUP_EXPAND_EVENT, ({ detail }: CustomEvent<OnExpandEvent>) => this.onExpand(detail));\n  }\n\n  /**\n   * Starts global source update with group clearing and applying new one\n   * Initiated when need to reapply grouping\n   */\n  private doSourceUpdate(options?: ExpandedOptions) {\n    if (!this.hasProps) {\n      return;\n    }\n    /**\n     * Get source without grouping\n     * @param newOldIndexMap - provides us mapping with new indexes vs old indexes, we would use it for trimmed mapping\n     */\n    const { source, prevExpanded, oldNewIndexes } = this.getSource(true);\n    /**\n     * Group again\n     * @param oldNewIndexMap - provides us mapping with new indexes vs old indexes\n     */\n    const { sourceWithGroups, depth, trimmed, oldNewIndexMap, childrenByGroup } = gatherGrouping(\n      source,\n      this.options?.props || [],\n      {\n        prevExpanded,\n        ...options,\n      },\n    );\n\n    // setup source\n    this.providers.dataProvider.setData(\n      sourceWithGroups,\n      GROUPING_ROW_TYPE,\n      { depth, customRenderer: options?.groupLabelTemplate },\n      true,\n    );\n    this.updateTrimmed(trimmed, childrenByGroup, oldNewIndexes, oldNewIndexMap);\n  }\n\n  /**\n   * Apply grouping on data set\n   * Clear grouping from source\n   * If source came from other plugin\n   */\n  private onDataSet(data: BeforeSourceSetEvent) {\n    if (!this.hasProps || !data?.source || !data.source.length) {\n      return;\n    }\n    const source = data.source.filter(s => !isGrouping(s));\n    const expanded = this.revogrid.grouping || {};\n    const { sourceWithGroups, depth, trimmed, oldNewIndexMap, childrenByGroup } = gatherGrouping(\n      source,\n      this.options?.props || [],\n      {\n        ...(expanded || {}),\n      },\n    );\n    data.source = sourceWithGroups;\n    this.providers.dataProvider.setGrouping({ depth });\n    this.updateTrimmed(trimmed, childrenByGroup, oldNewIndexMap);\n  }\n\n  // apply grouping\n  setGrouping(options: GroupingOptions) {\n    // unsubscribe from all events when group applied\n    this.clearSubscriptions();\n    this.options = options;\n    // clear props, no grouping exists\n    if (!options.props || !Object.keys(options.props).length) {\n      this.clearGrouping();\n      return;\n    }\n    // props exist and source inited\n    const { source } = this.getSource();\n    if (source.length) {\n      this.doSourceUpdate({ ...options });\n    }\n    // props exist and columns inited\n    for (let t of columnTypes) {\n      if (this.setColumnGrouping(this.providers.columnProvider.getColumns(t))) {\n        this.providers.columnProvider.refreshByType(t);\n        break;\n      }\n    }\n\n    // if has any grouping subscribe to events again\n    this.subscribe();\n  }\n\n  // clear grouping\n  clearGrouping() {\n    // clear columns\n    columnTypes.forEach(t => {\n      const cols = this.providers.columnProvider.getColumns(t);\n      let deleted = false;\n      cols.forEach(c => {\n        if (isGroupingColumn(c)) {\n          delete c[PSEUDO_GROUP_COLUMN];\n          deleted = true;\n        }\n      });\n      // if column store had grouping clear and refresh\n      if (deleted) {\n        this.providers.columnProvider.refreshByType(t);\n      }\n    });\n    // clear rows\n    const { source, oldNewIndexes } = this.getSource(true);\n    this.providers.dataProvider.setData(source, GROUPING_ROW_TYPE, undefined, true);\n    this.updateTrimmed(undefined, undefined, oldNewIndexes);\n  }\n\n  private updateTrimmed(\n    trimmedGroup: TrimmedEntity = {},\n    _childrenByGroup: Record<number, number[]> = {},\n    firstLevelMap: Record<number, number>,\n    secondLevelMap?: Record<number, number>,\n  ) {\n    // map previously trimmed data\n    const trimemedOptionsToUpgrade = processDoubleConversionTrimmed(this.trimmed, firstLevelMap, secondLevelMap);\n    for (let type in trimemedOptionsToUpgrade) {\n      this.revogrid.addTrimmed(trimemedOptionsToUpgrade[type], type);\n    }\n\n    // const emptyGroups = this.filterOutEmptyGroups(trimemedOptionsToUpgrade, childrenByGroup);\n\n    // setup trimmed data for grouping\n    this.revogrid.addTrimmed({ ...trimmedGroup }, TRIMMED_GROUPING);\n  }\n}\n","import { h, VNode } from '@stencil/core';\nimport { RevoGrid, Selection } from '../../interfaces';\n\ntype Props = { ref: { (e: OrdererService): void } };\n\n/**\n * Draw drag\n */\nexport class OrdererService {\n  private parentY: number = 0;\n  el!: HTMLElement;\n  rgRow!: HTMLElement;\n  text!: HTMLElement;\n  draggable!: HTMLElement;\n\n  start(parent: HTMLElement, { pos, text, event }: { pos: RevoGrid.PositionItem; text: string; event: MouseEvent }): void {\n    const { top } = parent.getBoundingClientRect();\n    this.parentY = top;\n    if (this.text) {\n      this.text.innerText = text;\n    }\n    this.move(pos);\n    this.moveTip({ x: event.x, y: event.y });\n    this.el?.classList.remove('hidden');\n  }\n  end(): void {\n    this.el?.classList.add('hidden');\n  }\n  move(pos: RevoGrid.PositionItem): void {\n    this.moveElement(pos.end - this.parentY);\n  }\n  moveTip({ x, y }: Selection.Cell): void {\n    if (!this.draggable) {\n      return;\n    }\n    this.draggable.style.left = `${x}px`;\n    this.draggable.style.top = `${y}px`;\n  }\n\n  private moveElement(y: number): void {\n    if (!this.rgRow) {\n      return;\n    }\n    this.rgRow.style.transform = `translateY(${y}px)`;\n  }\n}\n\nconst OrderRenderer = ({ ref }: Props): VNode[] => {\n  const service = new OrdererService();\n  ref(service);\n  return (\n    <div class=\"draggable-wrapper hidden\" ref={e => (service.el = e)}>\n      <div class=\"draggable\" ref={el => (service.draggable = el)}>\n        <span class=\"revo-alt-icon\" />\n        <span ref={e => (service.text = e)} />\n      </div>\n      <div class=\"drag-position\" ref={e => (service.rgRow = e)} />\n    </div>\n  );\n};\nexport default OrderRenderer;\n","import { h, VNode } from '@stencil/core';\nimport { RevoGrid } from '../../interfaces';\nimport { DimensionStores } from '../../services/dimension.provider';\nimport { ViewportStores } from '../../services/viewport.provider';\nimport OrderRenderer, { OrdererService } from '../order/orderRenderer';\n\nexport interface ElementScroll {\n  changeScroll?(e: RevoGrid.ViewPortScrollEvent): Promise<RevoGrid.ViewPortScrollEvent>;\n  setScroll(e: RevoGrid.ViewPortScrollEvent): Promise<void>;\n}\n\ntype Props = {\n  viewports: ViewportStores;\n  dimensions: DimensionStores;\n  orderRef(e: OrdererService): void;\n  registerElement(el: ElementScroll | null, key: string): void;\n  onScroll(e: RevoGrid.ViewPortScrollEvent, key?: RevoGrid.DimensionColPin | string): void;\n  nakedClick(e: MouseEvent): void;\n};\n\nexport const RevoViewPort = ({ viewports, dimensions, orderRef, nakedClick, registerElement, onScroll }: Props, children: VNode[]) => {\n  const viewPortClick = (e: MouseEvent, el?: HTMLElement) => {\n    if (el === e.target) {\n      nakedClick(e);\n    }\n  };\n\n  let el: HTMLElement;\n  const typeRow = 'rgRow';\n  const typeCol = 'rgCol';\n  return [\n    <div class=\"main-viewport\" ref={e => (el = e)} onClick={e => viewPortClick(e, el)}>\n      <div class=\"viewports\">\n        {children}\n        <revogr-scroll-virtual\n          class=\"vertical\"\n          dimension={ typeRow }\n          viewportStore={viewports[typeRow].store}\n          dimensionStore={dimensions[typeRow].store}\n          ref={el => registerElement(el, 'rowScroll')}\n          onScrollVirtual={e => onScroll(e.detail)}\n        />\n        <OrderRenderer ref={orderRef} />\n      </div>\n    </div>,\n    <revogr-scroll-virtual\n      class=\"horizontal\"\n      dimension={ typeCol }\n      viewportStore={viewports[typeCol].store}\n      dimensionStore={dimensions[typeCol].store}\n      ref={el => registerElement(el, 'colScroll')}\n      onScrollVirtual={e => onScroll(e.detail)}\n    />,\n  ];\n};\n","import { Observable, RevoGrid, Selection } from '../../interfaces';\nimport DimensionProvider from '../../services/dimension.provider';\nimport SelectionStoreConnector, { EMPTY_INDEX } from '../../services/selection.store.connector';\nimport ViewportProvider from '../../services/viewport.provider';\nimport { DataSourceState, getSourceItem, getVisibleSourceItem } from '../../store/dataSource/data.store';\nimport { columnTypes, rowTypes } from '../../store/storeTypes';\nimport { UUID } from '../../utils/consts';\nimport { OrdererService } from '../order/orderRenderer';\nimport GridScrollingService from './viewport.scrolling.service';\nimport { CONTENT_SLOT, FOOTER_SLOT, getLastCell, HEADER_SLOT } from './viewport.helpers';\nimport { HeaderProperties, SlotType, ViewportColumn, ViewportData, ViewportProps } from './viewport.interfaces';\nimport ColumnDataProvider from '../../services/column.data.provider';\nimport { DataProvider } from '../../services/data.provider';\nimport { reduce } from 'lodash';\n\nexport type ResizeDetails = { [index: number]: RevoGrid.ColumnRegular };\ntype Config = {\n  columnProvider: ColumnDataProvider;\n  dataProvider: DataProvider;\n  dimensionProvider: DimensionProvider;\n  viewportProvider: ViewportProvider;\n  uuid: string | null;\n  scrollingService: GridScrollingService;\n  orderService: OrdererService;\n  selectionStoreConnector: SelectionStoreConnector;\n\n  resize(r: ResizeDetails): void;\n};\n\nexport type FocusedData = {\n  model: any;\n  cell: Selection.Cell;\n  colType: RevoGrid.DimensionCols;\n  rowType: RevoGrid.DimensionRows;\n  column?: RevoGrid.ColumnRegular;\n};\n\nexport default class ViewportService {\n  readonly columns: ViewportProps[];\n  constructor(private sv: Config, contentHeight: number) {\n    this.sv.selectionStoreConnector?.beforeUpdate();\n    this.columns = this.getViewportColumnData(contentHeight);\n    this.sv.scrollingService?.unregister();\n  }\n\n  private onColumnResize(\n    type: RevoGrid.DimensionCols,\n    { detail }: CustomEvent<RevoGrid.ViewSettingSizeProp>,\n    store: Observable<DataSourceState<RevoGrid.ColumnRegular, RevoGrid.DimensionCols>>,\n  ) {\n    this.sv.dimensionProvider?.setCustomSizes(type, detail, true);\n    const changedItems = reduce(\n      detail || {},\n      (r: ResizeDetails, size, i) => {\n        const index = parseInt(i, 10);\n        const item = getSourceItem(store, index);\n        if (item) {\n          r[index] = { ...item, size };\n        }\n        return r;\n      },\n      {},\n    );\n    this.sv.resize(changedItems);\n  }\n\n  /**\n   * Transform data from stores and apply it to different components\n   * Handle columns\n   */\n  private getViewportColumnData(contentHeight: number): ViewportProps[] {\n    const columns: ViewportProps[] = [];\n    let x = 0; // we increase x only if column present\n    columnTypes.forEach(val => {\n      const colStore = this.sv.columnProvider.stores[val].store;\n      // only columns that have data show\n      if (!colStore.get('items').length) {\n        return;\n      }\n      const column: ViewportColumn = {\n        colType: val,\n        position: { x, y: 1 },\n\n        contentHeight,\n        fixWidth: val !== 'rgCol',\n        uuid: `${this.sv.uuid}-${x}`,\n\n        viewports: this.sv.viewportProvider.stores,\n        dimensions: this.sv.dimensionProvider.stores,\n        rowStores: this.sv.dataProvider.stores,\n\n        colStore,\n        onHeaderresize: e => this.onColumnResize(val, e, colStore),\n      };\n      if (val === 'rgCol') {\n        column.onResizeViewport = (e: CustomEvent<RevoGrid.ViewPortResizeEvent>) => this.sv.viewportProvider?.setViewport(e.detail.dimension, { virtualSize: e.detail.size });\n      }\n      const colData = this.gatherColumnData(column);\n      const columnSelectionStore = this.registerCol(colData.position.x, val);\n\n      // render per each column data collections vertically\n      const dataPorts = this.dataViewPort(column).reduce<ViewportData[]>((r, rgRow) => {\n        // register selection store for Segment\n        const segmentSelection = this.registerSegment(rgRow.position);\n        segmentSelection.setLastCell(rgRow.lastCell);\n\n        // register selection store for Row\n        const rowSelectionStore = this.registerRow(rgRow.position.y, rgRow.type);\n        const rowDef: ViewportData = {\n          ...rgRow,\n          rowSelectionStore,\n          segmentSelectionStore: segmentSelection.store,\n          ref: (e: Element) => this.sv.selectionStoreConnector.registerSection(e),\n          onSetRange: e => {\n            segmentSelection.setRangeArea(e.detail);\n          },\n          onSetTempRange: e => {\n            segmentSelection.setTempArea(e.detail);\n          },\n          onFocusCell: e => {\n            // todo: multi focus\n            segmentSelection.clearFocus();\n            this.sv.selectionStoreConnector.focus(segmentSelection, e.detail);\n          },\n        };\n        r.push(rowDef);\n        return r;\n      }, []);\n      columns.push({\n        ...colData,\n        columnSelectionStore,\n        dataPorts,\n      });\n      x++;\n    });\n    return columns;\n  }\n\n  /** register selection store for Segment */\n  private registerSegment(position: Selection.Cell) {\n    return this.sv.selectionStoreConnector.register(position);\n  }\n\n  /** register selection store for Row */\n  private registerRow(y: number, type: RevoGrid.DimensionRows) {\n    return this.sv.selectionStoreConnector.registerRow(y, type).store;\n  }\n\n  /** register selection store for Column */\n  private registerCol(x: number, type: RevoGrid.DimensionCols) {\n    return this.sv.selectionStoreConnector.registerColumn(x, type).store;\n  }\n\n  /** Collect Column data */\n  private gatherColumnData(data: ViewportColumn) {\n    const parent = data.uuid;\n    const realSize = data.dimensions[data.colType].store.get('realSize');\n    const prop: Record<string, any> = {\n      contentWidth: realSize,\n      class: data.colType,\n      [`${UUID}`]: data.uuid,\n      contentHeight: data.contentHeight,\n      key: data.colType,\n      onResizeViewport: data.onResizeViewport,\n    };\n    if (data.fixWidth) {\n      prop.style = { minWidth: `${realSize}px` };\n    }\n    const headerProp: HeaderProperties = {\n      parent,\n      colData: getVisibleSourceItem(data.colStore),\n      dimensionCol: data.dimensions[data.colType].store,\n      groups: data.colStore.get('groups'),\n      groupingDepth: data.colStore.get('groupingDepth'),\n      resizeHandler: data.colType === 'colPinEnd' ? ['l'] : undefined,\n      onHeaderresize: data.onHeaderresize,\n    };\n\n    return {\n      prop,\n      type: data.colType,\n      position: data.position,\n      headerProp,\n      parent,\n      viewportCol: data.viewports[data.colType].store,\n    };\n  }\n\n  /** Collect Row data */\n  private dataViewPort(data: ViewportColumn) {\n    const slots: { [key in RevoGrid.DimensionRows]: SlotType } = {\n      rowPinStart: HEADER_SLOT,\n      rgRow: CONTENT_SLOT,\n      rowPinEnd: FOOTER_SLOT,\n    };\n\n    // y position for selection\n    let y = 0;\n    return rowTypes.reduce((r, type) => {\n      // filter out empty sources, we still need to return source to keep slot working\n      const isPresent = data.viewports[type].store.get('realCount') || type === 'rgRow';\n      const rgCol = {\n        ...data,\n        position: { ...data.position, y: isPresent ? y : EMPTY_INDEX },\n      };\n      r.push(\n        this.dataPartition(\n          rgCol,\n          type,\n          slots[type],\n          type !== 'rgRow', // is fixed\n        ),\n      );\n      if (isPresent) {\n        y++;\n      }\n      return r;\n    }, []);\n  }\n\n  private dataPartition(data: ViewportColumn, type: RevoGrid.DimensionRows, slot: SlotType, fixed?: boolean) {\n    return {\n      colData: data.colStore,\n      viewportCol: data.viewports[data.colType].store,\n      viewportRow: data.viewports[type].store,\n      lastCell: getLastCell(data, type),\n      slot,\n      type,\n      canDrag: !fixed,\n      position: data.position,\n      uuid: `${data.uuid}-${data.position.x}-${data.position.y}`,\n      dataStore: data.rowStores[type].store,\n      dimensionCol: data.dimensions[data.colType].store,\n      dimensionRow: data.dimensions[type].store,\n      style: fixed ? { height: `${data.dimensions[type].store.get('realSize')}px` } : undefined,\n    };\n  }\n\n  scrollToCell(cell: Partial<Selection.Cell>) {\n    for (let key in cell) {\n      const coordinate = cell[key as keyof Selection.Cell];\n      this.sv.scrollingService.scrollService({ dimension: key === 'x' ? 'rgCol' : 'rgRow', coordinate });\n    }\n  }\n\n  /**\n   * Clear current grid focus\n   */\n  clearFocused() {\n    this.sv.selectionStoreConnector.clearAll();\n  }\n\n  clearEdit() {\n    this.sv.selectionStoreConnector.setEdit(false);\n  }\n\n  /**\n   * Collect focused element data\n   */\n  getFocused(): FocusedData | null {\n    const focused = this.sv.selectionStoreConnector.focusedStore;\n    if (!focused) {\n      return null;\n    }\n    // get column data\n    const colType = this.sv.selectionStoreConnector.storesXToType[focused.position.x];\n    const column = this.sv.columnProvider.getColumn(focused.cell.x, colType);\n\n    // get row data\n    const rowType = this.sv.selectionStoreConnector.storesYToType[focused.position.y];\n    const model = this.sv.dataProvider.getModel(focused.cell.y, rowType);\n    return {\n      column,\n      model,\n      cell: focused.cell,\n      colType,\n      rowType,\n    };\n  }\n\n  getStoreCoordinateByType(colType: RevoGrid.DimensionCols, rowType: RevoGrid.DimensionRows) {\n    const stores = this.sv.selectionStoreConnector.storesByType;\n    const storeCoordinate = {\n      x: stores[colType],\n      y: stores[rowType],\n    };\n    return storeCoordinate;\n  }\n\n  setFocus(colType: string, rowType: string, start: Selection.Cell, end: Selection.Cell) {\n    this.sv.selectionStoreConnector?.focusByCell(\n      this.getStoreCoordinateByType(\n        colType as RevoGrid.DimensionCols,\n        rowType as RevoGrid.DimensionRows\n      ), start, end);\n  }\n\n  getSelectedRange(): Selection.RangeArea | null {\n    return this.sv.selectionStoreConnector.selectedRange;\n  }\n\n  setEdit(rowIndex: number, colIndex: number, colType: RevoGrid.DimensionCols, rowType: RevoGrid.DimensionRows) {\n    this.sv.selectionStoreConnector?.setEditByCell(this.getStoreCoordinateByType(colType, rowType), { x: colIndex, y: rowIndex });\n  }\n}\n","export function isMobileDevice() {\n    return /Mobi/i.test(navigator.userAgent) || /Android/i.test(navigator.userAgent) || navigator.maxTouchPoints > 0;\n}\n","import { h, VNode } from '@stencil/core';\nimport { Edition, RevoGrid } from '../../interfaces';\nimport { UUID } from '../../utils/consts';\nimport { ElementScroll } from './viewport';\nimport { DATA_SLOT, HEADER_SLOT } from './viewport.helpers';\nimport { ViewportProps } from './viewport.interfaces';\nimport { isMobileDevice } from '../../utils/mobile';\ntype Props = {\n  editors: Edition.Editors;\n  useClipboard: boolean;\n  applyEditorChangesOnClose: boolean;\n  readonly: boolean;\n  range: boolean;\n  rowClass: string;\n  resize: boolean;\n  columns: ViewportProps[];\n  columnFilter: boolean;\n  additionalData: any;\n  focusTemplate: RevoGrid.FocusTemplateFunc;\n  scrollSection(\n    e: RevoGrid.ViewPortScrollEvent,\n    key?: RevoGrid.DimensionColPin | string,\n  ): void;\n  scrollSectionSilent(\n    e: RevoGrid.ViewPortScrollEvent,\n    key?: RevoGrid.DimensionColPin | string,\n  ): void;\n  onCancelEdit(): void;\n  onEdit(edit: Edition.BeforeEdit): void;\n  onSelectAll(): void;\n  registerElement(el: ElementScroll | null, key: string): void;\n};\n/**\n * The code renders a view port divided into sections.\n * It starts by rendering the pinned start, data, and pinned end sections.\n * Within each section, it renders columns along with their headers, pinned top, center data, and pinned bottom.\n * The code iterates over the columns and their data to generate the view port's HTML structure.\n * Finally, the rendered sections are returned as the result.\n */\nexport const ViewPortSections = ({\n  resize,\n  editors,\n  rowClass,\n  readonly,\n  range,\n  columns,\n  useClipboard,\n  columnFilter,\n  applyEditorChangesOnClose,\n  additionalData,\n  onCancelEdit,\n  registerElement,\n  onEdit,\n  scrollSection,\n  focusTemplate,\n  onSelectAll,\n  scrollSectionSilent,\n}: Props) => {\n  const isMobile = isMobileDevice();\n  const viewPortHtml: VNode[] = [];\n  /** render viewports columns */\n  for (let view of columns) {\n    /** render viewports rows */\n    const headerProperties = {\n      ...view.headerProp,\n      type: view.type,\n      additionalData,\n      viewportCol: view.viewportCol,\n      selectionStore: view.columnSelectionStore,\n      canResize: resize,\n      columnFilter,\n    };\n    const dataViews: HTMLElement[] = [\n      <revogr-header {...headerProperties} slot={HEADER_SLOT} />,\n    ];\n    view.dataPorts.forEach((data, j) => {\n      const key = view.prop.key + (j + 1);\n\n      const dataView = (\n        <revogr-overlay-selection\n          {...data}\n          isMobileDevice={isMobile}\n          selectionStore={data.segmentSelectionStore}\n          onSelectall={() => onSelectAll()}\n          editors={editors}\n          readonly={readonly}\n          range={range}\n          useClipboard={useClipboard}\n          onCancelEdit={() => onCancelEdit()}\n          applyChangesOnClose={applyEditorChangesOnClose}\n          onSetEdit={({ detail }) => onEdit(detail)}\n          additionalData={additionalData}\n          slot={data.slot}\n        >\n          <revogr-data\n            {...data}\n            {...{ [UUID]: data.uuid }}\n            key={key}\n            readonly={readonly}\n            range={range}\n            rowClass={rowClass}\n            rowSelectionStore={data.rowSelectionStore}\n            additionalData={additionalData}\n            slot={DATA_SLOT}\n          >\n            <slot name={`data-${view.type}-${data.type}`} />\n          </revogr-data>\n          <revogr-temp-range\n            selectionStore={data.segmentSelectionStore}\n            dimensionRow={data.dimensionRow}\n            dimensionCol={data.dimensionCol}\n          />\n          <revogr-focus\n            colData={data.colData}\n            dataStore={data.dataStore}\n            focusTemplate={focusTemplate}\n            rowType={data.type}\n            colType={view.type}\n            selectionStore={data.segmentSelectionStore}\n            dimensionRow={data.dimensionRow}\n            dimensionCol={data.dimensionCol}\n          >\n            <slot name={`focus-${view.type}-${data.type}`} />\n          </revogr-focus>\n        </revogr-overlay-selection>\n      );\n      dataViews.push(dataView);\n    });\n    viewPortHtml.push(\n      <revogr-viewport-scroll\n        {...view.prop}\n        ref={el => registerElement(el, view.prop.key)}\n        onScrollViewport={e => scrollSection(e.detail, view.prop.key)}\n        onSilentScroll={e => scrollSectionSilent(e.detail, view.prop.key)}\n      >\n        {dataViews}\n      </revogr-viewport-scroll>,\n    );\n  }\n  return viewPortHtml;\n};\n","import { RevoGrid } from '../../interfaces';\nimport { columnTypes } from '../../store/storeTypes';\n\nexport interface ElementScroll {\n  changeScroll?(e: RevoGrid.ViewPortScrollEvent, silent?: boolean): Promise<RevoGrid.ViewPortScrollEvent>;\n  setScroll(e: RevoGrid.ViewPortScrollEvent): Promise<void>;\n}\nexport type ElementsScroll = { [key: string]: ElementScroll[] };\nexport default class GridScrollingService {\n  private elements: ElementsScroll = {};\n  constructor(private setViewport: (e: RevoGrid.ViewPortScrollEvent) => void) {}\n\n  async scrollService(e: RevoGrid.ViewPortScrollEvent, key?: RevoGrid.DimensionColPin | string) {\n    let newEvent: Promise<RevoGrid.ViewPortScrollEvent>;\n    let event = e;\n    for (let elKey in this.elements) {\n      if (e.dimension === 'rgCol' && elKey === 'headerRow') {\n        continue;\n      // pinned column only\n      } else if (this.isPinnedColumn(key) && e.dimension === 'rgCol') {\n        if (elKey === key || !e.delta) {\n          continue;\n        }\n        for (let el of this.elements[elKey]) {\n          if (el.changeScroll) {\n            newEvent = el.changeScroll(e);\n          }\n        }\n      } else {\n        for (let el of this.elements[elKey]) {\n          await el.setScroll(e);\n        }\n      }\n    }\n    if (newEvent) {\n      event = await newEvent;\n    }\n    this.setViewport(event);\n  }\n\n  /**\n   * Silent scroll update for mobile devices when we have negative scroll top \n   */\n  async scrollSilentService(e: RevoGrid.ViewPortScrollEvent, key?: RevoGrid.DimensionColPin | string) {\n    for (let elKey in this.elements) {\n      // skip same element update\n      if (elKey === key) {\n        continue;\n      }\n      if (columnTypes.includes(key as RevoGrid.DimensionColPin) && (elKey === 'headerRow' || columnTypes.includes(elKey  as RevoGrid.DimensionColPin))) {\n        for (let el of this.elements[elKey]) {\n          await el.changeScroll?.(e, true);\n        }\n        continue;\n      }\n    }\n  }\n\n  private isPinnedColumn(key?: RevoGrid.DimensionColPin | string): key is RevoGrid.DimensionColPin {\n    return ['colPinStart', 'colPinEnd'].indexOf(key) > -1;\n  }\n\n  registerElements(els: ElementsScroll): void {\n    this.elements = els;\n  }\n\n  /**\n   * Register new element for farther scroll support\n   * @param el - can be null if holder removed\n   * @param key - element key\n   */\n  registerElement(el: ElementScroll | null, key: string): void {\n    if (!this.elements[key]) {\n      this.elements[key] = [];\n    }\n    // new element added\n    if (el) {\n      this.elements[key].push(el);\n    } else if (this.elements[key]) {\n      // element removed\n      delete this.elements[key];\n    }\n  }\n\n  unregister(): void {\n    delete this.elements;\n    this.elements = {};\n  }\n}\n","import { each } from 'lodash';\nimport { calculateRowHeaderSize } from '../utils/row-header-utils';\nimport { RevoGrid, RevoPlugin } from '../interfaces';\nimport ColumnDataProvider, { ColumnCollection } from '../services/column.data.provider';\nimport { DataProvider } from '../services/data.provider';\nimport DimensionProvider, { ColumnItems } from '../services/dimension.provider';\nimport { getScrollbarWidth } from '../utils';\nimport BasePlugin from './basePlugin';\ntype Providers = {\n  dataProvider: DataProvider;\n  dimensionProvider: DimensionProvider;\n  columnProvider: ColumnDataProvider;\n};\n/**\n * This plugin serves to recalculate columns initially\n * Base on empty space if there is any\n * Currently plugin supports only increasing last column\n */\ntype ScrollChange = {\n  type: RevoGrid.DimensionType;\n  hasScroll: boolean;\n};\ntype StretchedData = {\n  initialSize: number;\n  size: number;\n  index: number;\n};\n\nexport default class StretchColumn extends BasePlugin {\n  private stretchedColumn: StretchedData | null = null;\n  private readonly scrollSize;\n  constructor(revogrid: HTMLRevoGridElement, protected providers: Providers) {\n    super(revogrid);\n\n    // calculate scroll bar size for current user session\n    this.scrollSize = getScrollbarWidth(document);\n\n    // subscribe to column changes\n    const beforecolumnapplied = ({ detail: { columns } }: CustomEvent<ColumnCollection>) => this.applyStretch(columns);\n    this.addEventListener('beforecolumnapplied', beforecolumnapplied);\n  }\n\n  private setScroll({ type, hasScroll }: ScrollChange) {\n    if (type === 'rgRow' && this.stretchedColumn && this.stretchedColumn?.initialSize === this.stretchedColumn.size) {\n      if (hasScroll) {\n        this.stretchedColumn.size -= this.scrollSize;\n        this.apply();\n        this.dropChanges();\n      }\n    }\n  }\n\n  private activateChanges() {\n    const setScroll = ({ detail }: CustomEvent<ScrollChange>) => this.setScroll(detail);\n    this.addEventListener('scrollchange', setScroll);\n  }\n\n  private dropChanges() {\n    this.stretchedColumn = null;\n    this.removeEventListener('scrollchange');\n  }\n\n  private apply() {\n    if (!this.stretchedColumn) {\n      return;\n    }\n    const type: RevoGrid.DimensionCols = 'rgCol';\n    const sizes = this.providers.dimensionProvider.stores[type].store.get('sizes');\n    this.providers.dimensionProvider.setCustomSizes(\n      type,\n      {\n        ...sizes,\n        [this.stretchedColumn.index]: this.stretchedColumn.size\n      }, true\n    );\n  }\n\n  /**\n   * Apply stretch changes\n   */\n  applyStretch(columns: ColumnItems) {\n    // unsubscribe from all events\n    this.dropChanges();\n    // calculate grid size\n    let sizeDifference = this.revogrid.clientWidth - 1;\n    each(columns, (_, type: RevoGrid.DimensionCols) => {\n      const realSize = this.providers.dimensionProvider.stores[type].store.get('realSize');\n      sizeDifference -= realSize;\n    });\n    if (this.revogrid.rowHeaders) {\n      const itemsLength = this.providers.dataProvider.stores.rgRow.store.get('source').length;\n      const header = this.revogrid.rowHeaders;\n      const rowHeaderSize = calculateRowHeaderSize(itemsLength, typeof header === 'object' ? header : undefined);\n      if (rowHeaderSize) {\n        sizeDifference -= rowHeaderSize;\n      }\n    }\n    if (sizeDifference > 0) {\n      // currently plugin accepts last column only\n      const index = columns.rgCol.length - 1;\n      const last = columns.rgCol[index];\n      /**\n       * has column\n       * no auto size applied\n       * size for column shouldn't be defined\n       */\n      const colSize = last?.size || this.revogrid.colSize || 0;\n      const size = sizeDifference + colSize - 1;\n\n      if (last && !last.autoSize && colSize < size) {\n        this.stretchedColumn = {\n          initialSize: size,\n          index,\n          size,\n        };\n        this.apply();\n        this.activateChanges();\n      }\n    }\n  }\n}\n\n/**\n * Check plugin type is Stretch\n */\nexport function isStretchPlugin(plugin: RevoPlugin.Plugin | StretchColumn): plugin is StretchColumn {\n  return !!(plugin as StretchColumn).applyStretch;\n}\n","import { RevoGrid } from '../../interfaces';\nimport reduce from 'lodash/reduce';\ntype Result = Partial<{\n  [T in RevoGrid.DimensionRows]: { sizes?: Record<number, number>; };\n}>;\ntype RemoveResult = Partial<{\n  [T in RevoGrid.DimensionRows]: number[];\n}>;\nexport const rowDefinitionByType = (newVal: RevoGrid.RowDefinition[] = []) => {\n  return reduce(newVal, (r: Result, v) => {\n      if (!r[v.type]) {\n        r[v.type] = {};\n      }\n      if (v.size) {\n        if (!r[v.type].sizes) {\n          r[v.type].sizes = {};\n        }\n        r[v.type].sizes[v.index] = v.size;\n      }\n      return r;\n    },\n    {},\n  );\n};\n\nexport const rowDefinitionRemoveByType = (oldVal: RevoGrid.RowDefinition[] = []) => {\n  return reduce(oldVal, (r: RemoveResult, v) => {\n      if (!r[v.type]) {\n        r[v.type] = [];\n      }\n      if (v.size) {\n        r[v.type].push(v.index);\n      }\n      return r;\n    },\n    {},\n  );\n};\n","import { h } from '@stencil/core';\n\nconst COLUMN_DRAG_CLASS = 'column-drag-start';\n\nexport class ColumnOrderHandler {\n  private element?: HTMLDivElement;\n  private autoscrollEl?: HTMLElement;\n  private offset = 0;\n\n  renderAutoscroll(_: MouseEvent, parent: HTMLElement | null) {\n    if (!parent) {\n      return;\n    }\n    this.autoscrollEl = document.createElement('div');\n    this.autoscrollEl.classList.add('drag-auto-scroll-y');\n    parent.appendChild(this.autoscrollEl);\n  }\n\n  autoscroll(pos: number, dataContainerSize: number, direction = 'translateX') {\n    if (!this.autoscrollEl) {\n      return;\n    }\n    const helperOffset = 10;\n    // calculate current y position inside of the grid active holder\n    // 3 - size of element + border\n    const maxScroll = Math.min(pos + helperOffset, dataContainerSize - 3);\n\n    this.autoscrollEl.style.transform = `${direction}(${maxScroll}px)`;\n    this.autoscrollEl.scrollIntoView({\n      block: 'nearest',\n      inline: 'nearest',\n    });\n  }\n\n  start(e: MouseEvent, { dataEl, gridRect, scrollEl, gridEl }: {\n    dataEl: HTMLElement;\n    gridRect: DOMRect;\n    scrollEl: Element;\n    gridEl: Element;\n  }, dir: 'top' | 'left'  = 'left') {\n    gridEl.classList.add(COLUMN_DRAG_CLASS);\n    const scrollContainerRect = scrollEl.getBoundingClientRect();\n    if (scrollContainerRect) {\n      this.offset = scrollContainerRect[dir] - gridRect[dir];\n    }\n    this.renderAutoscroll(e, dataEl);\n  }\n\n  stop(gridEl: Element) {\n    gridEl.classList.remove(COLUMN_DRAG_CLASS);\n    if (this.element) {\n      this.element.hidden = true;\n    }\n    this.offset = 0;\n    this.autoscrollEl?.remove();\n    this.autoscrollEl = undefined;\n  }\n\n  showHandler(pos: number, size: number, direction = 'translateX') {\n    if (!this.element) {\n      return;\n    }\n    // do not allow overcross top of the scrollable area, header excluded\n    if (this.offset) {\n      pos = Math.max(pos, this.offset);\n    }\n    // can not be bigger then grid end\n    pos = Math.min(pos, size);\n    this.element.style.transform = `${direction}(${pos}px)`;\n    this.element.hidden = false;\n  }\n\n  render() {\n    return <div class=\"drag-position-y\" hidden ref={(el?: HTMLDivElement) => (this.element = el)}></div>;\n  }\n}\n","/**\n * Plugin for column manual move\n */\nimport debounce from 'lodash/debounce';\nimport each from 'lodash/each';\nimport { RevoGrid } from '../../interfaces';\nimport ColumnDataProvider from '../../services/column.data.provider';\nimport { DataProvider } from '../../services/data.provider';\nimport DimensionProvider from '../../services/dimension.provider';\nimport SelectionStoreConnector from '../../services/selection.store.connector';\nimport ViewportProvider from '../../services/viewport.provider';\nimport { getItemByPosition } from '../../store/dimension/dimension.helpers';\nimport BasePlugin from '../basePlugin';\nimport { ColumnOrderHandler } from './columnOrderHandler';\nimport { dispatch } from '../dispatcher';\nimport { isColGrouping } from '../groupingColumn/grouping.col.plugin';\n\nconst COLUMN_CLICK = 'column-click';\nconst MOVE = 'column-mouse-move';\nconst DRAG_END = 'column-drag-end';\nconst BEFORE_DRAG_END = 'before-column-drag-end';\n\n// use this event subscription to drop D&D for particular columns\nconst DRAG_START = 'column-drag-start';\n\nexport type DragStartEventDetails = {\n  event: MouseEvent;\n  data: RevoGrid.ColumnDataSchema;\n};\n\nexport type Providers = {\n  data: DataProvider;\n  dimension: DimensionProvider;\n  selection: SelectionStoreConnector;\n  column: ColumnDataProvider;\n  viewport: ViewportProvider;\n};\ntype StaticData = {\n  startPos: number;\n  startItem: RevoGrid.PositionItem;\n  data: RevoGrid.ColumnRegular;\n  dataEl: HTMLElement;\n  scrollEl: Element;\n  gridEl: HTMLElement;\n  cols: RevoGrid.DimensionSettingsState;\n};\n\ntype LocalSubscriptions = Record<string, LocalSubscription>;\ntype LocalSubscription = {\n  target: Element | Document;\n  callback(...params: any[]): void;\n};\nexport type EventData = {\n  elRect: DOMRect;\n  gridRect: DOMRect;\n  scrollOffset: number;\n  type: RevoGrid.DimensionCols;\n};\nexport default class ColumnPlugin extends BasePlugin {\n  private moveFunc = debounce((e: MouseEvent) => this.doMove(e), 5);\n  private staticDragData: StaticData | null = null;\n  private dragData: EventData | null = null;\n  private readonly orderUi: ColumnOrderHandler;\n  protected readonly localSubscriptions: LocalSubscriptions = {};\n  constructor(protected revogrid: HTMLRevoGridElement, private providers: Providers) {\n    super(revogrid);\n    this.orderUi = new ColumnOrderHandler();\n    revogrid.registerVNode([this.orderUi.render()]);\n\n    revogrid.classList.add('column-draggable');\n\n    /** Register events */\n    this.localSubscriptions['mouseleave'] = {\n      target: document,\n      callback: (e: MouseEvent) => this.onMouseOut(e),\n    };\n    this.localSubscriptions['mouseup'] = {\n      target: document,\n      callback: (e: MouseEvent) => this.onMouseUp(e),\n    };\n\n    this.localSubscriptions['mousemove'] = {\n      target: document,\n      callback: (e: MouseEvent) => this.move(e),\n    };\n\n    this.addEventListener(COLUMN_CLICK, ({ detail }) => this.dragStart(detail));\n  }\n\n  dragStart({ event, data }: DragStartEventDetails) {\n    if (event.defaultPrevented) {\n      return;\n    }\n    const { defaultPrevented } = dispatch(this.revogrid, DRAG_START, data);\n    // check if allowed to drag particulat column\n    if (defaultPrevented) {\n      return;\n    }\n    this.clearOrder();\n    const { mouseleave, mouseup, mousemove } = this.localSubscriptions;\n    mouseleave.target.addEventListener('mouseleave', mouseleave.callback);\n    mouseup.target.addEventListener('mouseup', mouseup.callback);\n\n    const dataEl = (event.target as HTMLElement).closest('revogr-header');\n    const scrollEl = (event.target as HTMLElement).closest('revogr-viewport-scroll');\n    if (!dataEl || !scrollEl) {\n      return;\n    }\n\n    if (isColGrouping(data)) {\n      return;\n    }\n\n    const cols = this.getDimension(data.pin || 'rgCol');\n    const gridRect = this.revogrid.getBoundingClientRect();\n    const elRect = dataEl.getBoundingClientRect();\n    const startItem = getItemByPosition(\n      cols,\n      getLeftRelative(event.x, gridRect.left, elRect.left - gridRect.left));\n  \n    this.staticDragData = {\n      startPos: event.x,\n      startItem,\n      data,\n      dataEl,\n      scrollEl,\n      gridEl: this.revogrid,\n      cols,\n    };\n    this.dragData = this.getData(this.staticDragData);\n    mousemove.target.addEventListener('mousemove', mousemove.callback);\n    this.orderUi.start(event, {\n      ...this.dragData,\n      ...this.staticDragData,\n    });\n  }\n\n  doMove(e: MouseEvent) {\n    if (!this.staticDragData) {\n      return;\n    }\n\n    const dragData = (this.dragData = this.getData(this.staticDragData));\n    if (!dragData) {\n      return;\n    }\n    const start = this.staticDragData.startPos;\n    if (Math.abs(start - e.x) > 10) {\n      const x = getLeftRelative(e.x, this.dragData.gridRect.left, this.dragData.scrollOffset);\n      const rgCol = getItemByPosition(this.staticDragData.cols, x);\n      this.orderUi.autoscroll(x, dragData.elRect.width);\n      this.orderUi.showHandler(\n        rgCol.end + dragData.scrollOffset,\n        dragData.gridRect.width\n      );\n    }\n  }\n\n  move(e: MouseEvent): void {\n    dispatch(this.revogrid, MOVE, e);\n    // then do move\n    this.moveFunc(e);\n  }\n  onMouseOut(_: MouseEvent) {\n    this.clearOrder();\n  }\n  onMouseUp(e: MouseEvent) {\n    // apply new positions\n    if (this.dragData) {\n      let relativePos = getLeftRelative(e.x, this.dragData.gridRect.left, this.dragData.scrollOffset);\n      if (relativePos < 0) {\n        relativePos = 0;\n      }\n      const newPosition = getItemByPosition(this.staticDragData.cols, relativePos);\n\n      const store = this.providers.column.stores[this.dragData.type].store;\n      const items = [...store.get('items')];\n\n      // prevent position change if needed\n      const { defaultPrevented: stopDrag } = dispatch(this.revogrid, BEFORE_DRAG_END, {\n        ...this.staticDragData,\n        startPosition: this.staticDragData.startItem,\n        newPosition,\n        newItem: store.get('source')[items[this.staticDragData.startItem.itemIndex]]\n      });\n      if (!stopDrag) {\n        // todo: if move item out of group remove item from group\n        const toMove = items.splice(this.staticDragData.startItem.itemIndex, 1);\n        items.splice(newPosition.itemIndex, 0, ...toMove);\n        store.set('items', items);\n      }\n      dispatch(this.revogrid, DRAG_END, this.dragData);\n    }\n    this.clearOrder();\n  }\n\n  private clearLocalSubscriptions() {\n    each(this.localSubscriptions, ({ target, callback }, key) => target.removeEventListener(key, callback));\n  }\n\n  clearOrder() {\n    this.staticDragData = null;\n    this.dragData = null;\n    this.clearLocalSubscriptions();\n    this.orderUi.stop(this.revogrid);\n  }\n  /**\n   * Clearing subscription\n   */\n  protected clearSubscriptions() {\n    super.clearSubscriptions();\n    this.clearLocalSubscriptions();\n  }\n\n  private getData({\n    gridEl,\n    dataEl,\n    data,\n  }: StaticData): EventData {\n    const gridRect = gridEl.getBoundingClientRect();\n    const elRect = dataEl.getBoundingClientRect();\n    const scrollOffset = elRect.left - gridRect.left;\n    return {\n      elRect,\n      gridRect,\n      type: data.pin || 'rgCol',\n      scrollOffset,\n    };\n  }\n  private getDimension(type: RevoGrid.MultiDimensionType) {\n    return this.providers.dimension.stores[type].getCurrentState();\n  }\n}\n\nexport function getLeftRelative(\n  absoluteX: number,\n  gridPos: number,\n  offset: number\n): number {\n  return absoluteX - gridPos - offset;\n}\n","@import './styles/revo-grid.mixin.scss';\n@import './styles/revo-grid.default.scss';\n@import './styles/revo-grid.material.scss';\n@import './styles/revo-grid.dark.material.scss';\n@import './styles/revo-grid.dark.compact.scss';\n@import './styles/revo-grid.compact.scss';\n\nrevo-grid {\n  display: block;\n  height: 100%;\n  font-family: Helvetica, Arial, Sans-Serif, serif;\n  font-size: 14px;\n  position: relative;\n\n  @include noSelect;\n\n  &.column-draggable.column-drag-start {\n    &, * {\n      &:hover {\n        cursor: grabbing;\n      }\n    }\n  }\n\n  .footer-wrapper,\n  .header-wrapper {\n    width: 100%;\n\n    revogr-data {\n      z-index: 3;\n    }\n  }\n\n  revo-dropdown {\n    width: 100%;\n\n    .rv-dr-root {\n      max-height: 100%;\n    }\n    &.shrink label {\n      opacity: 0;\n    }\n  }\n\n  .viewports {\n    max-height: 100%;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    max-width: 100%;\n  }\n\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n\n  .main-viewport {\n    flex-grow: 1;\n    height: 0;\n    display: flex;\n    flex-direction: row;\n  }\n\n  .draggable {\n    $s: 30px;\n    position: fixed;\n    height: $s;\n    line-height: $s;\n    background: #fff;\n    border-radius: 3px;\n    display: block;\n    z-index: 100;\n    margin-top: 5px;\n    margin-right: -20px;\n    box-shadow: 0 4px 20px 0 rgba(black, 0.15);\n    padding-left: 20px;\n    padding-right: 5px;\n\n    &.hidden {\n      display: none;\n    }\n\n    .revo-alt-icon {\n      $alt-icon-color: black;\n      background-color: $alt-icon-color;\n      position: absolute;\n      left: 5px;\n      top: 10px;\n    }\n  }\n\n  .draggable-wrapper {\n    &.hidden {\n      display: none;\n    }\n  }\n\n  .drag-position {\n    position: absolute;\n    left: 0;\n    right: 0;\n    height: 1px;\n    z-index: 2;\n    background: gray;\n    pointer-events: none;\n  }\n\n  .drag-position-y {\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    z-index: 2;\n    background: gray;\n    pointer-events: none;\n  }\n\n  .drag-auto-scroll-y {\n    pointer-events: none;\n    position: absolute;\n    left: 0;\n    top: 0;\n    height: 50px;\n    width: 1px;\n  }\n\n  .clipboard {\n    position: absolute;\n    left: 0;\n    top: 0;\n  }\n\n  revogr-scroll-virtual {\n    position: relative;\n    &.vertical,\n    &.horizontal {\n      z-index: 3;\n    }\n  }\n}\n","import { Component, Prop, h, Watch, Element, Listen, Event, EventEmitter, Method, VNode, State, Host } from '@stencil/core';\nimport each from 'lodash/each';\n\nimport ColumnDataProvider, { ColumnCollection } from '../../services/column.data.provider';\nimport { DataProvider } from '../../services/data.provider';\nimport { getVisibleSourceItem } from '../../store/dataSource/data.store';\nimport DimensionProvider, { DimensionConfig } from '../../services/dimension.provider';\nimport ViewportProvider from '../../services/viewport.provider';\nimport { Edition, Selection, RevoGrid, ThemeSpace, RevoPlugin } from '../../interfaces';\nimport ThemeService from '../../themeManager/themeService';\nimport { timeout } from '../../utils';\nimport AutoSize, { AutoSizeColumnConfig } from '../../plugins/autoSizeColumn';\nimport { columnTypes as columnDimensions, rowTypes as rowDimensions } from '../../store/storeTypes';\nimport FilterPlugin, { ColumnFilterConfig, FilterCollection } from '../../plugins/filter/filter.plugin';\nimport SortingPlugin from '../../plugins/sorting/sorting.plugin';\nimport ExportFilePlugin from '../../plugins/export/export.plugin';\nimport { DataInput } from '../../plugins/export/types';\nimport GroupingRowPlugin from '../../plugins/groupingRow/grouping.row.plugin';\nimport { GroupingOptions } from '../../plugins/groupingRow/grouping.row.types';\nimport { ColumnSource, RowSource } from '../data/columnService';\nimport { RevoViewPort } from './viewport';\nimport ViewportService, { FocusedData } from './viewport.service';\nimport { ViewPortSections } from './viewport.section';\nimport GridScrollingService from './viewport.scrolling.service';\nimport { UUID } from '../../utils/consts';\nimport SelectionStoreConnector from '../../services/selection.store.connector';\nimport { OrdererService } from '../order/orderRenderer';\nimport StretchColumn, { isStretchPlugin } from '../../plugins/stretchPlugin';\nimport { rowDefinitionByType, rowDefinitionRemoveByType } from './grid.helpers';\nimport ColumnPlugin from '../../plugins/moveColumn/columnDragPlugin';\nimport { getFromEvent } from '../../utils/events';\n\n/**\n * Slots\n * @slot data-{column-type}-{row-type}. @example data-rgCol-rgRow - main data slot\n * @slot focus-${view.type}-${data.type}. @example focus-rgCol-rgRow - focus layer for main data\n */\n@Component({\n  tag: 'revo-grid',\n  styleUrl: 'revo-grid-style.scss',\n})\nexport class RevoGridComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /** Excel like show rgRow indexe per rgRow */\n  @Prop() rowHeaders: RevoGrid.RowHeaders | boolean;\n  /**\n   * Defines how many rows/columns should be rendered outside visible area.\n   */\n  @Prop() frameSize: number = 1;\n  /**\n   * Indicates default rgRow size.\n   * By default 0, means theme package size will be applied\n   */\n  @Prop() rowSize: number = 0;\n  /** Indicates default column size. */\n  @Prop() colSize: number = 100;\n  /** When true, user can range selection. */\n  @Prop() range: boolean = false;\n  /** When true, grid in read only mode. */\n  @Prop() readonly: boolean = false;\n  /** When true, columns are resizable. */\n  @Prop() resize: boolean = false;\n  /** When true cell focus appear. */\n  @Prop() canFocus: boolean = true;\n  /** When true enable clipboard. */\n  @Prop() useClipboard: boolean = true;\n  /**\n   * Columns - defines an array of grid columns.\n   * Can be column or grouped column.\n   */\n  @Prop() columns: (RevoGrid.ColumnRegular | RevoGrid.ColumnGrouping)[] = [];\n  /**\n   * Source - defines main data source.\n   * Can be an Object or 2 dimensional array([][]);\n   * Keys/indexes referenced from columns Prop\n   */\n  @Prop() source: RevoGrid.DataType[] = [];\n  /** Pinned top Source: {[T in ColumnProp]: any} - defines pinned top rows data source. */\n  @Prop() pinnedTopSource: RevoGrid.DataType[] = [];\n  /** Pinned bottom Source: {[T in ColumnProp]: any} - defines pinned bottom rows data source. */\n  @Prop() pinnedBottomSource: RevoGrid.DataType[] = [];\n  /** Row properies applied */\n  @Prop() rowDefinitions: RevoGrid.RowDefinition[] = [];\n\n  /** Custom editors register */\n  @Prop() editors: Edition.Editors = {};\n\n  /**\n   * Apply changes typed in editor on editor close except Escape cases\n   * If custom editor in use @method getValue required\n   * Check interfaces.d.ts @EditorBase for more info\n   */\n  @Prop() applyOnClose = false;\n\n  /**\n   * Custom grid plugins\n   * Has to be predefined during first grid init\n   * Every plugin should be inherited from BasePlugin\n   */\n  @Prop() plugins: RevoPlugin.PluginClass[];\n\n  /** Column Types Format\n   *  Every type represent multiple column properties\n   *  Types will be merged but can be replaced with column properties\n   *  Types were made as separate objects to be reusable per multiple columns\n   */\n  @Prop() columnTypes: { [name: string]: RevoGrid.ColumnType } = {};\n\n  /** Theme name */\n  @Prop({ reflect: true, mutable: true }) theme: ThemeSpace.Theme = 'default';\n\n  /**\n   * Row class property\n   * Define this property in rgRow object and this will be mapped as rgRow class\n   */\n  @Prop({ reflect: true }) rowClass: string = '';\n\n  /**\n   * Autosize config\n   * Enable columns autoSize, for more details check @autoSizeColumn plugin\n   * By default disabled, hence operation is not resource efficient\n   * true to enable with default params (double header separator click for autosize)\n   * or provide config\n   */\n  @Prop() autoSizeColumn: boolean | AutoSizeColumnConfig = false;\n\n  /**\n   * Enables filter plugin\n   * Can be boolean\n   * Can be filter collection\n   */\n  @Prop() filter: boolean | ColumnFilterConfig = false;\n\n\n  /**\n   * Apply changes typed in editor on editor close except Escape cases\n   * If custom editor in use @method getValue required\n   * Check interfaces.d.ts @EditorBase for more info\n   */\n   @Prop() focusTemplate: RevoGrid.FocusTemplateFunc;\n\n  /**\n   * Enables column move plugin\n   * Can be boolean\n   */\n   @Prop() canMoveColumns: boolean = false;\n  /**\n   * Trimmed rows\n   * Functionality which allows to hide rows from main data set\n   * @trimmedRows are physical rgRow indexes to hide\n   */\n  @Prop() trimmedRows: Record<number, boolean> = {};\n\n  /**\n   * Enables export plugin\n   * Can be boolean\n   * Can be export options\n   */\n  @Prop() exporting = false;\n\n  /**\n   * Group models by provided properties\n   * Define properties to be groped by\n   */\n  @Prop() grouping: GroupingOptions;\n\n  /**\n   * Defines stretch strategy for columns with @StretchColumn plugin\n   * if there are more space on the right last column size would be increased\n   */\n  @Prop() stretch: boolean | string = true;\n\n\n  /**\n   * Additional data to be passed to plugins\n   */\n  @Prop() additionalData: any = {};\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * contentsizechanged event.\n   * Triggered when new content size applied.\n   * Not including header size\n   * Event is not returning size\n   * To get actual size use getContentSize after event triggered\n   */\n  @Event() contentsizechanged: EventEmitter<RevoGrid.MultiDimensionType>;\n  /**\n   * Before edit event.\n   * Triggered before edit data applied.\n   * Use e.preventDefault() to prevent edit data set and use you own.\n   * Use e.val = {your value} to replace edit result with your own.\n   */\n  @Event() beforeedit: EventEmitter<Edition.BeforeSaveDataDetails>;\n\n  /**\n   * Before range edit event.\n   * Triggered before range data applied, when range selection happened.\n   * Use e.preventDefault() to prevent edit data set and use you own.\n   */\n  @Event() beforerangeedit: EventEmitter<Edition.BeforeRangeSaveDataDetails>;\n\n  /**\n   * After edit.\n   * Triggered after data applied or range changed.\n   */\n  @Event() afteredit: EventEmitter<Edition.BeforeSaveDataDetails | Edition.BeforeRangeSaveDataDetails>;\n\n  /**\n   * Before autofill.\n   * Triggered before autofill applied.\n   * Use e.preventDefault() to prevent edit data apply.\n   */\n  @Event() beforeautofill: EventEmitter<Selection.ChangedRange>;\n\n  /**\n   * Before range apply.\n   * Triggered before range applied.\n   * Use e.preventDefault() to prevent range.\n   */\n  @Event() beforeange: EventEmitter<Selection.ChangedRange>;\n\n  /**\n   * Triggered after focus render finished.\n   * Can be used to access a focus element through @event.target\n   */\n  @Event() afterfocus: EventEmitter<{ model: any; column: RevoGrid.ColumnRegular; }>;\n\n  /**\n   * Before rgRow order apply.\n   * Use e.preventDefault() to prevent rgRow order change.\n   */\n  @Event() roworderchanged: EventEmitter<{ from: number; to: number }>;\n\n  /**\n   * Before source update sorting apply.\n   * Use this event if you intended to prevent sorting on data update.\n   * Use e.preventDefault() to prevent sorting data change during rows source update.\n   */\n  @Event() beforesourcesortingapply: EventEmitter;\n\n  /**\n   * Before sorting apply.\n   * Use e.preventDefault() to prevent sorting data change.\n   */\n  @Event() beforesortingapply: EventEmitter<{\n    column: RevoGrid.ColumnRegular;\n    order: 'desc' | 'asc';\n    additive: boolean;\n  }>;\n  /**\n   * Before sorting event.\n   * Initial sorting triggered, if this event stops no other event called.\n   * Use e.preventDefault() to prevent sorting.\n   */\n  @Event() beforesorting: EventEmitter<{\n    column: RevoGrid.ColumnRegular;\n    order: 'desc' | 'asc';\n    additive: boolean;\n  }>;\n\n  /**\n   * Row order change started.\n   * Use e.preventDefault() to prevent rgRow order change.\n   * Use e.text = 'new name' to change item name on start.\n   */\n  @Event() rowdragstart: EventEmitter<{ pos: RevoGrid.PositionItem; text: string }>;\n\n  /**\n   * On header click.\n   */\n  @Event() headerclick: EventEmitter<RevoGrid.ColumnRegular>;\n\n  /**\n   * Before cell focus changed.\n   * Use e.preventDefault() to prevent cell focus change.\n   */\n  @Event() beforecellfocus: EventEmitter<Edition.BeforeSaveDataDetails>;\n\n  /**\n   * Before grid focus lost happened.\n   * Use e.preventDefault() to prevent cell focus change.\n   */\n  @Event() beforefocuslost: EventEmitter<FocusedData | null>;\n  /**\n   * Before data apply.\n   * You can override data source here\n   */\n  @Event() beforesourceset: EventEmitter<{\n    type: RevoGrid.DimensionRows;\n    source: RevoGrid.DataType[];\n  }>;\n\n   /**\n   * Before data apply.\n   * You can override data source here\n   */\n  @Event({ eventName: 'before-any-source' }) beforeAnySource: EventEmitter<{\n    type: RevoGrid.DimensionRows;\n    source: RevoGrid.DataType[];\n  }>;\n\n  /**  After rows updated */\n  @Event() aftersourceset: EventEmitter<{\n    type: RevoGrid.DimensionRows;\n    source: RevoGrid.DataType[];\n  }>;\n\n  /**\n   * After all rows updated. Use it if you want to track all changes from sources pinned and main\n   */\n  @Event({ eventName: 'after-any-source' }) afterAnySource: EventEmitter<{\n    type: RevoGrid.DimensionRows;\n    source: RevoGrid.DataType[];\n  }>;\n\n  /**  Before column update */\n  @Event() beforecolumnsset: EventEmitter<ColumnCollection>;\n\n  /**  Before column applied but after column set gathered and viewport updated */\n  @Event() beforecolumnapplied: EventEmitter<ColumnCollection>;\n\n  /**  Column updated */\n  @Event() aftercolumnsset: EventEmitter<{\n    columns: ColumnCollection;\n    order: Record<RevoGrid.ColumnProp, 'asc' | 'desc'>;\n  }>;\n\n  /**\n   * Before filter applied to data source\n   * Use e.preventDefault() to prevent cell focus change\n   * Update @collection if you wish to change filters\n   */\n  @Event() beforefilterapply: EventEmitter<{ collection: FilterCollection }>;\n\n  /**\n   * Before filter trimmed values\n   * Use e.preventDefault() to prevent value trimming and filter apply\n   * Update @collection if you wish to change filters\n   * Update @itemsToFilter if you wish to filter indexes of trimming\n   */\n  @Event() beforefiltertrimmed: EventEmitter<{ collection: FilterCollection; itemsToFilter: Record<number, boolean> }>;\n\n  /**\n   * Before trimmed values\n   * Use e.preventDefault() to prevent value trimming\n   * Update @trimmed if you wish to filter indexes of trimming\n   */\n  @Event() beforetrimmed: EventEmitter<{ trimmed: Record<number, boolean>; trimmedType: string; type: string }>;\n\n  /**\n   * Notify trimmed applied\n   */\n  @Event() aftertrimmed: EventEmitter;\n\n  /**\n   * Triggered when view port scrolled\n   */\n  @Event() viewportscroll: EventEmitter<RevoGrid.ViewPortScrollEvent>;\n  /**\n   * Before export\n   * Use e.preventDefault() to prevent export\n   * Replace data in Event in case you want to modify it in export\n   */\n  @Event() beforeexport: EventEmitter<DataInput>;\n\n  /**\n   * Before edit started\n   * Use e.preventDefault() to prevent edit\n   */\n  @Event() beforeeditstart: EventEmitter<Edition.BeforeSaveDataDetails>;\n  /**\n   * After column resize\n   * Get resized columns\n   */\n  @Event() aftercolumnresize: EventEmitter<{ [index: number]: RevoGrid.ColumnRegular }>;\n  /**\n   * Before row definition\n   */\n  @Event() beforerowdefinition: EventEmitter<{ vals: any; oldVals: any; }>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n  /**\n   * Refreshes data viewport.\n   * Can be specific part as rgRow or pinned rgRow or 'all' by default.\n   */\n  @Method() async refresh(type: RevoGrid.DimensionRows | 'all' = 'all') {\n    this.dataProvider.refresh(type);\n  }\n\n  /**  Scrolls view port to specified rgRow index */\n  @Method() async scrollToRow(coordinate: number = 0) {\n    const y = this.dimensionProvider.getViewPortPos({\n      coordinate,\n      dimension: 'rgRow',\n    });\n    await this.scrollToCoordinate({ y });\n  }\n\n  /** Scrolls view port to specified column index */\n  @Method() async scrollToColumnIndex(coordinate: number = 0) {\n    const x = this.dimensionProvider.getViewPortPos({\n      coordinate,\n      dimension: 'rgCol',\n    });\n    await this.scrollToCoordinate({ x });\n  }\n\n  /**  Scrolls view port to specified column prop */\n  @Method() async scrollToColumnProp(prop: RevoGrid.ColumnProp) {\n    const coordinate = this.columnProvider.getColumnIndexByProp(prop, 'rgCol');\n    if (coordinate < 0) {\n      // already on the screen\n      return;\n    }\n    const x = this.dimensionProvider.getViewPortPos({\n      coordinate,\n      dimension: 'rgCol',\n    });\n    await this.scrollToCoordinate({ x });\n  }\n\n  /** Update columns */\n  @Method() async updateColumns(cols: RevoGrid.ColumnRegular[]) {\n    this.columnProvider.updateColumns(cols);\n  }\n\n  /** Add trimmed by type */\n  @Method() async addTrimmed(trimmed: Record<number, boolean>, trimmedType = 'external', type: RevoGrid.DimensionRows = 'rgRow') {\n    const event = this.beforetrimmed.emit({\n      trimmed,\n      trimmedType,\n      type,\n    });\n    if (event.defaultPrevented) {\n      return event;\n    }\n    this.dataProvider.setTrimmed({ [trimmedType]: event.detail.trimmed }, type);\n    this.aftertrimmed.emit();\n    return event;\n  }\n\n  /**  Scrolls view port to coordinate */\n  @Method() async scrollToCoordinate(cell: Partial<Selection.Cell>) {\n    this.viewport?.scrollToCell(cell);\n  }\n\n  /**  Bring cell to edit mode */\n  @Method() async setCellEdit(rgRow: number, prop: RevoGrid.ColumnProp, rowSource: RevoGrid.DimensionRows = 'rgRow') {\n    const rgCol = ColumnDataProvider.getColumnByProp(this.columns, prop);\n    if (!rgCol) {\n      return;\n    }\n    await timeout();\n    const colGroup = rgCol.pin || 'rgCol';\n    this.viewport?.setEdit(rgRow, this.columnProvider.getColumnIndexByProp(prop, colGroup), colGroup, rowSource);\n  }\n\n  /**  Set focus range */\n  @Method() async setCellsFocus(\n    cellStart: Selection.Cell = { x: 0, y: 0 },\n    cellEnd: Selection.Cell = { x: 0, y: 0 },\n    colType = 'rgCol',\n    rowType = 'rgRow',\n  ) {\n    this.viewport?.setFocus(colType, rowType, cellStart, cellEnd);\n  }\n\n  /**\n   * Register new virtual node inside of grid\n   * Used for additional items creation such as plugin elements\n   */\n  @Method() async registerVNode(elements: VNode[]) {\n    this.extraElements.push(...elements);\n    this.extraElements = [...this.extraElements];\n  }\n\n  /**  Get data from source */\n  @Method() async getSource(type: RevoGrid.DimensionRows = 'rgRow') {\n    return this.dataProvider.stores[type].store.get('source');\n  }\n\n  /**\n   * Get data from visible part of source\n   * Trimmed/filtered rows will be excluded\n   * @param type - type of source\n   */\n  @Method() async getVisibleSource(type: RevoGrid.DimensionRows = 'rgRow') {\n    return getVisibleSourceItem(this.dataProvider.stores[type].store);\n  }\n\n  /**\n   * Provides access to rows internal store observer\n   * Can be used for plugin support\n   * @param type - type of source\n   */\n  @Method() async getSourceStore(type: RevoGrid.DimensionRows = 'rgRow'): Promise<RowSource> {\n    return this.dataProvider.stores[type].store;\n  }\n  /**\n   * Provides access to column internal store observer\n   * Can be used for plugin support\n   * @param type - type of column\n   */\n  @Method() async getColumnStore(type: RevoGrid.DimensionCols = 'rgCol'): Promise<ColumnSource> {\n    return this.columnProvider.stores[type].store;\n  }\n\n  /**\n   * Update column sorting\n   * @param column - full column details to update\n   * @param index - virtual column index\n   * @param order - order to apply\n   */\n  @Method() async updateColumnSorting(column: RevoGrid.ColumnRegular, index: number, order: 'asc' | 'desc', additive: boolean) {\n    return this.columnProvider.updateColumnSorting(column, index, order, additive);\n  }\n\n  /**\n   * Clears column sorting\n   */\n  @Method() async clearSorting() {\n    this.columnProvider.clearSorting();\n  }\n\n  /**\n   * Receive all columns in data source\n   */\n  @Method() async getColumns(): Promise<RevoGrid.ColumnRegular[]> {\n    return this.columnProvider.getColumns();\n  }\n\n  /**\n   * Clear current grid focus\n   */\n  @Method() async clearFocus() {\n    const focused = this.viewport?.getFocused();\n    const event = this.beforefocuslost.emit(focused);\n    if (event.defaultPrevented) {\n      return;\n    }\n    this.selectionStoreConnector.clearAll();\n  }\n\n  /**\n   * Get all active plugins instances\n   */\n  @Method() async getPlugins(): Promise<RevoPlugin.Plugin[]> {\n    return [...this.internalPlugins];\n  }\n\n  /**\n   * Get the currently focused cell.\n   */\n  @Method() async getFocused(): Promise<FocusedData | null> {\n    return this.viewport?.getFocused();\n  }\n\n  /**\n   * Get size of content\n   * Including all pinned data\n   */\n  @Method() async getContentSize(): Promise<Selection.Cell> {\n    return this.dimensionProvider?.getFullSize();\n  }\n  /**\n   * Get the currently selected Range.\n   */\n  @Method() async getSelectedRange(): Promise<Selection.RangeArea|null> {\n    return this.viewport?.getSelectedRange();\n  }\n\n\n  // --------------------------------------------------------------------------\n  //\n  //  Listeners outside scope\n  //\n  // --------------------------------------------------------------------------\n\n  private clickTrackForFocusClear: number | null = null;\n  @Listen('touchstart', { target: 'document' })\n  @Listen('mousedown', { target: 'document' })\n  mousedownHandle(event: MouseEvent | TouchEvent) {\n    const screenX = getFromEvent(event, 'screenX');\n    const screenY = getFromEvent(event, 'screenY');\n    if (screenX === null || screenY === null) {\n      return;\n    }\n\n    this.clickTrackForFocusClear = screenX + screenY;\n  }\n  @Listen('touchend', { target: 'document' })\n  @Listen('mouseup', { target: 'document' })\n  mouseupHandle(event: MouseEvent | TouchEvent) {\n    const screenX = getFromEvent(event, 'screenX');\n    const screenY = getFromEvent(event, 'screenY');\n    if (screenX === null || screenY === null) {\n      return;\n    }\n\n    if (event.defaultPrevented) {\n      return;\n    }\n    const target = event.target as HTMLElement | null;\n    const pos = screenX + screenY;\n    // detect if mousemove then do nothing\n    if (Math.abs(this.clickTrackForFocusClear - pos) > 10) {\n      return;\n    }\n\n    // check if action finished inside of the document\n    // clear data which is outside of grid\n    // if event prevented or it is current table don't clear focus\n    if (target?.closest(`[${UUID}=\"${this.uuid}\"]`)) {\n      return;\n    }\n    this.clearFocus();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Listeners\n  //\n  // --------------------------------------------------------------------------\n\n  /** DRAG AND DROP */\n  @Listen('internalRowDragStart') onRowDragStarted(e: CustomEvent<{ pos: RevoGrid.PositionItem; text: string; event: MouseEvent }>) {\n    // e.cancelBubble = true;\n    const dragStart = this.rowdragstart.emit(e.detail);\n    if (dragStart.defaultPrevented) {\n      e.preventDefault();\n      return;\n    }\n    this.orderService?.start(this.element, { ...e.detail, ...dragStart.detail });\n  }\n\n  @Listen('internalRowDragEnd') onRowDragEnd() {\n    this.orderService?.end();\n  }\n\n  @Listen('internalRowDrag') onRowDrag({ detail }: CustomEvent<RevoGrid.PositionItem>) {\n    this.orderService?.move(detail);\n  }\n\n  @Listen('internalRowMouseMove') onRowMouseMove(e: CustomEvent<Selection.Cell>): void {\n    // e.cancelBubble = true;\n    this.orderService?.moveTip(e.detail);\n  }\n\n  @Listen('internalCellEdit') async onBeforeEdit(e: CustomEvent<Edition.BeforeSaveDataDetails>) {\n    // e.cancelBubble = true;\n    const { defaultPrevented, detail } = this.beforeedit.emit(e.detail);\n    await timeout();\n    // apply data\n    if (!defaultPrevented) {\n      this.dataProvider.setCellData(detail);\n      this.afteredit.emit(detail);\n    }\n  }\n\n  @Listen('internalRangeDataApply') onBeforeRangeEdit(e: CustomEvent<Edition.BeforeRangeSaveDataDetails>) {\n    // e.cancelBubble = true;\n    const { defaultPrevented, detail } = this.beforerangeedit.emit(e.detail);\n    if (defaultPrevented) {\n      e.preventDefault();\n      return;\n    }\n    this.afteredit.emit(detail);\n  }\n\n  @Listen('internalSelectionChanged') onRangeChanged(e: CustomEvent<Selection.ChangedRange>) {\n    // e.cancelBubble = true;\n    const beforeange = this.beforeange.emit(e.detail);\n    if (beforeange.defaultPrevented) {\n      e.preventDefault();\n    }\n    const beforeFill = this.beforeautofill.emit(beforeange.detail);\n    if (beforeFill.defaultPrevented) {\n      e.preventDefault();\n    }\n  }\n\n  @Listen('initialRowDropped') onRowDropped(e: CustomEvent<{ from: number; to: number }>) {\n    // e.cancelBubble = true;\n    const { defaultPrevented } = this.roworderchanged.emit(e.detail);\n    if (defaultPrevented) {\n      e.preventDefault();\n    }\n  }\n\n  @Listen('initialHeaderClick') onHeaderClick(e: CustomEvent<RevoGrid.InitialHeaderClick>) {\n    const { defaultPrevented } = this.headerclick.emit({\n      ...e.detail.column,\n      originalEvent: e.detail.originalEvent,\n    });\n    if (defaultPrevented) {\n      e.preventDefault();\n    }\n  }\n\n  @Listen('beforeFocusCell') onCellFocus(e: CustomEvent<Edition.BeforeSaveDataDetails>) {\n    // e.cancelBubble = true;\n    const { defaultPrevented } = this.beforecellfocus.emit(e.detail);\n    if (!this.canFocus || defaultPrevented) {\n      e.preventDefault();\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  // for internal plugin usage\n  @State() extraElements: VNode[] = [];\n\n  uuid: string | null = null;\n  columnProvider: ColumnDataProvider;\n  dataProvider: DataProvider;\n  dimensionProvider: DimensionProvider;\n  viewportProvider: ViewportProvider;\n  private themeService: ThemeService;\n  private viewport: ViewportService | null = null;\n\n  private orderService: OrdererService;\n  private selectionStoreConnector: SelectionStoreConnector;\n  private scrollingService: GridScrollingService;\n\n  /**\n   * Plugins\n   * Define plugins collection\n   */\n  private internalPlugins: RevoPlugin.Plugin[] = [];\n\n  @Element() element: HTMLRevoGridElement;\n\n  /**\n   * Column format change will trigger column structure update\n   */\n  @Watch('columnTypes') columnTypesChanged() {\n    this.columnChanged(this.columns);\n  }\n  @Watch('columns') columnChanged(newVal: RevoGrid.ColumnDataSchema[] = []) {\n    // clear existing data\n    this.dimensionProvider.dropColumns();\n    const columnGather = ColumnDataProvider.getColumns(newVal, 0, this.columnTypes);\n    this.beforecolumnsset.emit(columnGather);\n    for (let type of columnDimensions) {\n      const items = columnGather.columns[type];\n      this.dimensionProvider.setNewColumns(type, items.length, ColumnDataProvider.getSizes(items), type !== 'rgCol');\n    }\n    this.beforecolumnapplied.emit(columnGather);\n    const columns = this.columnProvider.setColumns(columnGather);\n    this.aftercolumnsset.emit({\n      columns,\n      order: this.columnProvider.order,\n    });\n  }\n\n  @Watch('rowSize') rowSizeChanged(s: number) {// clear existing data\n    this.dimensionProvider.setSettings({ originItemSize: s }, 'rgRow');\n    rowDimensions.forEach((t) => {\n      this.dimensionProvider.clearSize(\n        t,\n        this.dataProvider.stores[t].store.get('source').length\n      );\n      this.dimensionProvider.setCustomSizes(t, {}, true);\n    });\n  }\n\n  @Watch('theme') themeChanged(t: ThemeSpace.Theme) {\n    this.themeService.register(t);\n    this.dimensionProvider.setSettings({ originItemSize: this.themeService.rowSize }, 'rgRow');\n    this.dimensionProvider.setSettings({ originItemSize: this.colSize }, 'rgCol');\n  }\n\n  @Watch('source')\n  @Watch('pinnedBottomSource')\n  @Watch('pinnedTopSource')\n  dataSourceChanged<T extends RevoGrid.DataType>(\n    newVal: T[] = [],\n    _: T[]|undefined,\n    watchName: string\n  ) {\n    let type: RevoGrid.DimensionRows = 'rgRow';\n    switch (watchName) {\n      case 'pinnedBottomSource':\n        type = 'rowPinEnd';\n        break;\n      case 'pinnedTopSource':\n        type = 'rowPinStart';\n        break;\n      case 'source':\n        type = 'rgRow';\n        /** applied for source only for cross compatability between plugins */\n        const beforesourceset = this.beforesourceset.emit({\n          type,\n          source: newVal,\n        });\n        newVal = beforesourceset.detail.source as T[];\n        break;\n    }\n    const beforesourceset = this.beforeAnySource.emit({\n      type,\n      source: newVal,\n    });\n    const newSource = [...beforesourceset.detail.source];\n    this.dataProvider.setData(newSource, type);\n    \n    /** applied for source only for cross compatability between plugins */\n    if (watchName === 'source') {\n      this.aftersourceset.emit({\n        type,\n        source: newVal,\n      });\n    }\n    this.afterAnySource.emit({\n      type,\n      source: newVal,\n    });\n  }\n\n  @Watch('rowDefinitions') rowDefChanged(after: any, before?: any) {\n    const { detail: {\n      vals: newVal,\n      oldVals: oldVal\n    }} = this.beforerowdefinition.emit({\n      vals: after,\n      oldVals: before\n    });\n    // apply new vals\n    const newRows = rowDefinitionByType(newVal);\n    // clear current defs\n    if (oldVal) {\n      const remove = rowDefinitionRemoveByType(oldVal);\n      // clear all old data and drop sizes\n      each(remove, (_, t: RevoGrid.DimensionRows) => {\n        this.dimensionProvider.clearSize(\n          t,\n          this.dataProvider.stores[t].store.get('source').length\n        );\n      });\n    }\n    if (!newVal.length) {\n      return;\n    }\n    each(newRows, (r, k: RevoGrid.DimensionRows) => this.dimensionProvider.setCustomSizes(k, r.sizes || {}));\n  }\n\n  @Watch('trimmedRows') trimmedRowsChanged(newVal: Record<number, boolean> = {}) {\n    this.addTrimmed(newVal);\n  }\n  /**\n   * Grouping\n   */\n  @Watch('grouping') groupingChanged(newVal: GroupingOptions = {}) {\n    let grPlugin: GroupingRowPlugin | undefined;\n    for (let p of this.internalPlugins) {\n      const isGrouping = (p as unknown) as GroupingRowPlugin;\n      if (isGrouping.setGrouping) {\n        grPlugin = isGrouping;\n        break;\n      }\n    }\n    if (!grPlugin) {\n      return;\n    }\n    grPlugin.setGrouping(newVal || {});\n  }\n  /**\n   * Stretch Plugin Apply\n   */\n  @Watch('stretch') applyStretch(isStretch: boolean | string) {\n    if (isStretch === 'false') {\n      isStretch = false;\n    }\n    let stretch = this.internalPlugins.filter(p => isStretchPlugin(p))[0];\n    if ((typeof isStretch === 'boolean' && isStretch) || isStretch === 'true') {\n      if (!stretch) {\n        this.internalPlugins.push(\n          new StretchColumn(this.element, {\n            dataProvider: this.dataProvider,\n            columnProvider: this.columnProvider,\n            dimensionProvider: this.dimensionProvider,\n          }),\n        );\n      } else if (isStretchPlugin(stretch)) {\n        stretch.applyStretch(this.columnProvider.getRawColumns());\n      }\n    } else if (stretch) {\n      const index = this.internalPlugins.indexOf(stretch);\n      this.internalPlugins.splice(index, 1);\n    }\n  }\n\n  /** External subscribe */\n  @Event() filterconfigchanged: EventEmitter;\n  @Watch('filter') applyFilter(cfg: boolean | ColumnFilterConfig) {\n    this.filterconfigchanged.emit(cfg);\n  }\n\n  @Event() rowheaderschanged: EventEmitter;\n  @Watch('rowHeaders') rowHeadersChange(rowHeaders?: RevoGrid.RowHeaders | boolean) {\n    this.rowheaderschanged.emit(rowHeaders);\n  }\n\n  connectedCallback() {\n    this.viewportProvider = new ViewportProvider();\n    this.themeService = new ThemeService({\n      rowSize: this.rowSize,\n    });\n    const dimensionProviderConfig: DimensionConfig = {\n      realSizeChanged: (k: RevoGrid.MultiDimensionType) => this.contentsizechanged.emit(k),\n    };\n    this.dimensionProvider = new DimensionProvider(this.viewportProvider, dimensionProviderConfig);\n    this.columnProvider = new ColumnDataProvider();\n    this.selectionStoreConnector = new SelectionStoreConnector();\n    this.dataProvider = new DataProvider(this.dimensionProvider);\n    this.uuid = `${new Date().getTime()}-rvgrid`;\n\n    const pluginData = {\n      data: this.dataProvider,\n      column: this.columnProvider,\n      dimension: this.dimensionProvider,\n      viewport: this.viewportProvider,\n      selection: this.selectionStoreConnector,\n    };\n\n    if (this.autoSizeColumn) {\n      this.internalPlugins.push(\n        new AutoSize(\n          this.element,\n          {\n            dataProvider: this.dataProvider,\n            columnProvider: this.columnProvider,\n            dimensionProvider: this.dimensionProvider,\n          },\n          typeof this.autoSizeColumn === 'object' ? this.autoSizeColumn : undefined,\n        ),\n      );\n    }\n    if (this.filter) {\n      this.internalPlugins.push(new FilterPlugin(this.element, this.uuid, typeof this.filter === 'object' ? this.filter : undefined));\n    }\n    if (this.exporting) {\n      this.internalPlugins.push(new ExportFilePlugin(this.element));\n    }\n    this.internalPlugins.push(new SortingPlugin(this.element));\n\n    this.internalPlugins.push(\n      new GroupingRowPlugin(this.element, {\n        dataProvider: this.dataProvider,\n        columnProvider: this.columnProvider,\n      }),\n    );\n    if (this.canMoveColumns) {\n      this.internalPlugins.push(new ColumnPlugin(this.element, pluginData));\n    }\n    if (this.plugins) {\n      this.plugins.forEach(p => {\n        this.internalPlugins.push(\n          new p(this.element, pluginData),\n        );\n      });\n    }\n    this.applyStretch(this.stretch);\n    this.themeChanged(this.theme);\n    this.columnChanged(this.columns);\n\n    this.dataSourceChanged(this.source, undefined, 'source');\n    this.dataSourceChanged(this.pinnedTopSource, undefined, 'pinnedTopSource');\n    this.dataSourceChanged(this.pinnedBottomSource, undefined, 'pinnedBottomSource');\n\n    this.trimmedRowsChanged(this.trimmedRows);\n    this.rowDefChanged(this.rowDefinitions);\n    this.groupingChanged(this.grouping);\n\n    this.scrollingService = new GridScrollingService((e: RevoGrid.ViewPortScrollEvent) => {\n      this.dimensionProvider.setViewPortCoordinate({\n        coordinate: e.coordinate,\n        type: e.dimension,\n      });\n      this.viewportscroll.emit(e);\n    });\n  }\n\n  disconnectedCallback() {\n    // destroy plugins on element disconnect\n    each(this.internalPlugins, p => p.destroy());\n    this.internalPlugins = [];\n  }\n\n  render() {\n    const contentHeight = this.dimensionProvider.stores['rgRow'].store.get('realSize');\n    this.viewport = new ViewportService(\n      {\n        columnProvider: this.columnProvider,\n        dataProvider: this.dataProvider,\n        dimensionProvider: this.dimensionProvider,\n        viewportProvider: this.viewportProvider,\n        uuid: this.uuid,\n        scrollingService: this.scrollingService,\n        orderService: this.orderService,\n        selectionStoreConnector: this.selectionStoreConnector,\n        resize: c => this.aftercolumnresize.emit(c),\n      },\n      contentHeight,\n    );\n\n    const views: VNode[] = [];\n    if (this.rowHeaders && this.viewport.columns.length) {\n      const anyView = this.viewport.columns[0];\n      views.push(\n        <revogr-row-headers\n          additionalData={this.additionalData}\n          height={contentHeight}\n          rowClass={this.rowClass}\n          resize={this.resize}\n          dataPorts={anyView.dataPorts}\n          headerProp={anyView.headerProp}\n          uiid={anyView.prop[UUID]}\n          rowHeaderColumn={typeof this.rowHeaders === 'object' ? this.rowHeaders : undefined}\n          onScrollViewport={({ detail: e }: CustomEvent) => this.scrollingService.scrollService(e, 'headerRow')}\n          onElementToScroll={({ detail: e }: CustomEvent) => this.scrollingService.registerElement(e, 'headerRow')}\n        />,\n      );\n    }\n    views.push(\n      <ViewPortSections\n        additionalData={this.additionalData}\n        columnFilter={!!this.filter}\n        resize={this.resize}\n        readonly={this.readonly}\n        range={this.range}\n        rowClass={this.rowClass}\n        editors={this.editors}\n        applyEditorChangesOnClose={this.applyOnClose}\n        useClipboard={this.useClipboard}\n        columns={this.viewport.columns}\n        onSelectAll={() => {\n          this.selectionStoreConnector.selectAll();\n        }}\n        onEdit={detail => {\n          const event = this.beforeeditstart.emit(detail);\n          if (!event.defaultPrevented) {\n            this.selectionStoreConnector.setEdit(detail.val);\n          }\n        }}\n        onCancelEdit={() => {\n          this.selectionStoreConnector.setEdit(false);\n        }}\n        registerElement={(e, k) => this.scrollingService.registerElement(e, k)}\n        scrollSection={(details, k) => this.scrollingService.scrollService(details, k)}\n        scrollSectionSilent={(details, k) => this.scrollingService.scrollSilentService(details, k)}\n        focusTemplate={this.focusTemplate}\n      />,\n    );\n    return (\n      <Host {...{ [`${UUID}`]: this.uuid }}>\n        <RevoViewPort\n          viewports={this.viewportProvider.stores}\n          dimensions={this.dimensionProvider.stores}\n          orderRef={e => (this.orderService = e)}\n          registerElement={(e, k) => this.scrollingService.registerElement(e, k)}\n          nakedClick={() => this.viewport.clearEdit()}\n          onScroll={details => this.scrollingService.scrollService(details)}\n        >\n          <slot name='viewport'/>\n          {views}\n        </RevoViewPort>\n        {this.extraElements}\n      </Host>\n    );\n  }\n}\n"],"version":3}