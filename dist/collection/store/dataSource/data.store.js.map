{"version":3,"file":"data.store.js","sourceRoot":"","sources":["../../../src/store/dataSource/data.store.ts"],"names":[],"mappings":"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","sourcesContent":["import { createStore } from '@stencil/store';\nimport findIndex from 'lodash/findIndex';\nimport range from 'lodash/range';\n\nimport { Trimmed, trimmedPlugin } from './trimmed.plugin';\nimport { setStore } from '../../utils/store.utils';\nimport { Observable, RevoGrid } from '../../interfaces';\nimport { proxyPlugin } from './data.proxy';\nimport { GroupLabelTemplateFunc } from '../../plugins/groupingRow/grouping.row.types';\n\nexport interface Group extends RevoGrid.ColumnProperties {\n  name: string;\n  children: (RevoGrid.ColumnGrouping | RevoGrid.ColumnRegular)[];\n  // props/ids\n  ids: (string | number)[];\n}\nexport type Groups = Record<any, any>;\nexport type GDataType = RevoGrid.DataType | RevoGrid.ColumnRegular;\nexport type GDimension = RevoGrid.DimensionRows | RevoGrid.DimensionCols;\nexport type DataSourceState<T1 extends GDataType, T2 extends GDimension> = RevoGrid.DataSourceState<T1, T2> & {\n  groupingCustomRenderer?: GroupLabelTemplateFunc | null;\n};\n\nexport default class DataStore<T extends GDataType, ST extends GDimension> {\n  private readonly dataStore: Observable<DataSourceState<T, ST>>;\n  get store(): Observable<DataSourceState<T, ST>> {\n    return this.dataStore;\n  }\n  constructor(type: ST) {\n    const store = (this.dataStore = createStore<DataSourceState<T, ST>>({\n      items: [],\n      proxyItems: [],\n      source: [],\n      groupingDepth: 0,\n      groups: {},\n      type,\n      trimmed: {},\n      groupingCustomRenderer: undefined,\n    }));\n    store.use(proxyPlugin(store));\n    store.use(trimmedPlugin(store));\n  }\n\n  /**\n   * full data source update\n   * @param source - data column/rgRow source\n   * @param grouping - grouping information if present\n   */\n  updateData(\n    source: T[],\n    grouping?: { depth: number; groups?: Groups; customRenderer?: GroupLabelTemplateFunc },\n    silent = false,\n  ) {\n    // during full update we do drop trim\n    if (!silent) {\n      this.store.set('trimmed', {});\n    }\n    // clear items\n    this.store.set('items', []);\n    const items = range(0, source?.length || 0);\n\n    // set proxy first\n    setStore(this.store, {\n      source,\n      proxyItems: [...items],\n    });\n    // update data items\n    this.store.set('items', items);\n    // apply grouping if present\n    if (grouping) {\n      setStore(this.store, {\n        groupingDepth: grouping.depth,\n        groups: grouping.groups,\n        groupingCustomRenderer: grouping.customRenderer,\n      });\n    }\n  }\n\n  addTrimmed(some: Partial<Trimmed>) {\n    let trimmed = this.store.get('trimmed');\n    trimmed = { ...trimmed, ...some };\n    setStore(this.store, { trimmed });\n  }\n\n  // local data update\n  setData(input: Partial<DataSourceState<T, ST>>) {\n    const data: Partial<DataSourceState<T, ST>> = {\n      ...input,\n    };\n    setStore(this.store, data);\n  }\n\n  refresh() {\n    const source = this.store.get('source');\n    this.store.set('source', [...source]);\n  }\n}\n/**\n * get physical index by virtual\n * @param store - store to process\n */\nexport function getPhysical(store: Observable<DataSourceState<any, any>>, virtualIndex: number) {\n  const items = store.get('items');\n  return items[virtualIndex];\n}\n\n/**\n * get all visible items\n * @param store - store to process\n */\nexport function getVisibleSourceItem(store: Observable<DataSourceState<any, any>>) {\n  const source = store.get('source');\n  return store.get('items').map(v => source[v]);\n}\n\n/**\n * get mapped item from source\n * @param store - store to process\n * @param virtualIndex - virtual index to process\n */\nexport function getSourceItem(store: Observable<DataSourceState<any, any>>, virtualIndex: number): any | undefined {\n  const items = store.get('items');\n  const source = store.get('source');\n  return source[items[virtualIndex]];\n}\n\n/**\n * set item to source\n * @param store  - store to process\n * @param modelByIndex - collection of rows with virtual indexes to setup\n */\nexport function setSourceByVirtualIndex<T>(store: Observable<DataSourceState<T, any>>, modelByIndex: Record<number, T>) {\n  const items = store.get('items');\n  const source = store.get('source');\n\n  for (let virtualIndex in modelByIndex) {\n    const realIndex = items[virtualIndex];\n    source[realIndex] = modelByIndex[virtualIndex];\n  }\n  store.set('source', [...source]);\n}\n\n/**\n * set item to source\n * @param store  - store to process\n * @param modelByIndex - collection of rows with physical indexes to setup\n */\nexport function setSourceByPhysicalIndex<T>(store: Observable<DataSourceState<T, any>>, modelByIndex: Record<number, T>) {\n  const source = store.get('source');\n  for (let index in modelByIndex) {\n    source[index] = modelByIndex[index];\n  }\n  store.set('source', [...source]);\n}\n\nexport function setItems<T>(store: Observable<DataSourceState<T, any>>, items: number[]) {\n  store.set('items', items);\n}\n\nexport function getSourceItemVirtualIndexByProp(store: Observable<DataSourceState<any, any>>, prop: RevoGrid.ColumnProp) {\n  const items = store.get('items');\n  const source = store.get('source');\n  const physicalIndex = findIndex(source, { prop });\n  return items.indexOf(physicalIndex);\n}\n"]}