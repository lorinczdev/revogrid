{"version":3,"file":"data.proxy.js","sourceRoot":"","sources":["../../../src/store/dataSource/data.proxy.ts"],"names":[],"mappings":"AAKA;;;;GAIG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,KAAwB,EAA0B,EAAE,CAAC,CAAC;EAChF,GAAG,CAAC,CAAC,EAAE,MAAM;IACX,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;MACf,OAAO;KACR;IACD;;;OAGG;IACH,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAA0B,EAAE,CAAC,EAAE,EAAE;MAC3E,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;MACZ,OAAO,CAAC,CAAC;IACX,CAAC,EAAE,EAAE,CAAC,CAAC;IACP;;;OAGG;IACH,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAW,EAAE,CAAS,EAAE,EAAE;MACxD,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE;QACf,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;OACX;MACD,OAAO,CAAC,CAAC;IACX,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;EAC/B,CAAC;CACF,CAAC,CAAC;AAEH,SAAS,OAAO,CAAC,CAAc;EAC7B,OAAO,CAAC,KAAK,YAAY,CAAC;AAC5B,CAAC","sourcesContent":["import { Observable, PluginSubscribe } from '../../interfaces';\nimport { DataSourceState } from '../../store/dataSource/data.store';\n\ntype State = DataSourceState<any, any>;\n\n/**\n * All items\n * Used as proxy for sorting\n * Keep order but do not modify final source\n */\nexport const proxyPlugin = (store: Observable<State>): PluginSubscribe<State> => ({\n  set(k, newVal) {\n    if (!isProxy(k)) {\n      return;\n    }\n    /**\n     * Getting existing collection of items\n     * Mark indexes as visible\n     */\n    const oldItems = store.get('items').reduce((r: Record<number, boolean>, v) => {\n      r[v] = true;\n      return r;\n    }, {});\n    /**\n     * Check if new values where present in items\n     * Filter item collection according presense\n     */\n    const newItems = newVal.reduce((r: number[], i: number) => {\n      if (oldItems[i]) {\n        r.push(i);\n      }\n      return r;\n    }, []);\n    store.set('items', newItems);\n  },\n});\n\nfunction isProxy(k: keyof State): k is 'proxyItems' {\n  return k === 'proxyItems';\n}\n"]}