{"version":3,"file":"trimmed.plugin.js","sourceRoot":"","sources":["../../../src/store/dataSource/trimmed.plugin.ts"],"names":[],"mappings":"AAMA;;;GAGG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAAI,KAA0C,EAA4C,EAAE,CAAC,CAAC;EACzH,GAAG,CAAC,CAAC,EAAE,MAAM;IACX,QAAQ,CAAC,EAAE;MACT,KAAK,SAAS;QACZ,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACtC,MAAM,OAAO,GAAG,kBAAkB,CAAC,MAAiB,CAAC,CAAC;QAEtD,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,MAAgB,EAAE,CAAS,EAAE,EAAE;UAC5D,6DAA6D;UAC7D,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;YACf,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;WAChB;UACD,OAAO,MAAM,CAAC;QAChB,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC7B,MAAM;KACT;EACH,CAAC;CACF,CAAC,CAAC;AAEH,MAAM,UAAU,kBAAkB,CAAC,YAAqB;EACtD,MAAM,OAAO,GAAkB,EAAE,CAAC;EAElC,KAAK,IAAI,UAAU,IAAI,YAAY,EAAE;IACnC,iCAAiC;IACjC,KAAK,IAAI,CAAC,IAAI,YAAY,CAAC,UAAU,CAAC,EAAE;MACtC,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;KACxD;GACF;EACD,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import { Observable, PluginSubscribe } from '../../interfaces';\nimport { DataSourceState } from './data.store';\n\nexport type TrimmedEntity = Record<number, boolean>;\nexport type Trimmed = Record<string, TrimmedEntity>;\n\n/**\n * Hide items from main collection\n * But keep them in store\n */\nexport const trimmedPlugin = <T>(store: Observable<DataSourceState<T, any>>): PluginSubscribe<DataSourceState<T, any>> => ({\n  set(k, newVal) {\n    switch (k) {\n      case 'trimmed':\n        const proxy = store.get('proxyItems');\n        const trimmed = gatherTrimmedItems(newVal as Trimmed);\n\n        const newItems = proxy.reduce((result: number[], v: number) => {\n          // check if present in new trimmed remove from items (filter)\n          if (!trimmed[v]) {\n            result.push(v);\n          }\n          return result;\n        }, []);\n\n        store.set('items', newItems);\n        break;\n    }\n  },\n});\n\nexport function gatherTrimmedItems(trimmedItems: Trimmed) {\n  const trimmed: TrimmedEntity = {};\n\n  for (let trimmedKey in trimmedItems) {\n    // trimmed overweight not trimmed\n    for (let t in trimmedItems[trimmedKey]) {\n      trimmed[t] = trimmed[t] || trimmedItems[trimmedKey][t];\n    }\n  }\n  return trimmed;\n}\n"]}