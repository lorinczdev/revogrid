{"version":3,"file":"dimension.store.js","sourceRoot":"","sources":["../../../src/store/dimension/dimension.store.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Storing pre-calculated\n * Dimension information and sizes\n */\n\nimport { createStore } from '@stencil/store';\nimport reduce from 'lodash/reduce';\n\nimport { setStore } from '../../utils/store.utils';\nimport { calculateDimensionData } from './dimension.helpers';\nimport { Observable, PluginSubscribe, RevoGrid } from '../../interfaces';\nimport each from 'lodash/each';\n\ntype Item = keyof RevoGrid.DimensionSettingsState;\n\nconst trimmedPlugin = (store: DimensionStore): PluginSubscribe<RevoGrid.DimensionSettingsState> => {\n  let trimmedSize: RevoGrid.DimensionSettingsState['sizes'] = {};\n\n  const setTrimmed = (sizes: RevoGrid.DimensionSettingsState['sizes'], trimmed: RevoGrid.DimensionSettingsState['trimmed']) => {\n    const newSize = { ...sizes };\n    trimmedSize = {};\n    each(trimmed, (v, index) => {\n      if (v && newSize[index]) {\n        trimmedSize[index] = newSize[index];\n        delete newSize[index];\n      }\n    });\n    store.setDimensionSize(newSize);\n  };\n  return {\n    set(key, val) {\n      switch (key) {\n        case 'trimmed':\n          const trim = val as RevoGrid.DimensionSettingsState['trimmed'];\n          const sizes = store.store.get('sizes');\n          // recover trimmed, apply new trim\n          setTrimmed({ ...sizes, ...trimmedSize }, trim);\n          break;\n      }\n    }\n  }\n};\n\nconst realSizePlugin = (store: DimensionStore): PluginSubscribe<RevoGrid.DimensionSettingsState> => {\n  return {\n    set(k) {\n      switch (k) {\n        case 'count':\n        case 'sizes':\n        case 'originItemSize':\n          let realSize = 0;\n          const count = store.store.get('count');\n          for (let i = 0; i < count; i++) {\n            realSize += store.store.get('sizes')[i] || store.store.get('originItemSize');\n          }\n          store.setStore({ realSize });\n      }\n    }\n  };\n};\n\nfunction initialBase(): RevoGrid.DimensionCalc {\n  return {\n    indexes: [],\n    count: 0,\n\n    // plugin support\n    trimmed: {},\n\n\n    // size operations, this provider stores only changed sizes, not all of them\n    // same as indexes but for sizes and positions\n    // item index to size\n    sizes: {},\n    // order in indexes[] to coordinate\n    positionIndexToItem: {},\n    // initial element to coordinate ^\n    indexToItem: {},\n    positionIndexes: [],\n  };\n}\n\nfunction initialState(): RevoGrid.DimensionSettingsState {\n  return {\n    ...initialBase(),\n    // size which all items can take\n    realSize: 0,\n\n    // initial item size if it wasn't changed\n    originItemSize: 0,\n  };\n}\n\nexport default class DimensionStore {\n  readonly store: Observable<RevoGrid.DimensionSettingsState>;\n  constructor() {\n    this.store = createStore(initialState());\n    this.store.use(trimmedPlugin(this));\n    this.store.use(realSizePlugin(this));\n  }\n\n  getCurrentState(): RevoGrid.DimensionSettingsState {\n    const state = initialState();\n    const keys = Object.keys(state);\n    return reduce(\n      keys,\n      (r: RevoGrid.DimensionSettingsState, k: Item) => {\n        const data = this.store.get(k);\n        r[k] = data as never;\n        return r;\n      },\n      state,\n    );\n  }\n\n  dispose() {\n    setStore(this.store, initialState());\n  }\n\n  setStore<T extends Record<string, any>>(data: Partial<T>) {\n    setStore(this.store, data);\n  }\n\n  drop() {\n    setStore(this.store, initialBase());\n  }\n\n  /**\n   * Set custom dimension sizes and overwrite old\n   * Generates new indexes based on sizes\n   * @param sizes - sizes to set\n   */\n  setDimensionSize(sizes: RevoGrid.ViewSettingSizeProp) {\n    const dimensionData = calculateDimensionData(this.store.get('originItemSize'), sizes);\n    setStore(this.store, dimensionData);\n    return dimensionData;\n  }\n}\n"]}