{"version":3,"file":"selection.store.service.js","sourceRoot":"","sources":["../../../src/store/selection/selection.store.service.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAS/C,MAAM,CAAC,OAAO,OAAO,qBAAqB;EACxC,YAAmB,KAAgD,EAAU,MAAc;IAAxE,UAAK,GAAL,KAAK,CAA2C;IAAU,WAAM,GAAN,MAAM,CAAQ;IACzF,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;EACrB,CAAC;EAED,IAAI,MAAM;IACR,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;EAChC,CAAC;EAED,IAAI,OAAO;IACT,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;EACjC,CAAC;EAED,IAAI,MAAM;IACR,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;EACjC,CAAC;EAED,WAAW,CAAC,KAAY;IACtB,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;EACxC,CAAC;EAED,KAAK,CAAC,IAAW,EAAE,OAAO,GAAG,KAAK;IAChC,IAAI,CAAC,IAAI,EAAE;MACT,OAAO,KAAK,CAAC;KACd;IACD,IAAI,GAAG,GAAS,IAAI,CAAC;IAErB,aAAa;IACb,IAAI,OAAO,EAAE;MACX,IAAI,KAAK,GAAgB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;MACjD,IAAI,KAAK,EAAE;QACT,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;OACtD;KACF;IAED,eAAe;IACf,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;EACtC,CAAC;CACF","sourcesContent":["import { Edition, Observable, Selection } from '../../interfaces';\nimport { getRange } from './selection.helpers';\nimport Cell = Selection.Cell;\nimport Range = Selection.RangeArea;\n\ninterface Config {\n  changeRange(range: Range): boolean;\n  focus(focus: Cell, end: Cell): boolean;\n}\n\nexport default class SelectionStoreService {\n  constructor(public store: Observable<Selection.SelectionStoreState>, private config: Config) {\n    this.store = store;\n  }\n\n  get edited(): Edition.EditCellStore | null {\n    return this.store.get('edit');\n  }\n\n  get focused(): Cell | null {\n    return this.store.get('focus');\n  }\n\n  get ranged(): Range | null {\n    return this.store.get('range');\n  }\n\n  changeRange(range: Range) {\n    return this.config.changeRange(range);\n  }\n\n  focus(cell?: Cell, isMulti = false) {\n    if (!cell) {\n      return false;\n    }\n    let end: Cell = cell;\n\n    // range edit\n    if (isMulti) {\n      let start: Cell | null = this.store.get('focus');\n      if (start) {\n        return this.config.changeRange(getRange(start, end));\n      }\n    }\n\n    // single focus\n    return this.config.focus(cell, end);\n  }\n}\n"]}