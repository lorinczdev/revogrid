{"version":3,"file":"basePlugin.js","sourceRoot":"","sources":["../../src/plugins/basePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { RevoPlugin, RevoGrid } from '../interfaces';\n\ntype DispatchDetail = RevoGrid.ColumnRegular | RevoGrid.ColumnTemplateProp;\ntype Target = HTMLElement | null;\ntype Event = {\n  target: HTMLElement | null;\n  preventDefault(): void;\n};\n\ntype WatchConfig = { immediate: boolean };\n\nexport function dispatchElement(target: Target, eventName: string, detail: DispatchDetail): CustomEvent {\n  const event = new CustomEvent(eventName, {\n    detail,\n    cancelable: true,\n    bubbles: true,\n  });\n  target?.dispatchEvent(event);\n  return event;\n}\nexport function dispatch(e: Event, eventName: string, detail: DispatchDetail): CustomEvent {\n  e.preventDefault();\n  return dispatchElement(e.target as Target, eventName, detail);\n}\n\n/**\n * Base layer for plugins\n * Provide minimal starting core\n */\nexport default abstract class BasePlugin implements RevoPlugin.Plugin {\n  protected readonly subscriptions: Record<string, (e?: any) => void> = {};\n  constructor(protected revogrid: HTMLRevoGridElement) {}\n  /**\n   *\n   * @param eventName - event name to subscribe to in revo-grid\n   * @param callback - callback function for event\n   */\n  protected addEventListener(eventName: string, callback: (e: CustomEvent) => void) {\n    this.revogrid.addEventListener(eventName, callback);\n    this.subscriptions[eventName] = callback;\n  }\n\n  /**\n   * Subscribe to grid properties to watch changes\n   * You can return false in callback to prevent default value set\n   * \n   * @param prop - property name\n   * @param callback - callback function\n   * @param immediate - trigger callback immediately with current value\n   */\n  protected watch<T extends any>(\n    prop: string,\n    callback: (arg: T) => boolean | void,\n    { immediate }: Partial<WatchConfig> = { immediate: false }\n  ) {\n    const nativeValueDesc =\n      Object.getOwnPropertyDescriptor(this.revogrid, prop) ||\n      Object.getOwnPropertyDescriptor(this.revogrid.constructor.prototype, prop);\n  \n    // Overwrite property descriptor for this instance\n    Object.defineProperty(this.revogrid, prop, {\n      set(val: T){\n        const keepDefault = callback(val);\n        if (keepDefault === false) {\n          return;\n        }\n        // Continue with native behavior\n        return nativeValueDesc?.set?.call(this, val);\n      },\n      get(){\n        // Continue with native behavior\n        return nativeValueDesc?.get?.call(this);\n      },\n    });\n    if (immediate) {\n      callback(nativeValueDesc?.value);\n    }\n  }\n\n  /**\n   * Remove event subscription\n   * @param eventName\n   */\n  protected removeEventListener(eventName: string) {\n    this.revogrid.removeEventListener(eventName, this.subscriptions[eventName]);\n    delete this.subscriptions[eventName];\n  }\n\n  /**\n   * Trigger event to grid upper level\n   * Event can be cancelled\n   * @param eventName\n   * @param detail\n   * @returns event\n   */\n  protected emit(eventName: string, detail?: any) {\n    const event = new CustomEvent(eventName, { detail, cancelable: true });\n    this.revogrid.dispatchEvent(event);\n    return event;\n  }\n\n  /**\n   * Clearing inner subscription\n   */\n  protected clearSubscriptions() {\n    for (let type in this.subscriptions) {\n      this.removeEventListener(type);\n    }\n  }\n\n  /**\n   * Minimal destroy implementations\n   */\n  destroy() {\n    this.clearSubscriptions();\n  }\n}\n"]}