{"version":3,"file":"sorting.plugin.js","sourceRoot":"","sources":["../../../src/plugins/sorting/sorting.plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import size from 'lodash/size';\nimport debounce from 'lodash/debounce';\n\nimport { RevoGrid } from '../../interfaces';\nimport { setStore } from '../../utils/store.utils';\nimport ColumnDataProvider from '../../services/column.data.provider';\nimport BasePlugin from '../basePlugin';\n\nexport type SortingOrder = Record<RevoGrid.ColumnProp, RevoGrid.Order>;\ntype SortingOrderFunction = Record<RevoGrid.ColumnProp, RevoGrid.CellCompareFunc | undefined>;\ntype ColumnSetEvent = {\n  order: SortingOrder;\n};\n\n/**\n * lifecycle\n * 1) @event beforesorting - sorting just started, nothing happened yet, can be from column or from source, if type is from rows - column will be undefined\n * 2) @metod updateColumnSorting - column sorting icon applied to grid and column get updated, data still untiuched\n * 3) @event beforesortingapply - before we applied sorting data to data source, you can prevent event and data will not be sorted. It's called only from column sorting click\n * 4) @event afterSortingApply - sorting applied, just finished event, from rows and columns\n *\n * If you prevent event it'll not reach farther steps\n */\n\nexport default class SortingPlugin extends BasePlugin {\n  // sorting order per column\n  private sorting: SortingOrder | null = null;\n\n  // sorting function per column, multiple columns sorting supported\n  private sortingFunc: SortingOrderFunction | null = null;\n  private doSort = debounce((order: SortingOrder, comparison: SortingOrderFunction) => this.sort(order, comparison), 50);\n\n\n  constructor(protected revogrid: HTMLRevoGridElement) {\n    super(revogrid);\n\n    const aftersourceset = async ({ detail: { type } }: CustomEvent<{\n      type: RevoGrid.DimensionRows\n    }>) => {\n      // if sorting was provided - sort data\n      if (!!this.sorting && this.sortingFunc) {\n        const beforeEvent = this.emit('beforesorting', { type });\n        if (beforeEvent.defaultPrevented) {\n          return;\n        }\n        this.doSort(this.sorting, this.sortingFunc);\n      }\n    };\n    const aftercolumnsset = async ({ detail: { order } }: CustomEvent<ColumnSetEvent>) => {\n      // const columns = await this.revogrid.getColumns();\n      // const sortingFunc: SortingOrderFunction = {};\n\n      // for (let prop in order) {\n      //   const cmp = this.getComparer(ColumnDataProvider.getColumnByProp(columns, prop), order[prop]);\n      //   sortingFunc[prop] = cmp;\n      // }\n      // this.doSort(order, sortingFunc);\n    };\n    const headerclick = async (e: CustomEvent<RevoGrid.InitialHeaderClick>) => {\n      if (e.defaultPrevented) {\n        return;\n      }\n\n      if (!e.detail.column.sortable) {\n        return;\n      }\n\n      this.headerclick(e.detail.column, e.detail.index, e.detail?.originalEvent?.shiftKey);\n    };\n\n    this.addEventListener('after-any-source', aftersourceset);\n    this.addEventListener('aftercolumnsset', aftercolumnsset);\n    this.addEventListener('initialHeaderClick', headerclick);\n  }\n\n  private getComparer(column: RevoGrid.ColumnRegular, order: RevoGrid.Order): RevoGrid.CellCompareFunc {\n    const cellCmp: RevoGrid.CellCompareFunc = column?.cellCompare?.bind({ order }) || this.defaultCellCompare;\n    if (order == 'asc') {\n      return cellCmp;\n    }\n    if (order == 'desc') {\n      return this.descCellCompare(cellCmp);\n    }\n    return undefined;\n  }\n\n  /**\n   * Apply sorting to data on header click\n   * If additive - add to existing sorting, multiple columns can be sorted\n   */\n  async headerclick(column: RevoGrid.ColumnRegular, index: number, additive: boolean) {\n    let order: RevoGrid.Order = this.getNextOrder(column.order);\n    const beforeEvent = this.emit('beforesorting', { column, order, additive });\n    if (beforeEvent.defaultPrevented) {\n      return;\n    }\n    order = beforeEvent.detail.order;\n    const newCol = await this.revogrid.updateColumnSorting(beforeEvent.detail.column, index, order, additive);\n\n    // apply sort data\n    const beforeApplyEvent = this.emit('beforesortingapply', { column: newCol, order, additive });\n    if (beforeApplyEvent.defaultPrevented) {\n      return;\n    }\n    order = beforeApplyEvent.detail.order;\n    const cmp = this.getComparer(column, order);\n\n    if (additive && this.sorting) {\n      const sorting: SortingOrder = {};\n      const sortingFunc: SortingOrderFunction = {};\n\n      this.sorting = {\n        ...this.sorting,\n        ...sorting,\n      };\n      // extend sorting function with new sorting for multiple columns sorting\n      this.sortingFunc = {\n        ...this.sortingFunc,\n        ...sortingFunc,\n      };\n\n      if (column.prop in sorting && size(sorting) > 1 && order === undefined) {\n        delete sorting[column.prop];\n        delete sortingFunc[column.prop];\n      } else {\n        sorting[column.prop] = order;\n        sortingFunc[column.prop] = cmp;\n      }\n    } else {\n      // reset sorting\n      this.sorting = { [column.prop]: order };\n      this.sortingFunc = { [column.prop]: cmp };\n    }\n\n    this.doSort(this.sorting, this.sortingFunc);\n  }\n\n  /**\n   * Sort items by sorting function\n   * @requires proxyItems applied to row store\n   * @requires source applied to row store\n   * \n   * @param sorting - per column sorting\n   * @param data - this.stores['rgRow'].store.get('source')\n   */\n  async sort(sorting: SortingOrder, sortingFunc: SortingOrderFunction, types: RevoGrid.DimensionRows[] = ['rgRow', 'rowPinStart', 'rowPinEnd']) {\n    return\n    // if no sorting - reset\n    if (!size(sorting)) {\n      this.sorting = null;\n      this.sortingFunc = null;\n      return;\n    }\n    // set sorting\n    this.sorting = sorting;\n    this.sortingFunc = sortingFunc;\n\n    // by default it'll sort by rgRow store\n    // todo: support multiple stores\n    for (let type of types) {\n      const store = await this.revogrid.getSourceStore(type);\n      // row data\n      const source = store.get('source');\n      // row indexes\n      const proxyItems = store.get('proxyItems');\n      const data = this.sortIndexByItems([...proxyItems], source, sortingFunc);\n      setStore(store, {\n        proxyItems: data,\n        source: [...source],\n      });\n    }\n    this.emit('afterSortingApply');\n  }\n\n  defaultCellCompare(prop: RevoGrid.ColumnProp, a: RevoGrid.DataType, b: RevoGrid.DataType) {\n    const av = a[prop]?.toString().toLowerCase();\n    const bv = b[prop]?.toString().toLowerCase();\n\n    return av == bv ? 0 : av > bv ? 1 : -1;\n  }\n\n  descCellCompare(cmp: RevoGrid.CellCompareFunc) {\n    return (prop: RevoGrid.ColumnProp, a: RevoGrid.DataType, b: RevoGrid.DataType): number => {\n      return -1 * cmp(prop, a, b);\n    };\n  }\n\n  sortIndexByItems(indexes: number[], source: RevoGrid.DataType[], sortingFunc: SortingOrderFunction): number[] {\n    // if no sorting - return unsorted indexes\n    if (Object.entries(sortingFunc).length === 0) {\n      // Unsort indexes\n      return [...Array(indexes.length).keys()];\n    }\n    // \n    /**\n     * go through all indexes and align in new order\n     * performs a multi-level sorting by applying multiple comparison functions to determine the order of the items based on different properties.\n     */\n    return indexes.sort((a, b) => {\n      for (const [prop, cmp] of Object.entries(sortingFunc)) {\n        const itemA = source[a];\n        const itemB = source[b];\n\n        /**\n         * If the comparison function returns a non-zero value (sorted), it means that the items should be sorted based on the given property. In such a case, the function immediately returns the sorted value, indicating the order in which the items should be arranged.\n         * If none of the comparison functions result in a non-zero value, indicating that the items are equal or should remain in the same order, the function eventually returns 0.\n         */\n        const sorted = cmp(prop, itemA, itemB);\n        if (sorted) {\n          return sorted;\n        }\n      }\n      return 0;\n    });\n  }\n\n  getNextOrder(currentOrder: RevoGrid.Order): RevoGrid.Order {\n    switch (currentOrder) {\n      case undefined:\n        return 'asc';\n      case 'asc':\n        return 'desc';\n      case 'desc':\n        return undefined;\n    }\n  }\n}\n"]}