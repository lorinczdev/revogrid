{"version":3,"file":"headerGroupRenderer.js","sourceRoot":"","sources":["../../../src/plugins/groupingColumn/headerGroupRenderer.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAS,MAAM,eAAe,CAAC;AAGzC,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAC;AAChE,OAAO,EAAE,kBAAkB,EAAE,MAAM,4CAA4C,CAAC;AAahF,MAAM,mBAAmB,GAAG,CAAC,CAAQ,EAAW,EAAE;EAChD,MAAM,UAAU,GAA8C;IAC5D,SAAS,EAAE,CAAC,CAAC,SAAS;IACtB,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,GAAG,YAAY;IAC3C,QAAQ,EAAE,CAAC;IAEX,MAAM,EAAE,CAAC,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC;IACzB,KAAK,EAAE;MACL,CAAC,YAAY,CAAC,EAAE,IAAI;KACrB;IACD,KAAK,EAAE;MACL,SAAS,EAAE,cAAc,CAAC,CAAC,KAAK,KAAK;MACrC,KAAK,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,IAAI;KAC9B;IACD,QAAQ,EAAE,CAAC,CAAC,QAAQ;GACrB,CAAC;EACF,OAAO,CACL,EAAC,kBAAkB,IACjB,IAAI,kCACC,CAAC,CAAC,KAAK,KACV,IAAI,EAAE,EAAE,EACR,SAAS,EAAE,CAAC,CAAC,SAAS,EACtB,KAAK,EAAE,CAAC,CAAC,KAAK,KAEhB,KAAK,EAAE,UAAU,EACjB,cAAc,EAAE,CAAC,CAAC,cAAc,GAChC,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,mBAAmB,CAAC","sourcesContent":["import { h, VNode } from '@stencil/core';\nimport { ResizeEvent, ResizeProps } from '../../services/resizable.directive';\nimport { Group } from '../../store/dataSource/data.store';\nimport { HEADER_CLASS, MIN_COL_SIZE } from '../../utils/consts';\nimport { HeaderCellRenderer } from '../../components/header/headerCellRenderer';\nimport { RevoGrid } from '../../interfaces';\n\ntype Props = {\n  start: number;\n  end: number;\n  group: Group;\n  providers: RevoGrid.Providers<RevoGrid.DimensionCols | 'rowHeaders'>;\n  additionalData: any;\n  canResize?: boolean;\n  onResize?(e: ResizeEvent): void;\n} & Partial<Pick<ResizeProps, 'active'>>;\n\nconst GroupHeaderRenderer = (p: Props): VNode[] => {\n  const groupProps: RevoGrid.CellProps & Partial<ResizeProps> = {\n    canResize: p.canResize,\n    minWidth: p.group.ids.length * MIN_COL_SIZE,\n    maxWidth: 0,\n\n    active: p.active || ['r'],\n    class: {\n      [HEADER_CLASS]: true,\n    },\n    style: {\n      transform: `translateX(${p.start}px)`,\n      width: `${p.end - p.start}px`,\n    },\n    onResize: p.onResize,\n  };\n  return (\n    <HeaderCellRenderer\n      data={{\n        ...p.group,\n        prop: '',\n        providers: p.providers,\n        index: p.start,\n      }}\n      props={groupProps}\n      additionalData={p.additionalData}\n    />\n  );\n};\n\nexport default GroupHeaderRenderer;\n"]}