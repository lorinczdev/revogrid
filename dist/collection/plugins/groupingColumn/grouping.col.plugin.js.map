{"version":3,"file":"grouping.col.plugin.js","sourceRoot":"","sources":["../../../src/plugins/groupingColumn/grouping.col.plugin.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,gBAAgB,CAAC;AACrC,OAAO,GAAG,MAAM,YAAY,CAAC;AAK7B,OAAO,UAAU,MAAM,eAAe,CAAC;AAMvC,MAAM,CAAC,OAAO,OAAO,oBAAqB,SAAQ,UAAU;EAC1D,MAAM,CAAC,WAAW,CAA6B,GAAM,EAAE,OAAgC,EAAE,UAAa,EAAE,KAAK,GAAG,CAAC;IAC/G,iBAAiB;IACjB,MAAM,KAAK,mCACN,OAAO,KACV,KAAK,EACL,GAAG,EAAE,EAAE,GACR,CAAC;IAEF,2BAA2B;IAC3B,KAAK,IAAI,CAAC,IAAI,UAAU,CAAC,OAAO,EAAE;MAChC,MAAM,GAAG,GAAG,CAAsB,CAAC;MACnC,MAAM,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;MACpC,MAAM,cAAc,GAAG,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;MAE/C,iBAAiB;MACjB,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,OAAO,CAAC,cAAc,CAAC,EAAE;QAClD,eAAe;QACf,UAAU,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,CAAC;QAEnC,gBAAgB;QAChB,IAAI,cAAc,CAAC,MAAM,EAAE;UACzB,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,iCACvB,KAAK,KACR,GAAG,EAAE,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,IAChC,CAAC;SACJ;OACF;KACF;IACD,yBAAyB;IACzB,KAAK,IAAI,CAAC,IAAI,UAAU,CAAC,cAAc,EAAE;MACvC,MAAM,GAAG,GAAG,CAA2B,CAAC;MACxC,MAAM,cAAc,GAAG,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;MACtD,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,CAAC;KACjD;IACD,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;IAC3D,GAAG,CAAC,IAAI,mCAAQ,GAAG,CAAC,IAAI,GAAK,UAAU,CAAC,IAAI,CAAE,CAAC;IAC/C,OAAO,GAAG,CAAC;EACb,CAAC;CACF;AACD,MAAM,UAAU,aAAa,CAAC,OAAyD;EACrF,OAAO,CAAC,CAAE,OAAmC,CAAC,QAAQ,CAAC;AACzD,CAAC","sourcesContent":["import isArray from 'lodash/isArray';\nimport map from 'lodash/map';\nimport { RevoGrid } from '../../interfaces';\nimport { ColumnCollection } from '../../services/column.data.provider';\nimport { ColumnItems } from '../../services/dimension.provider';\nimport { Group as StoreGroup } from '../../store/dataSource/data.store';\nimport BasePlugin from '../basePlugin';\ninterface Group extends StoreGroup {\n  level: number;\n}\nexport type ColumnGrouping = Record<RevoGrid.DimensionCols, Group[]>;\n\nexport default class GroupingColumnPlugin extends BasePlugin {\n  static gatherGroup<T extends ColumnCollection>(res: T, colData: RevoGrid.ColumnGrouping, collection: T, level = 0): T {\n    // group template\n    const group: Group = {\n      ...colData,\n      level,\n      ids: [],\n    };\n\n    // check columns for update\n    for (let k in collection.columns) {\n      const key = k as keyof ColumnItems;\n      const resultItem = res.columns[key];\n      const collectionItem = collection.columns[key];\n\n      // if column data\n      if (isArray(resultItem) && isArray(collectionItem)) {\n        // fill columns\n        resultItem.push(...collectionItem);\n\n        // fill grouping\n        if (collectionItem.length) {\n          res.columnGrouping[key].push({\n            ...group,\n            ids: map(collectionItem, 'prop'),\n          });\n        }\n      }\n    }\n    // merge column groupings\n    for (let k in collection.columnGrouping) {\n      const key = k as RevoGrid.DimensionCols;\n      const collectionItem = collection.columnGrouping[key];\n      res.columnGrouping[key].push(...collectionItem);\n    }\n    res.maxLevel = Math.max(res.maxLevel, collection.maxLevel);\n    res.sort = { ...res.sort, ...collection.sort };\n    return res;\n  }\n}\nexport function isColGrouping(colData: RevoGrid.ColumnGrouping | RevoGrid.ColumnRegular): colData is RevoGrid.ColumnGrouping {\n  return !!(colData as RevoGrid.ColumnGrouping).children;\n}\n"]}