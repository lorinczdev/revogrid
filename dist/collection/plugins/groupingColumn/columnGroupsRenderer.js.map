{"version":3,"file":"columnGroupsRenderer.js","sourceRoot":"","sources":["../../../src/plugins/groupingColumn/columnGroupsRenderer.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAS,MAAM,eAAe,CAAC;AACzC,OAAO,SAAS,MAAM,kBAAkB,CAAC;AAGzC,OAAO,EAAE,cAAc,EAAE,MAAM,yCAAyC,CAAC;AACzE,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AAcxD,MAAM,oBAAoB,GAAG,CAAC,EAC5B,cAAc,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,EAAE,QAAQ,EACpD,EAAW,EAAE;EAC1D,uBAAuB;EACvB,MAAM,QAAQ,GAAY,EAAE,CAAC;EAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;IAC9B,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE;MACb,KAAK,IAAI,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE;QAC3B,4BAA4B;QAC5B,yDAAyD;QACzD,MAAM,oBAAoB,GAAuB,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,OAAO,YAAY,CAAC,EAAE,CAAC,KAAK,QAAQ,CAAC,CAAC;QAClH,IAAI,oBAAoB,GAAG,CAAC,CAAC,EAAE;UAC7B,MAAM,eAAe,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,mBAAmB;UAC1F,MAAM,eAAe,GAAG,eAAe,GAAG,oBAAoB,CAAC,CAAC,8BAA8B;UAC9F,MAAM,aAAa,GAAG,eAAe,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,6BAA6B;UAE3F,cAAc;UACd,MAAM,UAAU,GAAG,cAAc,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC,KAAK,CAAC;UACvE,MAAM,QAAQ,GAAG,cAAc,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,GAAG,CAAC;UACjE,QAAQ,CAAC,IAAI,CACX,EAAC,mBAAmB,IAClB,SAAS,EAAE,SAAS,EACpB,KAAK,EAAE,UAAU,EACjB,GAAG,EAAE,QAAQ,EACb,KAAK,EAAE,KAAK,EACZ,MAAM,EAAE,MAAM,EACd,SAAS,EAAE,SAAS,EACpB,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,EAAE,eAAe,EAAE,aAAa,CAAC,EACnE,cAAc,EAAE,cAAc,GAC9B,CACH,CAAC;SACH;OACF;KACF;IACD,QAAQ,CAAC,IAAI,CAAC,WAAK,KAAK,EAAE,GAAG,gBAAgB,QAAQ,GAAI,CAAC,CAAC;GAC5D;EACD,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAEF,eAAe,oBAAoB,CAAC","sourcesContent":["import { h, VNode } from '@stencil/core';\nimport findIndex from 'lodash/findIndex';\nimport { RevoGrid } from '../../interfaces';\nimport { Group } from '../../store/dataSource/data.store';\nimport { getItemByIndex } from '../../store/dimension/dimension.helpers';\nimport { HEADER_ROW_CLASS } from '../../utils/consts';\nimport GroupHeaderRenderer from './headerGroupRenderer';\nimport { ResizeProps } from '../..';\n\ntype Props<T> = {\n  visibleProps: { [prop: string]: number };\n  groups: Record<number, Group[]>;\n  dimensionCol: Pick<RevoGrid.DimensionSettingsState, 'indexes' | 'originItemSize' | 'indexToItem'>;\n  depth: number;\n  canResize: boolean;\n  providers: RevoGrid.Providers<T>;\n  additionalData: any;\n  onResize(changedX: number, startIndex: number, endIndex: number): void;\n} & Partial<Pick<ResizeProps, 'active'>>;\n\nconst ColumnGroupsRenderer = ({\n  additionalData, providers, depth, groups, visibleProps, dimensionCol, canResize, active, onResize\n}: Props<RevoGrid.DimensionCols | 'rowHeaders'>): VNode[] => {\n  // render group columns\n  const groupRow: VNode[] = [];\n  for (let i = 0; i < depth; i++) {\n    if (groups[i]) {\n      for (let group of groups[i]) {\n        // if group in visible range\n        // find first visible group prop in visible columns range\n        const indexFirstVisibleCol: number | undefined = findIndex(group.ids, id => typeof visibleProps[id] === 'number');\n        if (indexFirstVisibleCol > -1) {\n          const colVisibleIndex = visibleProps[group.ids[indexFirstVisibleCol]]; // get column index\n          const groupStartIndex = colVisibleIndex - indexFirstVisibleCol; // first column index in group\n          const groupEndIndex = groupStartIndex + group.ids.length - 1; // last column index in group\n\n          // coordinates\n          const groupStart = getItemByIndex(dimensionCol, groupStartIndex).start;\n          const groupEnd = getItemByIndex(dimensionCol, groupEndIndex).end;\n          groupRow.push(\n            <GroupHeaderRenderer\n              providers={providers}\n              start={groupStart}\n              end={groupEnd}\n              group={group}\n              active={active}\n              canResize={canResize}\n              onResize={e => onResize(e.changedX, groupStartIndex, groupEndIndex)}\n              additionalData={additionalData}\n            />,\n          );\n        }\n      }\n    }\n    groupRow.push(<div class={`${HEADER_ROW_CLASS} group`} />);\n  }\n  return groupRow;\n};\n\nexport default ColumnGroupsRenderer;\n"]}