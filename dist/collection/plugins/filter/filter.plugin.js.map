{"version":3,"file":"filter.plugin.js","sourceRoot":"","sources":["../../../src/plugins/filter/filter.plugin.tsx"],"names":[],"mappings":"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","sourcesContent":["import { h } from '@stencil/core';\nimport BasePlugin from '../basePlugin';\nimport { RevoGrid } from '../../interfaces';\nimport { FILTER_PROP, isFilterBtn } from './filter.button';\nimport { MultiFilterItem } from './filter.pop';\nimport { filterEntities, filterNames, FilterType, filterTypes } from './filter.service';\nimport { LogicFunction } from './filter.types';\nimport { reduce } from 'lodash';\n\ntype CustomFilter = {\n  columnFilterType: string; // property defined in column filter: string/number/abstract/enum...etc\n  name: string;\n  func: LogicFunction;\n};\n\nexport type FilterCaptions = {\n  title: string;\n  save: string;\n  reset: string;\n  cancel: string;\n};\n\nexport type FilterLocalization = {\n  captions: FilterCaptions;\n  filterNames: Record<FilterType, string>;\n};\n\n/**\n * @typedef ColumnFilterConfig\n * @type {object}\n * @property {FilterCollection|undefined} collection - preserved filter data\n * @property {string[]|undefined} include - filters to be included, if defined everything else out of scope will be ignored\n * @property {Record<string, CustomFilter>|undefined} customFilters - hash map of {FilterType:CustomFilter}.\n * @property {FilterLocalization|undefined} localization - translation for filter popup captions.\n * @property {MultiFilterItem|undefined} multiFilterItems - data for multi filtering.\n * @property {boolean|undefined} disableDynamicFiltering - disables dynamic filtering.\n * A way to define your own filter types per column\n */\nexport type ColumnFilterConfig = {\n  collection?: FilterCollection;\n  include?: string[];\n  customFilters?: Record<string, CustomFilter>;\n  filterProp?: string;\n  localization?: FilterLocalization;\n  multiFilterItems?: MultiFilterItem;\n  disableDynamicFiltering?: boolean;\n};\ntype HeaderEvent = CustomEvent<RevoGrid.ColumnRegular>;\ntype FilterCollectionItem = {\n  filter: LogicFunction;\n  type: FilterType;\n  value?: any;\n};\n\nexport type FilterCollection = Record<RevoGrid.ColumnProp, FilterCollectionItem>;\n\nexport const FILTER_TRIMMED_TYPE = 'filter';\nexport const FILTER_CONFIG_CHANGED_EVENT = 'filterconfigchanged';\n\nexport default class FilterPlugin extends BasePlugin {\n  private pop: HTMLRevogrFilterPanelElement;\n  private filterCollection: FilterCollection = {};\n  private multiFilterItems: MultiFilterItem = {};\n  private possibleFilters: Record<string, string[]> = { ...filterTypes };\n  private possibleFilterNames: Record<string, string> = { ...filterNames };\n  private possibleFilterEntities: Record<string, LogicFunction> = { ...filterEntities };\n  private filterProp = FILTER_PROP;\n\n  constructor(protected revogrid: HTMLRevoGridElement, uiid: string, config?: ColumnFilterConfig) {\n    super(revogrid);\n    if (config) {\n      this.initConfig(config);\n    }\n\n    const headerclick = (e: HeaderEvent) => this.headerclick(e);\n\n    const aftersourceset = async () => {\n      const filterCollectionProps = Object.keys(this.filterCollection);\n      if (filterCollectionProps.length > 0) {\n        // handle old way of filtering by reworking FilterCollection to new MultiFilterItem\n        filterCollectionProps.forEach((prop, index) => {\n          if (!this.multiFilterItems[prop]) {\n            this.multiFilterItems[prop] = [\n              {\n                id: index,\n                type: this.filterCollection[prop].type,\n                value: this.filterCollection[prop].value,\n                relation: 'and',\n              },\n            ];\n          }\n        });\n      }\n      await this.runFiltering();\n    };\n    this.addEventListener('headerclick', headerclick);\n    this.addEventListener(FILTER_CONFIG_CHANGED_EVENT, ({ detail }: CustomEvent<ColumnFilterConfig | boolean>) => {\n      if (!detail) {\n        this.clearFiltering();\n        return;\n      }\n      if (typeof detail === 'object') {\n        this.initConfig(detail);\n      }\n      aftersourceset();\n    });\n    this.addEventListener('aftersourceset', aftersourceset);\n    this.addEventListener('filter', ({ detail }: CustomEvent) => this.onFilterChange(detail));\n\n    this.revogrid.registerVNode([\n      <revogr-filter-panel\n        uuid={`filter-${uiid}`}\n        filterItems={this.multiFilterItems}\n        filterNames={this.possibleFilterNames}\n        filterEntities={this.possibleFilterEntities}\n        filterCaptions={config?.localization?.captions}\n        onFilterChange={e => this.onFilterChange(e.detail)}\n        disableDynamicFiltering={config?.disableDynamicFiltering}\n        ref={e => (this.pop = e)}\n      />,\n    ]);\n  }\n\n  private initConfig(config: ColumnFilterConfig) {\n    if (config.multiFilterItems) {\n      this.multiFilterItems = { ...config.multiFilterItems };\n    }\n    if (config.customFilters) {\n      for (let cType in config.customFilters) {\n        const cFilter = config.customFilters[cType];\n        if (!this.possibleFilters[cFilter.columnFilterType]) {\n          this.possibleFilters[cFilter.columnFilterType] = [];\n        }\n        this.possibleFilters[cFilter.columnFilterType].push(cType);\n        this.possibleFilterEntities[cType] = cFilter.func;\n        this.possibleFilterNames[cType] = cFilter.name;\n      }\n    }\n\n    if (config.filterProp) {\n      this.filterProp = config.filterProp;\n    }\n\n    /**\n     * which filters has to be included/excluded\n     * convinient way to exclude system filters\n     */\n    if (config.include) {\n      const filters: Record<string, string[]> = {};\n\n      for (let t in this.possibleFilters) {\n        // validate filters, if appropriate function present\n        const newTypes = this.possibleFilters[t].filter(f => config.include.indexOf(f) > -1);\n        if (newTypes.length) {\n          filters[t] = newTypes;\n        }\n      }\n      // if any valid filters provided show them\n      if (Object.keys(filters).length > 0) {\n        this.possibleFilters = filters;\n      }\n    }\n    if (config.collection) {\n      this.filterCollection = reduce(config.collection, (result: FilterCollection, item, prop) => {\n        if (this.possibleFilterEntities[item.type]) {\n          result[prop] = item;\n        } else {\n          console.warn(`${item.type} type is not found.`);\n        }\n        return result;\n      }, {});\n    }\n\n    if (config.localization) {\n      if (config.localization.filterNames) {\n        Object.entries(config.localization.filterNames).forEach(([k, v]) => {\n          if (this.possibleFilterNames[k] != void 0) {\n            this.possibleFilterNames[k] = v;\n          }\n        });\n      }\n    }\n  }\n\n  private async headerclick(e: HeaderEvent) {\n    const el = e.detail.originalEvent?.target as HTMLElement;\n    if (!isFilterBtn(el)) {\n      return;\n    }\n    e.preventDefault();\n\n    // close if same\n    const changes = await this.pop.getChanges();\n    if (changes && changes?.prop === e.detail.prop) {\n      this.pop.show();\n      return;\n    }\n\n    // filter button clicked, open filter dialog\n    const gridPos = this.revogrid.getBoundingClientRect();\n    const buttonPos = el.getBoundingClientRect();\n    const prop = e.detail.prop;\n    this.pop.filterTypes = this.getColumnFilter(e.detail.filter);\n    this.pop.show({\n      ...this.filterCollection[prop],\n      x: buttonPos.x - gridPos.x,\n      y: buttonPos.y - gridPos.y + buttonPos.height,\n      prop,\n    });\n  }\n\n  private getColumnFilter(type?: boolean | string | string[]): Record<string, string[]> {\n    let filterType = 'string';\n    if (!type) {\n      return { [filterType]: this.possibleFilters[filterType] };\n    }\n\n    // if custom column filter\n    if (this.isValidType(type)) {\n      filterType = type;\n\n      // if multiple filters applied\n    } else if (typeof type === 'object' && type.length) {\n      return type.reduce((r: Record<string, string[]>, multiType) => {\n        if (this.isValidType(multiType)) {\n          r[multiType] = this.possibleFilters[multiType];\n        }\n        return r;\n      }, {});\n    }\n    return { [filterType]: this.possibleFilters[filterType] };\n  }\n\n  private isValidType(type: any): type is string {\n    return !!(typeof type === 'string' && this.possibleFilters[type]);\n  }\n\n  // called on internal component change\n  private async onFilterChange(filterItems: MultiFilterItem) {\n    this.multiFilterItems = filterItems;\n    this.runFiltering();\n  }\n\n  /**\n   * Triggers grid filtering\n   */\n  async doFiltering(collection: FilterCollection, items: RevoGrid.DataType[], columns: RevoGrid.ColumnRegular[], filterItems: MultiFilterItem) {\n    const columnsToUpdate: RevoGrid.ColumnRegular[] = [];\n\n    columns.forEach(rgCol => {\n      const column = { ...rgCol };\n      const hasFilter = filterItems[column.prop];\n      if (column[this.filterProp] && !hasFilter) {\n        delete column[this.filterProp];\n        columnsToUpdate.push(column);\n      }\n      if (!column[this.filterProp] && hasFilter) {\n        columnsToUpdate.push(column);\n        column[this.filterProp] = true;\n      }\n    });\n    const itemsToFilter = this.getRowFilter(items, filterItems);\n    // check is filter event prevented\n    const { defaultPrevented, detail } = this.emit('beforefiltertrimmed', { collection, itemsToFilter, source: items, filterItems });\n    if (defaultPrevented) {\n      return;\n    }\n\n    // check is trimmed event prevented\n    const isAddedEvent = await this.revogrid.addTrimmed(detail.itemsToFilter, FILTER_TRIMMED_TYPE);\n    if (isAddedEvent.defaultPrevented) {\n      return;\n    }\n\n    // applies the hasFilter to the columns to show filter icon\n    await this.revogrid.updateColumns(columnsToUpdate);\n    this.emit('afterFilterApply');\n  }\n\n  async clearFiltering() {\n    this.multiFilterItems = {};\n    await this.runFiltering();\n  }\n\n  private async runFiltering() {\n    const collection: FilterCollection = {};\n\n    // handle old filterCollection to return the first filter only (if any) from multiFilterItems\n    const filterProps = Object.keys(this.multiFilterItems);\n\n    for (const prop of filterProps) {\n      // check if we have any filter for a column\n      if (this.multiFilterItems[prop].length > 0) {\n        const firstFilterItem = this.multiFilterItems[prop][0];\n        collection[prop] = {\n          filter: filterEntities[firstFilterItem.type],\n          type: firstFilterItem.type,\n          value: firstFilterItem.value,\n        };\n      }\n    }\n\n    this.filterCollection = collection;\n\n    const { source, columns } = await this.getData();\n    const { defaultPrevented, detail } = this.emit('beforefilterapply', { collection: this.filterCollection, source, columns, filterItems: this.multiFilterItems });\n    if (defaultPrevented) {\n      return;\n    }\n    this.doFiltering(detail.collection, detail.source, detail.columns, detail.filterItems);\n  }\n\n  private async getData() {\n    return {\n      source: await this.revogrid.getSource(),\n      columns: await this.revogrid.getColumns(),\n    };\n  }\n\n  private getRowFilter(rows: RevoGrid.DataType[], filterItems: MultiFilterItem) {\n    const propKeys = Object.keys(filterItems);\n\n    const trimmed: Record<number, boolean> = {};\n    let propFilterSatisfiedCount: number = 0;\n    let lastFilterResults: boolean[] = [];\n\n    // each rows\n    rows.forEach((model, rowIndex) => {\n      // working on all props\n      for (const prop of propKeys) {\n        const propFilters = filterItems[prop];\n\n        propFilterSatisfiedCount = 0;\n        lastFilterResults = [];\n\n        // testing each filter for a prop\n        for (const [filterIndex, filterData] of propFilters.entries()) {\n          // the filter LogicFunction based on the type\n          const filter = this.possibleFilterEntities[filterData.type];\n\n          // THE MAGIC OF FILTERING IS HERE\n          if (filterData.relation === 'or') {\n            lastFilterResults = [];\n            if (filter(model[prop], filterData.value)) {\n              continue;\n            }\n            propFilterSatisfiedCount++;\n          } else {\n            // 'and' relation will need to know the next filter\n            // so we save this current filter to include it in the next filter\n            lastFilterResults.push(!filter(model[prop], filterData.value));\n\n            // check first if we have a filter on the next index to pair it with this current filter\n            const nextFilterData = propFilters[filterIndex + 1];\n            // stop the sequence if there is no next filter or if the next filter is not an 'and' relation\n            if (!nextFilterData || nextFilterData.relation !== 'and') {\n              // let's just continue since for sure propFilterSatisfiedCount cannot be satisfied\n              if (lastFilterResults.indexOf(true) === -1) {\n                lastFilterResults = [];\n                continue;\n              }\n\n              // we need to add all of the lastFilterResults since we need to satisfy all\n              propFilterSatisfiedCount += lastFilterResults.length;\n              lastFilterResults = [];\n            }\n          }\n        } // end of propFilters forEach\n\n        // add to the list of removed/trimmed rows of filter condition is satisfied\n        if (propFilterSatisfiedCount === propFilters.length) trimmed[rowIndex] = true;\n      } // end of for-of propKeys\n    });\n    return trimmed;\n  }\n}\n"]}