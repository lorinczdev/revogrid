{"version":3,"file":"filter.service.js","sourceRoot":"","sources":["../../../src/plugins/filter/filter.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,MAAM,oBAAoB,CAAC;AAC/C,OAAO,MAAM,MAAM,iCAAiC,CAAC;AACrD,OAAO,QAAQ,MAAM,wCAAwC,CAAC;AAC9D,OAAO,EAAE,MAAM,8BAA8B,CAAC;AAC9C,OAAO,IAAI,MAAM,qCAAqC,CAAC;AACvD,OAAO,GAAG,EAAE,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAC/C,OAAO,UAAU,MAAM,gCAAgC,CAAC;AACxD,OAAO,QAAQ,EAAE,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAGrE,MAAM,CAAC,MAAM,WAAW,GAAG;EACzB,IAAI,EAAE,MAAM;EACZ,KAAK,EAAE,SAAS;EAChB,QAAQ,EAAE,KAAK;EAEf,EAAE,EAAE,OAAO;EACX,KAAK,EAAE,WAAW;EAClB,MAAM,EAAE,aAAa;EACrB,QAAQ,EAAE,UAAU;EACpB,WAAW,EAAE,kBAAkB;EAE/B,GAAG,EAAE,GAAG;EACR,IAAI,EAAE,IAAI;EACV,EAAE,EAAE,GAAG;EACP,GAAG,EAAE,IAAI;EACT,EAAE,EAAE,GAAG;EACP,GAAG,EAAE,IAAI;CACV,CAAC;AAIF,MAAM,CAAC,MAAM,cAAc,GAAsC;EAC/D,IAAI,EAAE,GAAG,EAAE,CAAC,IAAI;EAChB,KAAK,EAAE,MAAM;EACb,QAAQ,EAAE,GAAG;EACb,EAAE,EAAE,EAAE;EACN,KAAK,EAAE,KAAK;EACZ,MAAM,EAAE,UAAU;EAClB,QAAQ,EAAE,QAAQ;EAClB,WAAW,EAAE,WAAW;EAExB,GAAG,EAAE,EAAE;EACP,IAAI,EAAE,KAAK;EACX,EAAE,EAAE,MAAM;EACV,GAAG,EAAE,QAAQ;EACb,EAAE,EAAE,EAAE;EACN,GAAG,EAAE,IAAI;CACV,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAiC;EACvD,MAAM,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,UAAU,EAAE,aAAa,CAAC;EACjF,MAAM,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC;CACvE,CAAC","sourcesContent":["import eq, { notEq } from './conditions/equal';\nimport gtThan from './conditions/number/greaterThan';\nimport gtThanEq from './conditions/number/greaterThanOrEqual';\nimport lt from './conditions/number/lessThan';\nimport lsEq from './conditions/number/lessThanOrEqual';\nimport set, { notSet } from './conditions/set';\nimport beginsWith from './conditions/string/beginswith';\nimport contains, { notContains } from './conditions/string/contains';\nimport { LogicFunction } from './filter.types';\n\nexport const filterNames = {\n  none: 'None',\n  empty: 'Not set',\n  notEmpty: 'Set',\n\n  eq: 'Equal',\n  notEq: 'Not equal',\n  begins: 'Begins with',\n  contains: 'Contains',\n  notContains: 'Does not contain',\n\n  eqN: '=',\n  neqN: '!=',\n  gt: '>',\n  gte: '>=',\n  lt: '<',\n  lte: '<=',\n};\n\nexport type FilterType = keyof typeof filterNames;\n\nexport const filterEntities: Record<FilterType, LogicFunction> = {\n  none: () => true,\n  empty: notSet,\n  notEmpty: set,\n  eq: eq,\n  notEq: notEq,\n  begins: beginsWith,\n  contains: contains,\n  notContains: notContains,\n\n  eqN: eq,\n  neqN: notEq,\n  gt: gtThan,\n  gte: gtThanEq,\n  lt: lt,\n  lte: lsEq,\n};\n\nexport const filterTypes: Record<string, FilterType[]> = {\n  string: ['notEmpty', 'empty', 'eq', 'notEq', 'begins', 'contains', 'notContains'],\n  number: ['notEmpty', 'empty', 'eqN', 'neqN', 'gt', 'gte', 'lt', 'lte'],\n};\n"]}