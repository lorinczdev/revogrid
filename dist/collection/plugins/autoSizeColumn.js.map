{"version":3,"file":"autoSizeColumn.js","sourceRoot":"","sources":["../../src/plugins/autoSizeColumn.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Plugin module for revo-grid grid system\n * Add support for automatic column resize\n */\nimport each from 'lodash/each';\nimport reduce from 'lodash/reduce';\nimport BasePlugin from './basePlugin';\nimport { RevoGrid, Edition } from '../interfaces';\nimport ColumnDataProvider, { ColumnCollection } from '../services/column.data.provider';\nimport { DataProvider } from '../services/data.provider';\nimport { columnTypes } from '../store/storeTypes';\nimport DimensionProvider, { ColumnItems } from '../services/dimension.provider';\nimport { getSourceItem } from '../store/dataSource/data.store';\n\ninterface Column extends RevoGrid.ColumnRegular {\n  index: number;\n}\n\ntype AutoSizeColumns = Record<RevoGrid.DimensionCols, ColumnRecords>;\ntype ColumnRecords = Record<any, Column>;\ntype SourceSetEvent = { type: RevoGrid.DimensionRows; source: RevoGrid.DataType[] };\ntype EditEvent = Edition.BeforeSaveDataDetails | Edition.BeforeRangeSaveDataDetails;\ntype Resolve = (cols: Partial<AutoSizeColumns>) => void;\ntype Reject = () => void;\n\nexport type AutoSizeColumnConfig = {\n  // ui behavior mode\n  mode?: ColumnAutoSizeMode;\n  /**\n   * autoSize for all columns\n   * if allColumnes true all columns treated as autoSize, worse for performance\n   * false by default\n   */\n  allColumns?: boolean;\n  /**\n   * assumption per characted size\n   * by default defined as 8, can be changed in this config\n   */\n  letterBlockSize?: number;\n  /** make size calculation exact\n   * by default it based on assumption each character takes some space defined in letterBlockSize */\n  preciseSize?: boolean;\n};\n\ntype Providers = {\n  dataProvider: DataProvider;\n  dimensionProvider: DimensionProvider;\n  columnProvider: ColumnDataProvider;\n};\n\nconst LETTER_BLOCK_SIZE = 7;\n\nenum ColumnAutoSizeMode {\n  // increases column width on header click according the largest text value\n  headerClickAutosize = 'headerClickAutoSize',\n  // increases column width on data set and text edit, decreases performance\n  autoSizeOnTextOverlap = 'autoSizeOnTextOverlap',\n  // increases and decreases column width based on all items sizes, worst for performance\n  autoSizeAll = 'autoSizeAll',\n}\n\nexport default class AutoSizeColumn extends BasePlugin {\n  private autoSizeColumns: Partial<AutoSizeColumns> | null = null;\n  private readonly letterBlockSize: number;\n\n  /** for config option when @preciseSize enabled */\n  private readonly precsizeCalculationArea: HTMLElement;\n\n  /** for edge case when no columns defined before data */\n  private dataResolve: Resolve | null = null;\n  private dataReject: Reject | null = null;\n\n  constructor(revogrid: HTMLRevoGridElement, protected providers: Providers, private config?: AutoSizeColumnConfig) {\n    super(revogrid);\n    this.letterBlockSize = config?.letterBlockSize || LETTER_BLOCK_SIZE;\n\n    // create test container to check text width\n    if (config?.preciseSize) {\n      this.precsizeCalculationArea = this.initiatePresizeElement();\n      revogrid.appendChild(this.precsizeCalculationArea);\n    }\n\n    const aftersourceset = ({ detail: { source } }: CustomEvent<SourceSetEvent>) => {\n      this.setSource(source);\n    };\n    const afteredit = ({ detail }: CustomEvent<EditEvent>) => {\n      this.afteredit(detail);\n    };\n    const afterEditAll = ({ detail }: CustomEvent<EditEvent>) => {\n      this.afterEditAll(detail);\n    };\n    const beforecolumnsset = ({ detail: { columns } }: CustomEvent<ColumnCollection>) => {\n      this.columnSet(columns);\n    };\n    const headerDblClick = ({ detail }: CustomEvent<RevoGrid.InitialHeaderClick>) => {\n      const type = ColumnDataProvider.getColumnType(detail.column);\n      const size = this.getColumnSize(detail.index, type);\n      if (size) {\n        this.providers.dimensionProvider.setCustomSizes(type, {\n          [detail.index]: size,\n        }, true);\n      }\n    };\n    this.addEventListener('beforecolumnsset', beforecolumnsset);\n    switch (config?.mode) {\n      case ColumnAutoSizeMode.autoSizeOnTextOverlap:\n        this.addEventListener('aftersourceset', aftersourceset);\n        this.addEventListener('afteredit', afteredit);\n        break;\n      case ColumnAutoSizeMode.autoSizeAll:\n        this.addEventListener('aftersourceset', aftersourceset);\n        this.addEventListener('afteredit', afterEditAll);\n        break;\n      default:\n        this.addEventListener('headerdblClick', headerDblClick);\n        break;\n    }\n  }\n\n  private async setSource(source: RevoGrid.DataType[]): Promise<void> {\n    let autoSize = this.autoSizeColumns;\n    if (this.dataReject) {\n      this.dataReject();\n      this.clearPromise();\n    }\n\n    /** If data set first and no column provided await until get one */\n    if (!autoSize) {\n      const request = new Promise((resolve: Resolve, reject: Reject) => {\n        this.dataResolve = resolve;\n        this.dataReject = reject;\n      });\n      try {\n        autoSize = await request;\n      } catch (e) {\n        return;\n      }\n    }\n\n    // calculate sizes\n    each(autoSize, (_v, type: RevoGrid.DimensionCols) => {\n      const sizes: RevoGrid.ViewSettingSizeProp = {};\n      each(autoSize[type], rgCol => {\n        // calculate size\n        rgCol.size = sizes[rgCol.index] = source.reduce((prev, rgRow) => Math.max(prev, this.getLength(rgRow[rgCol.prop])), this.getLength(rgCol.name || ''));\n      });\n      this.providers.dimensionProvider.setCustomSizes(type, sizes, true);\n    });\n  }\n\n  private getLength(len?: any): number {\n    const padding = 15;\n    if (!len) {\n      return 0;\n    }\n    try {\n      const str = len.toString();\n\n      /**if exact calculation required proxy with html element, slow operation */\n      if (this.config?.preciseSize) {\n        this.precsizeCalculationArea.innerText = str;\n        return this.precsizeCalculationArea.scrollWidth + padding * 2;\n      }\n      return str.length * this.letterBlockSize + padding * 2;\n    } catch (e) {\n      return 0;\n    }\n  }\n\n  private afteredit(e: EditEvent): void {\n    let data: Record<string, RevoGrid.DataType>;\n    if (this.isRangeEdit(e)) {\n      data = e.data;\n    } else {\n      data = { 0: { [e.prop]: e.val } };\n    }\n    each(this.autoSizeColumns, (columns, type: RevoGrid.DimensionCols) => {\n      const sizes: RevoGrid.ViewSettingSizeProp = {};\n\n      each(columns, rgCol => {\n        // calculate size\n        const size = reduce(\n          data,\n          (prev: number | undefined, rgRow) => {\n            if (typeof rgRow[rgCol.prop] === 'undefined') {\n              return prev;\n            }\n            return Math.max(prev || 0, this.getLength(rgRow[rgCol.prop]));\n          },\n          undefined,\n        );\n\n        if (size && rgCol.size < size) {\n          rgCol.size = sizes[rgCol.index] = size;\n        }\n      });\n\n      this.providers.dimensionProvider.setCustomSizes(type, sizes, true);\n    });\n  }\n\n  private afterEditAll(e: EditEvent): void {\n    const props: Record<any, true> = {};\n    if (this.isRangeEdit(e)) {\n      each(e.data, r => each(r, (_v, p) => (props[p] = true)));\n    } else {\n      props[e.prop] = true;\n    }\n    each(this.autoSizeColumns, (columns, type: RevoGrid.DimensionCols) => {\n      const sizes: RevoGrid.ViewSettingSizeProp = {};\n\n      each(columns, rgCol => {\n        if (props[rgCol.prop]) {\n          const size = this.getColumnSize(rgCol.index, type);\n          if (size) {\n            sizes[rgCol.index] = size;\n          }\n        }\n      });\n      this.providers.dimensionProvider.setCustomSizes(type, sizes, true);\n    });\n  }\n\n  private getColumnSize(index: number, type: RevoGrid.DimensionCols): number {\n    const rgCol = this.autoSizeColumns[type][index];\n    if (!rgCol) {\n      return 0;\n    }\n    return reduce(\n      this.providers.dataProvider.stores,\n      (r, s) => {\n        const perStore = reduce(\n          s.store.get('items'),\n          (prev, _row, i) => {\n            const item = getSourceItem(s.store, i);\n            return Math.max(prev || 0, this.getLength(item[rgCol.prop]));\n          },\n          0,\n        );\n        return Math.max(r, perStore);\n      },\n      rgCol.size || 0,\n    );\n  }\n\n  private columnSet(columns: ColumnItems): void {\n    for (let t of columnTypes) {\n      const type = t as RevoGrid.DimensionCols;\n      const cols = columns[type];\n\n      for (let i in cols) {\n        if (cols[i].autoSize || this.config?.allColumns) {\n          if (!this.autoSizeColumns) {\n            this.autoSizeColumns = {};\n          }\n          if (!this.autoSizeColumns[type]) {\n            this.autoSizeColumns[type] = {};\n          }\n          this.autoSizeColumns[type][i] = {\n            ...cols[i],\n            index: parseInt(i, 10),\n          };\n        }\n      }\n    }\n\n    if (this.dataResolve) {\n      this.dataResolve(this.autoSizeColumns);\n      this.clearPromise();\n    }\n  }\n\n  private clearPromise() {\n    this.dataResolve = null;\n    this.dataReject = null;\n  }\n\n  private isRangeEdit(e: EditEvent): e is Edition.BeforeRangeSaveDataDetails {\n    return !!(e as Edition.BeforeRangeSaveDataDetails).data;\n  }\n\n  private initiatePresizeElement(): HTMLElement {\n    const styleForFontTest: Partial<CSSStyleDeclaration> = {\n      position: 'absolute',\n      fontSize: '14px',\n      height: '0',\n      width: '0',\n      whiteSpace: 'nowrap',\n      top: '0',\n      overflowX: 'scroll',\n    };\n\n    const el = document.createElement('div');\n    for (let s in styleForFontTest) {\n      el.style[s] = styleForFontTest[s];\n    }\n    el.classList.add('revo-test-container');\n    return el;\n  }\n\n  destroy() {\n    super.destroy();\n    this.precsizeCalculationArea?.remove();\n  }\n}\n"]}