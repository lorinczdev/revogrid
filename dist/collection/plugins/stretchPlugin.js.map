{"version":3,"file":"stretchPlugin.js","sourceRoot":"","sources":["../../src/plugins/stretchPlugin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAC9B,OAAO,EAAE,sBAAsB,EAAE,MAAM,2BAA2B,CAAC;AAKnE,OAAO,EAAE,iBAAiB,EAAE,MAAM,UAAU,CAAC;AAC7C,OAAO,UAAU,MAAM,cAAc,CAAC;AAqBtC,MAAM,CAAC,OAAO,OAAO,aAAc,SAAQ,UAAU;EAGnD,YAAY,QAA6B,EAAY,SAAoB;IACvE,KAAK,CAAC,QAAQ,CAAC,CAAC;IADmC,cAAS,GAAT,SAAS,CAAW;IAFjE,oBAAe,GAAyB,IAAI,CAAC;IAKnD,qDAAqD;IACrD,IAAI,CAAC,UAAU,GAAG,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IAE9C,8BAA8B;IAC9B,MAAM,mBAAmB,GAAG,CAAC,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,EAAiC,EAAE,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IACnH,IAAI,CAAC,gBAAgB,CAAC,qBAAqB,EAAE,mBAAmB,CAAC,CAAC;EACpE,CAAC;EAEO,SAAS,CAAC,EAAE,IAAI,EAAE,SAAS,EAAgB;;IACjD,IAAI,IAAI,KAAK,OAAO,IAAI,IAAI,CAAC,eAAe,IAAI,CAAA,MAAA,IAAI,CAAC,eAAe,0CAAE,WAAW,MAAK,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE;MAC/G,IAAI,SAAS,EAAE;QACb,IAAI,CAAC,eAAe,CAAC,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC;QAC7C,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,WAAW,EAAE,CAAC;OACpB;KACF;EACH,CAAC;EAEO,eAAe;IACrB,MAAM,SAAS,GAAG,CAAC,EAAE,MAAM,EAA6B,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACpF,IAAI,CAAC,gBAAgB,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;EACnD,CAAC;EAEO,WAAW;IACjB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IAC5B,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;EAC3C,CAAC;EAEO,KAAK;IACX,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;MACzB,OAAO;KACR;IACD,MAAM,IAAI,GAA2B,OAAO,CAAC;IAC7C,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAC/E,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,cAAc,CAC7C,IAAI,kCAEC,KAAK,KACR,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,KACtD,IAAI,CACR,CAAC;EACJ,CAAC;EAED;;KAEG;EACH,YAAY,CAAC,OAAoB;IAC/B,8BAA8B;IAC9B,IAAI,CAAC,WAAW,EAAE,CAAC;IACnB,sBAAsB;IACtB,IAAI,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,CAAC,CAAC;IACnD,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,IAA4B,EAAE,EAAE;MAChD,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;MACrF,cAAc,IAAI,QAAQ,CAAC;IAC7B,CAAC,CAAC,CAAC;IACH,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE;MAC5B,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;MACxF,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;MACxC,MAAM,aAAa,GAAG,sBAAsB,CAAC,WAAW,EAAE,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;MAC3G,IAAI,aAAa,EAAE;QACjB,cAAc,IAAI,aAAa,CAAC;OACjC;KACF;IACD,IAAI,cAAc,GAAG,CAAC,EAAE;MACtB,4CAA4C;MAC5C,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;MACvC,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;MAClC;;;;SAIG;MACH,MAAM,OAAO,GAAG,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,KAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,CAAC,CAAC;MACzD,MAAM,IAAI,GAAG,cAAc,GAAG,OAAO,GAAG,CAAC,CAAC;MAE1C,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,OAAO,GAAG,IAAI,EAAE;QAC5C,IAAI,CAAC,eAAe,GAAG;UACrB,WAAW,EAAE,IAAI;UACjB,KAAK;UACL,IAAI;SACL,CAAC;QACF,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,IAAI,CAAC,eAAe,EAAE,CAAC;OACxB;KACF;EACH,CAAC;CACF;AAED;;GAEG;AACH,MAAM,UAAU,eAAe,CAAC,MAAyC;EACvE,OAAO,CAAC,CAAE,MAAwB,CAAC,YAAY,CAAC;AAClD,CAAC","sourcesContent":["import { each } from 'lodash';\nimport { calculateRowHeaderSize } from '../utils/row-header-utils';\nimport { RevoGrid, RevoPlugin } from '../interfaces';\nimport ColumnDataProvider, { ColumnCollection } from '../services/column.data.provider';\nimport { DataProvider } from '../services/data.provider';\nimport DimensionProvider, { ColumnItems } from '../services/dimension.provider';\nimport { getScrollbarWidth } from '../utils';\nimport BasePlugin from './basePlugin';\ntype Providers = {\n  dataProvider: DataProvider;\n  dimensionProvider: DimensionProvider;\n  columnProvider: ColumnDataProvider;\n};\n/**\n * This plugin serves to recalculate columns initially\n * Base on empty space if there is any\n * Currently plugin supports only increasing last column\n */\ntype ScrollChange = {\n  type: RevoGrid.DimensionType;\n  hasScroll: boolean;\n};\ntype StretchedData = {\n  initialSize: number;\n  size: number;\n  index: number;\n};\n\nexport default class StretchColumn extends BasePlugin {\n  private stretchedColumn: StretchedData | null = null;\n  private readonly scrollSize;\n  constructor(revogrid: HTMLRevoGridElement, protected providers: Providers) {\n    super(revogrid);\n\n    // calculate scroll bar size for current user session\n    this.scrollSize = getScrollbarWidth(document);\n\n    // subscribe to column changes\n    const beforecolumnapplied = ({ detail: { columns } }: CustomEvent<ColumnCollection>) => this.applyStretch(columns);\n    this.addEventListener('beforecolumnapplied', beforecolumnapplied);\n  }\n\n  private setScroll({ type, hasScroll }: ScrollChange) {\n    if (type === 'rgRow' && this.stretchedColumn && this.stretchedColumn?.initialSize === this.stretchedColumn.size) {\n      if (hasScroll) {\n        this.stretchedColumn.size -= this.scrollSize;\n        this.apply();\n        this.dropChanges();\n      }\n    }\n  }\n\n  private activateChanges() {\n    const setScroll = ({ detail }: CustomEvent<ScrollChange>) => this.setScroll(detail);\n    this.addEventListener('scrollchange', setScroll);\n  }\n\n  private dropChanges() {\n    this.stretchedColumn = null;\n    this.removeEventListener('scrollchange');\n  }\n\n  private apply() {\n    if (!this.stretchedColumn) {\n      return;\n    }\n    const type: RevoGrid.DimensionCols = 'rgCol';\n    const sizes = this.providers.dimensionProvider.stores[type].store.get('sizes');\n    this.providers.dimensionProvider.setCustomSizes(\n      type,\n      {\n        ...sizes,\n        [this.stretchedColumn.index]: this.stretchedColumn.size\n      }, true\n    );\n  }\n\n  /**\n   * Apply stretch changes\n   */\n  applyStretch(columns: ColumnItems) {\n    // unsubscribe from all events\n    this.dropChanges();\n    // calculate grid size\n    let sizeDifference = this.revogrid.clientWidth - 1;\n    each(columns, (_, type: RevoGrid.DimensionCols) => {\n      const realSize = this.providers.dimensionProvider.stores[type].store.get('realSize');\n      sizeDifference -= realSize;\n    });\n    if (this.revogrid.rowHeaders) {\n      const itemsLength = this.providers.dataProvider.stores.rgRow.store.get('source').length;\n      const header = this.revogrid.rowHeaders;\n      const rowHeaderSize = calculateRowHeaderSize(itemsLength, typeof header === 'object' ? header : undefined);\n      if (rowHeaderSize) {\n        sizeDifference -= rowHeaderSize;\n      }\n    }\n    if (sizeDifference > 0) {\n      // currently plugin accepts last column only\n      const index = columns.rgCol.length - 1;\n      const last = columns.rgCol[index];\n      /**\n       * has column\n       * no auto size applied\n       * size for column shouldn't be defined\n       */\n      const colSize = last?.size || this.revogrid.colSize || 0;\n      const size = sizeDifference + colSize - 1;\n\n      if (last && !last.autoSize && colSize < size) {\n        this.stretchedColumn = {\n          initialSize: size,\n          index,\n          size,\n        };\n        this.apply();\n        this.activateChanges();\n      }\n    }\n  }\n}\n\n/**\n * Check plugin type is Stretch\n */\nexport function isStretchPlugin(plugin: RevoPlugin.Plugin | StretchColumn): plugin is StretchColumn {\n  return !!(plugin as StretchColumn).applyStretch;\n}\n"]}