{"version":3,"file":"grouping.row.plugin.js","sourceRoot":"","sources":["../../../src/plugins/groupingRow/grouping.row.plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { Edition, RevoGrid } from '../../interfaces';\nimport ColumnDataProvider, { ColumnCollection } from '../../services/column.data.provider';\nimport { DataProvider } from '../../services/data.provider';\nimport { getPhysical, setItems } from '../../store/dataSource/data.store';\nimport { columnTypes } from '../../store/storeTypes';\nimport BasePlugin from '../basePlugin';\nimport { FILTER_TRIMMED_TYPE } from '../filter/filter.plugin';\nimport { TrimmedEntity } from '../../store/dataSource/trimmed.plugin';\nimport { GROUPING_ROW_TYPE, GROUP_EXPANDED, GROUP_EXPAND_EVENT, PSEUDO_GROUP_COLUMN, PSEUDO_GROUP_ITEM_VALUE } from './grouping.const';\nimport { doExpand, doCollapse } from './grouping.row.expand.service';\nimport { BeforeSourceSetEvent, GroupingOptions, OnExpandEvent, SourceGather } from './grouping.row.types';\nimport { ExpandedOptions, gatherGrouping, isGrouping, isGroupingColumn } from './grouping.service';\nimport { processDoubleConversionTrimmed, TRIMMED_GROUPING } from './grouping.trimmed.service';\n\nexport default class GroupingRowPlugin extends BasePlugin {\n  private options: GroupingOptions | undefined;\n\n  get hasProps() {\n    return this.options?.props && this.options?.props?.length;\n  }\n\n  get store() {\n    return this.providers.dataProvider.stores[GROUPING_ROW_TYPE].store;\n  }\n\n  // proxy for items get\n  get rowItems() {\n    return this.store.get('items');\n  }\n\n  get trimmed() {\n    return this.store.get('trimmed');\n  }\n\n  constructor(\n    protected revogrid: HTMLRevoGridElement,\n    protected providers: {\n      dataProvider: DataProvider;\n      columnProvider: ColumnDataProvider;\n    },\n  ) {\n    super(revogrid);\n  }\n\n  // befoce cell focus\n  private onFocus(e: CustomEvent<Edition.BeforeSaveDataDetails>) {\n    if (isGrouping(e.detail.model)) {\n      e.preventDefault();\n    }\n  }\n\n  // expand event triggered\n  private onExpand({ virtualIndex }: OnExpandEvent) {\n    const { source } = this.getSource();\n    let newTrimmed = this.trimmed[TRIMMED_GROUPING];\n\n    let i = getPhysical(this.store, virtualIndex);\n    const model = source[i];\n    const prevExpanded = model[GROUP_EXPANDED];\n    if (!prevExpanded) {\n      const { trimmed, items } = doExpand(virtualIndex, source, this.rowItems);\n      newTrimmed = { ...newTrimmed, ...trimmed };\n      if (items) {\n        setItems(this.store, items);\n      }\n    } else {\n      const { trimmed } = doCollapse(i, source);\n      newTrimmed = { ...newTrimmed, ...trimmed };\n      this.revogrid.clearFocus();\n    }\n\n    this.store.set('source', source);\n    this.revogrid.addTrimmed(newTrimmed, TRIMMED_GROUPING);\n  }\n\n  // get source based on proxy item collection to preserve rgRow order\n  private getSource(withoutGrouping = false) {\n    const source = this.store.get('source');\n    const items = this.store.get('proxyItems');\n    let index = 0;\n    // order important here, expected parent is first, then others\n    return items.reduce(\n      (result: SourceGather, i) => {\n        const model = source[i];\n        if (!withoutGrouping) {\n          result.source.push(model);\n          return result;\n        }\n\n        // grouping filter\n        if (!isGrouping(model)) {\n          result.source.push(model);\n          result.oldNewIndexes[i] = index;\n          index++;\n        } else {\n          if (model[GROUP_EXPANDED]) {\n            result.prevExpanded[model[PSEUDO_GROUP_ITEM_VALUE]] = true;\n          }\n        }\n        return result;\n      },\n      {\n        source: [],\n        prevExpanded: {},\n        oldNewIndexes: {},\n      },\n    );\n  }\n\n  private setColumnGrouping(cols?: RevoGrid.ColumnRegular[]) {\n    // if 0 column as holder\n    if (cols?.length) {\n      cols[0][PSEUDO_GROUP_COLUMN] = true;\n      return true;\n    }\n    return false;\n  }\n\n  private setColumns({ columns }: ColumnCollection) {\n    for (let type of columnTypes) {\n      if (this.setColumnGrouping(columns[type])) {\n        break;\n      }\n    }\n  }\n\n  // evaluate drag between groups\n  private onDrag(e: CustomEvent<{ from: number; to: number }>) {\n    const { from, to } = e.detail;\n    const isDown = to - from >= 0;\n    const { source } = this.getSource();\n    const items = this.rowItems;\n    let i = isDown ? from : to;\n    const end = isDown ? to : from;\n    for (; i < end; i++) {\n      const model = source[items[i]];\n      const isGroup = isGrouping(model);\n      if (isGroup) {\n        e.preventDefault();\n        return;\n      }\n    }\n  }\n\n  private beforeTrimmedApply(trimmed: Record<number, boolean>, type: string) {\n    /** Before filter apply remove grouping filtering */\n    if (type === FILTER_TRIMMED_TYPE) {\n      const source = this.store.get('source');\n      for (let index in trimmed) {\n        if (trimmed[index] && isGrouping(source[index])) {\n          trimmed[index] = false;\n        }\n      }\n    }\n  }\n\n  // subscribe to grid events to process them accordingly\n  private subscribe() {\n    /** if grouping present and new data source arrived */\n    this.addEventListener('beforesourceset', ({ detail }: CustomEvent<BeforeSourceSetEvent>) => this.onDataSet(detail));\n    this.addEventListener('beforecolumnsset', ({ detail }: CustomEvent<ColumnCollection>) => this.setColumns(detail));\n\n    /**\n     * filter applied need to clear grouping and apply again\n     * based on new results can be new grouping\n     */\n    this.addEventListener('beforetrimmed', ({ detail: { trimmed, trimmedType } }) => this.beforeTrimmedApply(trimmed, trimmedType));\n    /**\n     * sorting applied need to clear grouping and apply again\n     * based on new results whole grouping order will changed\n     */\n    this.addEventListener('afterSortingApply', () => this.doSourceUpdate({ ...this.options }));\n\n    /**\n     * Apply logic for focus inside of grouping\n     * We can't focus on grouping rows, navigation only inside of groups for now\n     */\n    this.addEventListener('beforecellfocus', e => this.onFocus(e));\n    /**\n     * Prevent rgRow drag outside the group\n     */\n    this.addEventListener('roworderchanged', e => this.onDrag(e));\n\n    /**\n     * When grouping expand icon was clicked\n     */\n    this.addEventListener(GROUP_EXPAND_EVENT, ({ detail }: CustomEvent<OnExpandEvent>) => this.onExpand(detail));\n  }\n\n  /**\n   * Starts global source update with group clearing and applying new one\n   * Initiated when need to reapply grouping\n   */\n  private doSourceUpdate(options?: ExpandedOptions) {\n    if (!this.hasProps) {\n      return;\n    }\n    /**\n     * Get source without grouping\n     * @param newOldIndexMap - provides us mapping with new indexes vs old indexes, we would use it for trimmed mapping\n     */\n    const { source, prevExpanded, oldNewIndexes } = this.getSource(true);\n    /**\n     * Group again\n     * @param oldNewIndexMap - provides us mapping with new indexes vs old indexes\n     */\n    const { sourceWithGroups, depth, trimmed, oldNewIndexMap, childrenByGroup } = gatherGrouping(\n      source,\n      this.options?.props || [],\n      {\n        prevExpanded,\n        ...options,\n      },\n    );\n\n    // setup source\n    this.providers.dataProvider.setData(\n      sourceWithGroups,\n      GROUPING_ROW_TYPE,\n      { depth, customRenderer: options?.groupLabelTemplate },\n      true,\n    );\n    this.updateTrimmed(trimmed, childrenByGroup, oldNewIndexes, oldNewIndexMap);\n  }\n\n  /**\n   * Apply grouping on data set\n   * Clear grouping from source\n   * If source came from other plugin\n   */\n  private onDataSet(data: BeforeSourceSetEvent) {\n    if (!this.hasProps || !data?.source || !data.source.length) {\n      return;\n    }\n    const source = data.source.filter(s => !isGrouping(s));\n    const expanded = this.revogrid.grouping || {};\n    const { sourceWithGroups, depth, trimmed, oldNewIndexMap, childrenByGroup } = gatherGrouping(\n      source,\n      this.options?.props || [],\n      {\n        ...(expanded || {}),\n      },\n    );\n    data.source = sourceWithGroups;\n    this.providers.dataProvider.setGrouping({ depth });\n    this.updateTrimmed(trimmed, childrenByGroup, oldNewIndexMap);\n  }\n\n  // apply grouping\n  setGrouping(options: GroupingOptions) {\n    // unsubscribe from all events when group applied\n    this.clearSubscriptions();\n    this.options = options;\n    // clear props, no grouping exists\n    if (!options.props || !Object.keys(options.props).length) {\n      this.clearGrouping();\n      return;\n    }\n    // props exist and source inited\n    const { source } = this.getSource();\n    if (source.length) {\n      this.doSourceUpdate({ ...options });\n    }\n    // props exist and columns inited\n    for (let t of columnTypes) {\n      if (this.setColumnGrouping(this.providers.columnProvider.getColumns(t))) {\n        this.providers.columnProvider.refreshByType(t);\n        break;\n      }\n    }\n\n    // if has any grouping subscribe to events again\n    this.subscribe();\n  }\n\n  // clear grouping\n  clearGrouping() {\n    // clear columns\n    columnTypes.forEach(t => {\n      const cols = this.providers.columnProvider.getColumns(t);\n      let deleted = false;\n      cols.forEach(c => {\n        if (isGroupingColumn(c)) {\n          delete c[PSEUDO_GROUP_COLUMN];\n          deleted = true;\n        }\n      });\n      // if column store had grouping clear and refresh\n      if (deleted) {\n        this.providers.columnProvider.refreshByType(t);\n      }\n    });\n    // clear rows\n    const { source, oldNewIndexes } = this.getSource(true);\n    this.providers.dataProvider.setData(source, GROUPING_ROW_TYPE, undefined, true);\n    this.updateTrimmed(undefined, undefined, oldNewIndexes);\n  }\n\n  private updateTrimmed(\n    trimmedGroup: TrimmedEntity = {},\n    _childrenByGroup: Record<number, number[]> = {},\n    firstLevelMap: Record<number, number>,\n    secondLevelMap?: Record<number, number>,\n  ) {\n    // map previously trimmed data\n    const trimemedOptionsToUpgrade = processDoubleConversionTrimmed(this.trimmed, firstLevelMap, secondLevelMap);\n    for (let type in trimemedOptionsToUpgrade) {\n      this.revogrid.addTrimmed(trimemedOptionsToUpgrade[type], type);\n    }\n\n    // const emptyGroups = this.filterOutEmptyGroups(trimemedOptionsToUpgrade, childrenByGroup);\n\n    // setup trimmed data for grouping\n    this.revogrid.addTrimmed({ ...trimmedGroup }, TRIMMED_GROUPING);\n  }\n}\n"]}