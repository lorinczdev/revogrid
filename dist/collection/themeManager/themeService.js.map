{"version":3,"file":"themeService.js","sourceRoot":"","sources":["../../src/themeManager/themeService.ts"],"names":[],"mappings":"AACA,OAAO,YAAY,MAAM,iBAAiB,CAAC;AAC3C,OAAO,YAAY,MAAM,iBAAiB,CAAC;AAC3C,OAAO,aAAa,MAAM,kBAAkB,CAAC;AAE7C,MAAM,CAAC,MAAM,aAAa,GAAG,SAAS,CAAC;AACvC,MAAM,CAAC,MAAM,aAAa,GAAuB,CAAC,aAAa,EAAE,UAAU,EAAE,SAAS,EAAE,cAAc,EAAE,aAAa,CAAC,CAAC;AACvH,MAAM,CAAC,OAAO,OAAO,YAAY;EAI/B,IAAI,KAAK;IACP,OAAO,IAAI,CAAC,YAAY,CAAC;EAC3B,CAAC;EAED,IAAI,OAAO;IACT,OAAO,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC;EAChE,CAAC;EAED,IAAI,OAAO,CAAC,IAAY;IACtB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;EAC5B,CAAC;EAED,YAAY,GAA2B;IAd/B,kBAAa,GAAW,CAAC,CAAC;IAehC,IAAI,CAAC,aAAa,GAAG,GAAG,CAAC,OAAO,CAAC;IACjC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;EAC3B,CAAC;EAED,QAAQ,CAAC,KAAuB;IAC9B,MAAM,WAAW,GAAG,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACjD,QAAQ,WAAW,EAAE;MACnB,KAAK,UAAU,CAAC;MAChB,KAAK,cAAc;QACjB,IAAI,CAAC,YAAY,GAAG,IAAI,aAAa,EAAE,CAAC;QACxC,MAAM;MACR,KAAK,SAAS,CAAC;MACf,KAAK,aAAa;QAChB,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;QACvC,MAAM;MACR;QACE,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;QACvC,MAAM;KACT;EACH,CAAC;EAED,MAAM,CAAC,QAAQ,CAAC,KAAa;IAC3B,IAAI,aAAa,CAAC,OAAO,CAAC,KAAyB,CAAC,GAAG,CAAC,CAAC,EAAE;MACzD,OAAO,KAAyB,CAAC;KAClC;IACD,OAAO,aAAa,CAAC;EACvB,CAAC;CACF","sourcesContent":["import { ThemeSpace } from '../interfaces';\nimport ThemeCompact from './theme.compact';\nimport ThemeDefault from './theme.default';\nimport ThemeMaterial from './theme.material';\n\nexport const DEFAULT_THEME = 'default';\nexport const allowedThemes: ThemeSpace.Theme[] = [DEFAULT_THEME, 'material', 'compact', 'darkMaterial', 'darkCompact'];\nexport default class ThemeService {\n  private currentTheme: ThemeSpace.ThemePackage;\n  private customRowSize: number = 0;\n\n  get theme() {\n    return this.currentTheme;\n  }\n\n  get rowSize(): number {\n    return this.customRowSize || this.currentTheme.defaultRowSize;\n  }\n\n  set rowSize(size: number) {\n    this.customRowSize = size;\n  }\n\n  constructor(cfg: ThemeSpace.ThemeConfig) {\n    this.customRowSize = cfg.rowSize;\n    this.register('default');\n  }\n\n  register(theme: ThemeSpace.Theme) {\n    const parsedTheme = ThemeService.getTheme(theme);\n    switch (parsedTheme) {\n      case 'material':\n      case 'darkMaterial':\n        this.currentTheme = new ThemeMaterial();\n        break;\n      case 'compact':\n      case 'darkCompact':\n        this.currentTheme = new ThemeCompact();\n        break;\n      default:\n        this.currentTheme = new ThemeDefault();\n        break;\n    }\n  }\n\n  static getTheme(theme: string): ThemeSpace.Theme {\n    if (allowedThemes.indexOf(theme as ThemeSpace.Theme) > -1) {\n      return theme as ThemeSpace.Theme;\n    }\n    return DEFAULT_THEME;\n  }\n}\n"]}