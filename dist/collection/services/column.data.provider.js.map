{"version":3,"file":"column.data.provider.js","sourceRoot":"","sources":["../../src/services/column.data.provider.ts"],"names":[],"mappings":"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","sourcesContent":["import reduce from 'lodash/reduce';\nimport each from 'lodash/each';\nimport find from 'lodash/find';\n\nimport DataStore, {\n  getSourceItem,\n  getSourceItemVirtualIndexByProp,\n  Groups,\n  setSourceByVirtualIndex,\n} from '../store/dataSource/data.store';\nimport { columnTypes } from '../store/storeTypes';\nimport { RevoGrid } from '../interfaces';\nimport GroupingColumnPlugin, {\n  ColumnGrouping,\n  isColGrouping,\n} from '../plugins/groupingColumn/grouping.col.plugin';\n\nexport type ColumnCollection = {\n  columns: Record<RevoGrid.DimensionCols, RevoGrid.ColumnRegular[]>;\n  columnByProp: Record<RevoGrid.ColumnProp, RevoGrid.ColumnRegular[]>;\n  columnGrouping: ColumnGrouping;\n  maxLevel: number;\n  sort: Record<RevoGrid.ColumnProp, RevoGrid.ColumnRegular>;\n};\n\nexport type ColumnDataSources = Record<\n  RevoGrid.DimensionCols,\n  DataStore<RevoGrid.ColumnRegular, RevoGrid.DimensionCols>\n>;\ntype Sorting = Record<RevoGrid.ColumnProp, RevoGrid.ColumnRegular>;\ntype SortingOrder = Record<RevoGrid.ColumnProp, 'asc' | 'desc'>;\n\nexport default class ColumnDataProvider {\n  readonly dataSources: ColumnDataSources;\n  sorting: Sorting | null = null;\n\n  get order() {\n    return reduce(\n      this.sorting,\n      (r: SortingOrder, c, prop) => {\n        r[prop] = c.order;\n        return r;\n      },\n      {},\n    );\n  }\n\n  get stores() {\n    return this.dataSources;\n  }\n  constructor() {\n    this.dataSources = reduce(\n      columnTypes,\n      (sources: Partial<ColumnDataSources>, k: RevoGrid.DimensionCols) => {\n        sources[k] = new DataStore(k);\n        return sources;\n      },\n      {},\n    ) as ColumnDataSources;\n  }\n\n  column(\n    c: number,\n    pin?: RevoGrid.DimensionColPin,\n  ): RevoGrid.ColumnRegular | undefined {\n    return this.getColumn(c, pin || 'rgCol');\n  }\n\n  getColumn(\n    virtualIndex: number,\n    type: RevoGrid.DimensionCols,\n  ): RevoGrid.ColumnRegular | undefined {\n    return getSourceItem(this.dataSources[type].store, virtualIndex);\n  }\n\n  getRawColumns() {\n    return reduce(\n      this.dataSources,\n      (\n        result: Record<RevoGrid.DimensionCols, RevoGrid.ColumnRegular[]>,\n        item,\n        type: RevoGrid.DimensionCols,\n      ) => {\n        result[type] = item.store.get('source');\n        return result;\n      },\n      {\n        rgCol: [],\n        colPinStart: [],\n        colPinEnd: [],\n      },\n    );\n  }\n\n  getColumns(type: RevoGrid.DimensionCols | 'all' = 'all') {\n    if (type !== 'all') {\n      return this.dataSources[type].store.get('source');\n    }\n    return columnTypes.reduce((r: RevoGrid.ColumnRegular[], t) => {\n      r.push(...this.dataSources[t].store.get('source'));\n      return r;\n    }, []);\n  }\n\n  getColumnIndexByProp(\n    prop: RevoGrid.ColumnProp,\n    type: RevoGrid.DimensionCols,\n  ): number {\n    return getSourceItemVirtualIndexByProp(this.dataSources[type].store, prop);\n  }\n\n  getColumnByProp(\n    prop: RevoGrid.ColumnProp,\n    type: RevoGrid.DimensionCols,\n  ): RevoGrid.ColumnRegular | undefined {\n    const items = this.dataSources[type].store.get('source');\n    return find(items, { prop });\n  }\n\n  refreshByType(type: RevoGrid.DimensionCols) {\n    this.dataSources[type].refresh();\n  }\n\n  setColumns(data: ColumnCollection): ColumnCollection {\n    columnTypes.forEach(k => {\n      // set columns data\n      this.dataSources[k].updateData(data.columns[k], {\n        // max depth level\n        depth: data.maxLevel,\n\n        // groups\n        groups: data.columnGrouping[k].reduce((res: Groups, g) => {\n            if (!res[g.level]) {\n              res[g.level] = [];\n            }\n            res[g.level].push(g);\n            return res;\n          },\n          {},\n        ),\n      });\n    });\n    this.sorting = data.sort;\n    return data;\n  }\n\n  updateColumns(cols: RevoGrid.ColumnRegular[]) {\n    // collect column by type and propert\n    const columnByKey: Partial<\n      Record<\n        RevoGrid.DimensionCols,\n        Record<RevoGrid.ColumnProp, RevoGrid.ColumnRegular>\n      >\n    > = cols.reduce(\n      (\n        res: Partial<\n          Record<\n            RevoGrid.DimensionCols,\n            Record<RevoGrid.ColumnProp, RevoGrid.ColumnRegular>\n          >\n        >,\n        c,\n      ) => {\n        const type = ColumnDataProvider.getColumnType(c);\n        if (!res[type]) {\n          res[type] = {};\n        }\n        res[type][c.prop] = c;\n        return res;\n      },\n      {},\n    );\n\n    // find indexes in source\n    const colByIndex: Partial<\n      Record<RevoGrid.DimensionCols, Record<number, RevoGrid.ColumnRegular>>\n    > = {};\n    each(columnByKey, (colsToUpdate, type: RevoGrid.DimensionCols) => {\n      const items = this.dataSources[type].store.get('source');\n      colByIndex[type] = items.reduce(\n        (result: Record<number, RevoGrid.ColumnRegular>, rgCol, index) => {\n          const colToUpdateIfExists = colsToUpdate[rgCol.prop];\n          if (colToUpdateIfExists) {\n            result[index] = colToUpdateIfExists;\n          }\n          return result;\n        },\n        {},\n      );\n    });\n    each(colByIndex, (colsToUpdate, type: RevoGrid.DimensionCols) =>\n      setSourceByVirtualIndex(this.dataSources[type].store, colsToUpdate),\n    );\n  }\n\n  updateColumn(column: RevoGrid.ColumnRegular, index: number) {\n    const type = ColumnDataProvider.getColumnType(column);\n    setSourceByVirtualIndex(this.dataSources[type].store, { [index]: column });\n  }\n\n  updateColumnSorting(\n    column: RevoGrid.ColumnRegular,\n    index: number,\n    sorting: 'asc' | 'desc',\n    additive: boolean,\n  ): RevoGrid.ColumnRegular {\n    if (!additive) {\n      this.clearSorting();\n    }\n    column.order = sorting;\n    this.sorting[column.prop] = column;\n    this.updateColumn(column, index);\n    return column;\n  }\n\n  clearSorting(): void {\n    const types = reduce(\n      this.sorting,\n      (\n        r: { [key in Partial<RevoGrid.DimensionCols>]: boolean },\n        c: RevoGrid.ColumnRegular,\n      ) => {\n        const k = ColumnDataProvider.getColumnType(c);\n        r[k] = true;\n        return r;\n      },\n      {} as { [key in Partial<RevoGrid.DimensionCols>]: boolean },\n    );\n    each(types, (_, type: RevoGrid.DimensionCols) => {\n      const cols = this.dataSources[type].store.get('source');\n      each(cols, (c: RevoGrid.ColumnRegular) => (c.order = undefined));\n      this.dataSources[type].setData({ source: [...cols] });\n    });\n\n    this.sorting = {};\n  }\n\n  static getSizes(\n    cols: RevoGrid.ColumnRegular[],\n  ): RevoGrid.ViewSettingSizeProp {\n    return reduce(\n      cols,\n      (\n        res: RevoGrid.ViewSettingSizeProp,\n        c: RevoGrid.ColumnRegular,\n        i: number,\n      ) => {\n        if (c.size) {\n          res[i] = c.size;\n        }\n        return res;\n      },\n      {},\n    );\n  }\n\n  static getColumnByProp(\n    columns: RevoGrid.ColumnData,\n    prop: RevoGrid.ColumnProp,\n  ): RevoGrid.ColumnRegular | undefined {\n    return find(columns, c => {\n      if (isColGrouping(c)) {\n        return ColumnDataProvider.getColumnByProp(c.children, prop);\n      }\n      return c.prop === prop;\n    }) as RevoGrid.ColumnRegular | undefined;\n  }\n\n  // columns processing\n  static getColumns(\n    columns: RevoGrid.ColumnData,\n    level = 0,\n    types?: RevoGrid.ColumnTypes,\n  ): ColumnCollection {\n    const collection: ColumnCollection = {\n      // columns as they are in stores per type\n      columns: {\n        rgCol: [],\n        colPinStart: [],\n        colPinEnd: [],\n      },\n      // columns grouped by prop for quick access\n      columnByProp: {},\n      // column grouping\n      columnGrouping: {\n        rgCol: [],\n        colPinStart: [],\n        colPinEnd: [],\n      },\n      // max depth level for column grouping\n      maxLevel: level,\n      // sorting\n      sort: {},\n    };\n\n    return reduce(\n      columns,\n      (res: ColumnCollection, colData: RevoGrid.ColumnDataSchema) => {\n        // Grouped column\n        if (isColGrouping(colData)) {\n          return GroupingColumnPlugin.gatherGroup(\n            res,\n            colData,\n            ColumnDataProvider.getColumns(colData.children, level + 1, types),\n            level,\n          );\n        }\n        // Regular column\n        const regularColumn = {\n          ...(colData.columnType && types && types[colData.columnType]),\n          ...colData,\n        };\n        // Regular column, no Pin\n        if (!regularColumn.pin) {\n          res.columns.rgCol.push(regularColumn);\n          // Pin\n        } else {\n          res.columns[regularColumn.pin].push(regularColumn);\n        }\n        if (regularColumn.order) {\n          res.sort[regularColumn.prop] = regularColumn;\n        }\n        // technically it's possible that some columns have same prop, but better to avoid it\n        if (!res.columnByProp[regularColumn.prop]) {\n          res.columnByProp[regularColumn.prop] = [];\n        }\n        res.columnByProp[regularColumn.prop].push(regularColumn);\n\n        // trigger setup hook if present\n        regularColumn.beforeSetup && regularColumn.beforeSetup(regularColumn);\n        return res;\n      },\n      collection,\n    );\n  }\n\n  static getColumnType(rgCol: RevoGrid.ColumnRegular): RevoGrid.DimensionCols {\n    if (rgCol.pin) {\n      return rgCol.pin;\n    }\n    return 'rgCol';\n  }\n}\n"]}