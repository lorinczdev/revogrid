{"version":3,"file":"dimension.provider.js","sourceRoot":"","sources":["../../src/services/dimension.provider.ts"],"names":[],"mappings":"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","sourcesContent":["import reduce from 'lodash/reduce';\nimport { debounce } from 'lodash';\nimport { columnTypes, rowTypes } from '../store/storeTypes';\nimport DimensionStore from '../store/dimension/dimension.store';\nimport ViewportProvider from './viewport.provider';\nimport { RevoGrid } from '../interfaces';\nimport { getItemByIndex } from '../store/dimension/dimension.helpers';\nimport { gatherTrimmedItems, Trimmed } from '../store/dataSource/trimmed.plugin';\nimport { RESIZE_INTERVAL } from '../utils/consts';\n\nexport type ColumnItems = Record<RevoGrid.DimensionCols, RevoGrid.ColumnRegular[]>;\n\nexport type DimensionStores = { [T in RevoGrid.MultiDimensionType]: DimensionStore };\nexport type DimensionConfig = {\n  realSizeChanged(k: RevoGrid.MultiDimensionType): void;\n};\n/**\n * Dimension provider\n * Stores dimension information and custom sizes\n */\nexport default class DimensionProvider {\n  readonly stores: DimensionStores;\n  constructor(private viewports: ViewportProvider, config: DimensionConfig) {\n    const sizeChanged = debounce((k: RevoGrid.MultiDimensionType) => config.realSizeChanged(k), RESIZE_INTERVAL);\n    this.stores = reduce(\n      [...rowTypes, ...columnTypes],\n      (sources: Partial<DimensionStores>, k: RevoGrid.MultiDimensionType) => {\n        sources[k] = new DimensionStore();\n        sources[k].store.onChange('realSize', () => sizeChanged(k));\n        return sources;\n      },\n      {},\n    ) as DimensionStores;\n  }\n  \n  /**\n   * Clear old sizes from dimension and viewports\n   * @param type - dimension type\n   * @param count - count of items\n   */\n  clearSize(t: RevoGrid.MultiDimensionType, count: number) {\n    this.stores[t].drop();\n    // after we done with drop trigger viewport recalculaction\n    this.viewports.stores[t].setOriginalSizes(this.stores[t].store.get('originItemSize'));\n    this.setItemCount(count, t);\n  }\n\n  /**\n   * Apply new custom sizes to dimension and view port\n   * @param type - dimension type\n   * @param sizes - new custom sizes\n   * @param keepOld - keep old sizes merge new with old\n   */\n  setCustomSizes(type: RevoGrid.MultiDimensionType, sizes: RevoGrid.ViewSettingSizeProp, keepOld = false) {\n    let newSizes = sizes;\n    if (keepOld) {\n      const oldSizes = this.stores[type].store.get('sizes');\n      newSizes = {\n        ...oldSizes,\n        ...sizes,\n      };\n    }\n    this.stores[type].setDimensionSize(newSizes);\n    this.viewports.stores[type].setViewPortDimensionSizes(\n      newSizes,\n      !keepOld ? this.stores[type].store.get('originItemSize') : undefined\n    );\n  }\n\n  setItemCount(realCount: number, type: RevoGrid.MultiDimensionType) {\n    this.viewports.stores[type].setViewport({ realCount });\n    this.stores[type].setStore({ count: realCount });\n  }\n\n  /**\n   * Apply trimmed items\n   * @param trimmed - trimmed items\n   * @param type \n   */\n  setTrimmed(trimmed: Partial<Trimmed>, type: RevoGrid.MultiDimensionType) {\n    const allTrimmed = gatherTrimmedItems(trimmed);\n    const dimStoreType = this.stores[type];\n    dimStoreType.setStore({ trimmed: allTrimmed });\n    this.viewports.stores[type].setViewPortDimensionSizes(dimStoreType.store.get('sizes'));\n  }\n\n  /**\n   * Sets dimension data and view port coordinate\n   * @param items - data/column items\n   * @param type - dimension type\n   */\n  setData(\n    itemCount: number,\n    type: RevoGrid.MultiDimensionType,\n    noVirtual = false\n  ) {\n    this.setItemCount(itemCount, type);\n    if (noVirtual) {\n      this.setNoVirtual(type);\n    }\n    this.updateViewport(type);\n  }\n  /**\n   * Virtualization will get disabled\n   * @param type - dimension type\n   */\n\n  private setNoVirtual(type: RevoGrid.MultiDimensionType) {\n    const dimension: RevoGrid.DimensionSettingsState = this.stores[type].getCurrentState();\n    this.viewports.stores[type].setViewport({ virtualSize: dimension.realSize });\n  }\n\n  /**\n   * Drop all dimension data\n   */\n  dropColumns(types: RevoGrid.MultiDimensionType[] = columnTypes) {\n    for (let type of types) {\n      this.stores[type].drop();\n      this.viewports.stores[type].clearItems(); // check if needed\n    }\n  }\n\n  getFullSize(): { x: number; y: number } {\n    let x = 0;\n    let y = 0;\n    for (let type of columnTypes) {\n      x += this.stores[type]?.store.get('realSize') || 0;\n    }\n    for (let type of rowTypes) {\n      y += this.stores[type]?.store.get('realSize') || 0;\n    }\n    return { y, x };\n  }\n\n  setNewColumns(\n    type: RevoGrid.MultiDimensionType,\n    newLength: number,\n    sizes?: RevoGrid.ViewSettingSizeProp,\n    noVirtual = false\n  ) {\n    this.setItemCount(newLength, type);\n    this.setCustomSizes(type, sizes);\n\n    if (noVirtual) {\n      this.setNoVirtual(type);\n    }\n    this.updateViewport(type);\n  }\n  \n  updateViewport(type: RevoGrid.MultiDimensionType) {\n    this.setViewPortCoordinate({\n      coordinate: this.viewports.stores[type].lastCoordinate,\n      type,\n    });\n  }\n\n  setViewPortCoordinate({ coordinate, type }: { coordinate: number; type: RevoGrid.MultiDimensionType }) {\n    const dimension = this.stores[type].getCurrentState();\n    this.viewports.stores[type].setViewPortCoordinate(coordinate, dimension);\n  }\n\n  getViewPortPos(e: RevoGrid.ViewPortScrollEvent): number {\n    const dimension: RevoGrid.DimensionSettingsState = this.stores[e.dimension].getCurrentState();\n    const item = getItemByIndex(dimension, e.coordinate);\n\n    return item.start;\n  }\n\n  setSettings(data: Partial<RevoGrid.DimensionSettingsState>, dimensionType: RevoGrid.DimensionType) {\n    let stores: RevoGrid.MultiDimensionType[] = [];\n    switch (dimensionType) {\n      case 'rgCol':\n        stores = columnTypes;\n        break;\n      case 'rgRow':\n        stores = rowTypes;\n        break;\n    }\n    for (let s of stores) {\n      this.stores[s].setStore(data);\n    }\n  }\n}\n"]}