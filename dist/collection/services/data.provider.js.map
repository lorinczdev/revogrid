{"version":3,"file":"data.provider.js","sourceRoot":"","sources":["../../src/services/data.provider.ts"],"names":[],"mappings":"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","sourcesContent":["import reduce from 'lodash/reduce';\n\nimport DataStore, { getSourceItem, getVisibleSourceItem, Groups, setSourceByVirtualIndex } from '../store/dataSource/data.store';\nimport { isRowType, rowTypes } from '../store/storeTypes';\nimport DimensionProvider from './dimension.provider';\nimport { RevoGrid, Edition } from '../interfaces';\nimport { Trimmed } from '../store/dataSource/trimmed.plugin';\nimport { GroupLabelTemplateFunc } from '../plugins/groupingRow/grouping.row.types';\n\nexport type RowDataSources = { [T in RevoGrid.DimensionRows]: DataStore<RevoGrid.DataType, RevoGrid.DimensionRows> };\n\nexport class DataProvider {\n  public readonly stores: RowDataSources;\n  constructor(private dimensionProvider: DimensionProvider) {\n    this.stores = reduce(\n      rowTypes,\n      (sources: Partial<RowDataSources>, k: RevoGrid.DimensionRows) => {\n        sources[k] = new DataStore(k);\n        return sources;\n      },\n      {},\n    ) as RowDataSources;\n  }\n\n  setData(\n    data: RevoGrid.DataType[],\n    type: RevoGrid.DimensionRows = 'rgRow',\n    grouping?: { depth: number; groups?: Groups, customRenderer?: GroupLabelTemplateFunc },\n    silent = false,\n  ): RevoGrid.DataType[] {\n    // set rgRow data\n    this.stores[type].updateData([...data], grouping, silent);\n    this.dimensionProvider.setData(data.length, type, type !== 'rgRow');\n    return data;\n  }\n\n  getModel(virtualIndex: number, type: RevoGrid.DimensionRows = 'rgRow') {\n    const store = this.stores[type].store;\n    return getSourceItem(store, virtualIndex);\n  }\n\n  setCellData({ type, rowIndex, prop, val }: Edition.BeforeSaveDataDetails) {\n    const model = this.getModel(rowIndex, type);\n    model[prop] = val;\n    setSourceByVirtualIndex(this.stores[type].store, { [rowIndex]: model });\n  }\n\n  refresh(type: RevoGrid.DimensionRows | 'all' = 'all') {\n    if (isRowType(type)) {\n      this.refreshItems(type);\n    }\n    rowTypes.forEach((t: RevoGrid.DimensionRows) => this.refreshItems(t));\n  }\n\n  refreshItems(type: RevoGrid.DimensionRows = 'rgRow') {\n    const items = this.stores[type].store.get('items');\n    this.stores[type].setData({ items: [...items] });\n  }\n\n  setGrouping({ depth }: { depth: number }, type: RevoGrid.DimensionRows = 'rgRow') {\n    this.stores[type].setData({ groupingDepth: depth });\n  }\n\n  setTrimmed(trimmed: Partial<Trimmed>, type: RevoGrid.DimensionRows = 'rgRow') {\n    const store = this.stores[type];\n    store.addTrimmed(trimmed);\n    this.dimensionProvider.setTrimmed(trimmed, type);\n    if (type === 'rgRow') {\n      this.dimensionProvider.setData(getVisibleSourceItem(store.store).length, type);\n    }\n  }\n}\n"]}