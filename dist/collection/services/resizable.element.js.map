{"version":3,"file":"resizable.element.js","sourceRoot":"","sources":["../../src/services/resizable.element.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAS,MAAM,eAAe,CAAC;AAEzC,OAAO,EAAe,eAAe,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAC;AAEnF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,KAAgD,EAAE,QAAiB,EAAE,EAAE;EACtG,MAAM,SAAS,GAAY,EAAE,CAAC;EAC9B,MAAM,SAAS,GACb,CAAC,KAAK,CAAC,SAAS;IACd,IAAI,eAAe,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE;MAC7B,IAAI,CAAC,CAAC,SAAS,KAAK,YAAY,CAAC,GAAG,EAAE;QACpC,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;OACrC;IACH,CAAC,CAAC,CAAC;IACL,IAAI,CAAC;EACP,IAAI,KAAK,CAAC,SAAS,EAAE;IACnB,IAAI,KAAK,CAAC,MAAM,EAAE;MAChB,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,MAAM,EAAE;QAC1B,SAAS,CAAC,IAAI,CACZ,WACE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,EAAE,EAChC,UAAU,EAAE,CAAC,CAAC,EAAE;;YACd,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,MAAA,KAAK,CAAC,aAAa,sDAAG,CAAC,CAAC,CAAC;UAC3B,CAAC,EACD,WAAW,EAAE,CAAC,CAAa,EAAE,EAAE,CAAC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,UAAU,CAAC,CAAC,CAAC,EACxD,YAAY,EAAE,CAAC,CAAa,EAAE,EAAE,CAAC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,UAAU,CAAC,CAAC,CAAC,EACzD,KAAK,EAAE,uBAAuB,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GAC/C,CACH,CAAC;OACH;KACF;GACF;OAAM;IACL,IAAI,KAAK,CAAC,MAAM,EAAE;MAChB,KAAK,IAAI,CAAC,IAAI,KAAK,CAAC,MAAM,EAAE;QAC1B,SAAS,CAAC,IAAI,CACZ,WACE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc,EAAE,EAChC,YAAY,EAAE,CAAC,CAAa,EAAE,EAAE,CAAC,CAAC,CAAC,cAAc,EAAE,EACnD,UAAU,EAAE,CAAC,CAAC,EAAE;;YACd,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,MAAA,KAAK,CAAC,aAAa,sDAAG,CAAC,CAAC,CAAC;UAC3B,CAAC,EACD,KAAK,EAAE,iCAAiC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,GACzD,CACH,CAAC;OACH;KACF;GACF;EACD,OAAO,CACL,2BAAS,KAAK,IAAE,GAAG,EAAE,CAAC,CAAc,EAAE,EAAE,CAAC,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,GAAG,CAAC,CAAC,CAAC;IACvD,QAAQ;IACR,SAAS,CACN,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { h, VNode } from '@stencil/core';\nimport { RevoGrid } from '../interfaces';\nimport { ResizeProps, ResizeDirective, ResizeEvents } from './resizable.directive';\n\nexport const ResizableElement = (props: Partial<ResizeProps> & RevoGrid.CellProps, children: VNode[]) => {\n  const resizeEls: VNode[] = [];\n  const directive =\n    (props.canResize &&\n      new ResizeDirective(props, e => {\n        if (e.eventName === ResizeEvents.end) {\n          props.onResize && props.onResize(e);\n        }\n      })) ||\n    null;\n  if (props.canResize) {\n    if (props.active) {\n      for (let p in props.active) {\n        resizeEls.push(\n          <div\n            onClick={e => e.preventDefault()}\n            onDblClick={e => {\n              e.preventDefault();\n              props.onDoubleClick?.(e);\n            }}\n            onMouseDown={(e: MouseEvent) => directive?.handleDown(e)}\n            onTouchStart={(e: TouchEvent) => directive?.handleDown(e)}\n            class={`resizable resizable-${props.active[p]}`}\n          />,\n        );\n      }\n    }\n  } else {\n    if (props.active) {\n      for (let p in props.active) {\n        resizeEls.push(\n          <div\n            onClick={e => e.preventDefault()}\n            onTouchStart={(e: TouchEvent) => e.preventDefault()}\n            onDblClick={e => {\n              e.preventDefault();\n              props.onDoubleClick?.(e);\n            }}\n            class={`no-resize resizable resizable-${props.active[p]}`}\n          />,\n        );\n      }\n    }\n  }\n  return (\n    <div {...props} ref={(e: HTMLElement) => directive?.set(e)}>\n      {children}\n      {resizeEls}\n    </div>\n  );\n};\n"]}