{"version":3,"file":"viewport.provider.js","sourceRoot":"","sources":["../../src/services/viewport.provider.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,eAAe,CAAC;AACnC,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAC5D,OAAO,aAAa,MAAM,kCAAkC,CAAC;AAI7D,MAAM,CAAC,OAAO,OAAO,gBAAgB;EAEnC;IACE,IAAI,CAAC,MAAM,GAAG,MAAM,CAClB,CAAC,GAAG,QAAQ,EAAE,GAAG,WAAW,CAAC,EAC7B,CAAC,OAAgC,EAAE,CAA8B,EAAE,EAAE;MACnE,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;MAClC,OAAO,OAAO,CAAC;IACjB,CAAC,EACD,EAAE,CACe,CAAC;EACtB,CAAC;EAED,WAAW,CAAC,IAAiC,EAAE,IAAqC;IAClF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;EACtC,CAAC;CACF","sourcesContent":["import reduce from 'lodash/reduce';\nimport { columnTypes, rowTypes } from '../store/storeTypes';\nimport ViewportStore from '../store/viewPort/viewport.store';\nimport { RevoGrid } from '../interfaces';\n\nexport type ViewportStores = { [T in RevoGrid.MultiDimensionType]: ViewportStore };\nexport default class ViewportProvider {\n  readonly stores: ViewportStores;\n  constructor() {\n    this.stores = reduce(\n      [...rowTypes, ...columnTypes],\n      (sources: Partial<ViewportStores>, k: RevoGrid.MultiDimensionType) => {\n        sources[k] = new ViewportStore(k);\n        return sources;\n      },\n      {},\n    ) as ViewportStores;\n  }\n\n  setViewport(type: RevoGrid.MultiDimensionType, data: Partial<RevoGrid.ViewportState>): void {\n    this.stores[type].setViewport(data);\n  }\n}\n"]}