{"version":3,"file":"keyboard.service.js","sourceRoot":"","sources":["../../../src/components/overlay/keyboard.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, Selection } from '../../interfaces';\nimport { getRange } from '../../store/selection/selection.helpers';\nimport SelectionStoreService from '../../store/selection/selection.store.service';\nimport { codesLetter } from '../../utils/keyCodes';\nimport { isAll, isClear, isCopy, isCut, isEnterKey, isLetterKey, isPaste } from '../../utils/keyCodes.utils';\nimport { timeout } from '../../utils';\nimport { EventData, getCoordinate, isAfterLast, isBeforeFirst } from './selection.utils';\nimport { RESIZE_INTERVAL } from '../../utils/consts';\n\ntype Config = {\n  selectionStoreService: SelectionStoreService;\n  selectionStore: Observable<Selection.SelectionStoreState>;\n\n  applyEdit(val?: any): void;\n  cancelEdit(): void;\n  clearCell(): void;\n  focusNext(focus: Selection.Cell, next: Partial<Selection.Cell>): boolean;\n  getData(): any;\n  internalPaste(): void;\n  range(range: Selection.RangeArea): boolean;\n  selectAll(): void;\n};\n\nconst DIRECTION_CODES: string[] = [\n  codesLetter.TAB,\n  codesLetter.ARROW_UP,\n  codesLetter.ARROW_DOWN,\n  codesLetter.ARROW_LEFT,\n  codesLetter.ARROW_RIGHT,\n];\nexport class KeyboardService {\n\n  constructor(private sv: Config) {}\n\n  async keyDown(e: KeyboardEvent, canRange: boolean) {\n    // IF EDIT MODE\n    if (this.sv.selectionStoreService.edited) {\n      switch (e.code) {\n        case codesLetter.ESCAPE:\n          this.sv.cancelEdit();\n          break;\n      }\n      return;\n    }\n\n    // IF NOT EDIT MODE\n\n    // pressed clear key\n    if (this.sv.selectionStoreService.ranged && isClear(e.code)) {\n      this.sv.clearCell();\n      return;\n    }\n\n    // below works with focus only\n    if (!this.sv.selectionStoreService.focused) {\n      return;\n    }\n\n    // tab key means same as arrow right\n    if (codesLetter.TAB === e.code) {\n      this.keyChangeSelection(e, canRange);\n      return;\n    }\n\n    // pressed enter\n    if (isEnterKey(e.code)) {\n      this.sv.applyEdit();\n      return;\n    }\n\n    // copy operation\n    if (isCopy(e)) {\n      return;\n    }\n\n    // cut operation\n    if (isCut(e)) {\n      return;\n    }\n\n    // paste operation\n    if (isPaste(e)) {\n      this.sv.internalPaste();\n      return;\n    }\n\n    // select all\n    if (isAll(e)) {\n      if (canRange) {\n        this.selectAll(e);\n      }\n      return;\n    }\n\n    // pressed letter key\n    if (isLetterKey(e.keyCode)) {\n      this.sv.applyEdit(e.key);\n      return;\n    }\n\n    // pressed arrow, change selection position\n    if (await this.keyChangeSelection(e, canRange)) {\n      return;\n    }\n  }\n\n  private selectAll(e: KeyboardEvent) {\n    const range = this.sv.selectionStore.get('range');\n    const focus = this.sv.selectionStore.get('focus');\n    // if no range or focus - do nothing\n    if (!range || !focus) {\n      return;\n    }\n    e.preventDefault();\n    this.sv.selectAll();\n  }\n\n  async keyChangeSelection(e: KeyboardEvent, canRange: boolean) {\n    const data = this.changeDirectionKey(e, canRange);\n    if (!data) {\n      return false;\n    }\n\n    // this interval needed for several cases\n    // grid could be resized before next click\n    // at this case to avoid screen jump we use this interval\n    await timeout(RESIZE_INTERVAL + 30);\n\n    const range = this.sv.selectionStore.get('range');\n    const focus = this.sv.selectionStore.get('focus');\n    return this.keyPositionChange(data.changes, range, focus, data.isMulti);\n  }\n\n  keyPositionChange(\n    changes: Partial<Selection.Cell>,\n    range?: Selection.RangeArea,\n    focus?: Selection.Cell,\n    isMulti = false\n  ) {\n    if (!range || !focus) {\n      return false;\n    }\n    const data = getCoordinate(range, focus, changes, isMulti);\n    if (!data) {\n      return false;\n    }\n    if (isMulti) {\n      const eData: EventData = this.sv.getData();\n      if (isAfterLast(data.end, eData) || isBeforeFirst(data.start)) {\n        return false;\n      }\n      const range = getRange(data.start, data.end);\n      return this.sv.range(range);\n    }\n    return this.sv.focusNext(data.start, changes);\n  }\n\n  /** Monitor key direction changes */\n  changeDirectionKey(e: KeyboardEvent, canRange: boolean): { changes: Partial<Selection.Cell>; isMulti?: boolean } | void {\n    const isMulti = canRange && e.shiftKey;\n    if (DIRECTION_CODES.includes(e.code)) {\n      e.preventDefault();\n    }\n    switch (e.code) {\n      case codesLetter.ARROW_UP:\n        return { changes: { y: -1 }, isMulti };\n      case codesLetter.ARROW_DOWN:\n        return { changes: { y: 1 }, isMulti };\n      case codesLetter.ARROW_LEFT:\n        return { changes: { x: -1 }, isMulti };\n      case codesLetter.TAB:\n      case codesLetter.ARROW_RIGHT:\n        return { changes: { x: 1 }, isMulti };\n    }\n  }\n}\n"]}