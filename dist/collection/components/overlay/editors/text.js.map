{"version":3,"file":"text.js","sourceRoot":"","sources":["../../../../src/components/overlay/editors/text.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAClC,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,+BAA+B,CAAC;AAElE,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AASzC,MAAM,OAAO,UAAU;EAMrB,YAAmB,MAA8B,EAAU,YAA2B;IAAnE,WAAM,GAAN,MAAM,CAAwB;IAAU,iBAAY,GAAZ,YAAY,CAAe;IAH/E,YAAO,GAAmB,IAAI,CAAC;IAC/B,aAAQ,GAA4B,IAAI,CAAC;EAEyC,CAAC;EAE1F,KAAK,CAAC,kBAAkB;;IACtB,IAAI,IAAI,CAAC,SAAS,EAAE;MAClB,MAAM,OAAO,EAAE,CAAC;MAChB,MAAA,IAAI,CAAC,SAAS,0CAAE,KAAK,EAAE,CAAC;KACzB;EACH,CAAC;EAEO,SAAS,CAAC,CAAgB;IAChC,MAAM,OAAO,GAAG,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACnC,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAE/B,IAAI,CAAC,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,CAAC,WAAW,EAAE;MAC5E,qCAAqC;MACrC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;MACtB,mDAAmD;MACnD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,QAAQ,CAAC,CAAC;KAC9C;EACH,CAAC;EAED,QAAQ;;IACN,OAAO,MAAA,IAAI,CAAC,SAAS,0CAAE,KAAK,CAAC;EAC/B,CAAC;EAED,WAAW;EACX,MAAM;;IACJ,OAAO,CACL,aACE,IAAI,EAAC,MAAM,EACX,KAAK,EAAE,CAAA,MAAA,IAAI,CAAC,QAAQ,0CAAE,GAAG,KAAI,EAAE,EAC/B,GAAG,EAAE,EAAE,CAAC,EAAE;QACR,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;MACtB,CAAC,EACD,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GACjC,CACH,CAAC;EACJ,CAAC;CACF","sourcesContent":["import { h } from '@stencil/core';\nimport { isEnterKey, isTab } from '../../../utils/keyCodes.utils';\nimport { Edition, RevoGrid } from '../../../interfaces';\nimport { timeout } from '../../../utils';\n\n/**\n * Callback triggered on cell editor save\n * Closes editor when called\n * @param preventFocus - if true editor will not be closed and next cell will not be focused\n */\nexport type SaveCallback = (value: Edition.SaveData, preventFocus: boolean) => void;\n\nexport class TextEditor implements Edition.EditorBase {\n  private editInput!: HTMLInputElement;\n\n  public element: Element | null = null;\n  public editCell: Edition.EditCell | null = null;\n\n  constructor(public column: RevoGrid.ColumnRegular, private saveCallback?: SaveCallback) {}\n\n  async componentDidRender(): Promise<void> {\n    if (this.editInput) {\n      await timeout();\n      this.editInput?.focus();\n    }\n  }\n\n  private onKeyDown(e: KeyboardEvent): void {\n    const isEnter = isEnterKey(e.code);\n    const isKeyTab = isTab(e.code);\n\n    if ((isKeyTab || isEnter) && e.target && this.saveCallback && !e.isComposing) {\n      // blur is needed to avoid autoscroll\n      this.editInput.blur();\n      // request callback which will close cell after all\n      this.saveCallback(this.getValue(), isKeyTab);\n    }\n  }\n  \n  getValue() {\n    return this.editInput?.value;\n  }\n\n  // required\n  render() {\n    return (\n      <input\n        type=\"text\"\n        value={this.editCell?.val || ''}\n        ref={el => {\n          this.editInput = el;\n        }}\n        onKeyDown={e => this.onKeyDown(e)}\n      />\n    );\n  }\n}\n"]}