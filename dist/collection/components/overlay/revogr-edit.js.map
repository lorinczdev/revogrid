{"version":3,"file":"revogr-edit.js","sourceRoot":"","sources":["../../../src/components/overlay/revogr-edit.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Event, EventEmitter, Prop, h, Element, Host, Method } from '@stencil/core';\n\nimport { Edition, RevoGrid } from '../../interfaces';\nimport { EDIT_INPUT_WR } from '../../utils/consts';\nimport { TextEditor } from './editors/text';\n\n/**\n * Cell editor component\n */\n@Component({\n  tag: 'revogr-edit',\n  styleUrl: 'revogr-edit-style.scss',\n})\nexport class RevoEdit {\n  @Element() element: HTMLElement;\n  @Prop() editCell: Edition.EditCell;\n\n  @Prop() column: RevoGrid.ColumnRegular | null;\n  /** Custom editors register */\n  @Prop() editor: Edition.EditorCtr | null;\n\n  /** Save on editor close */\n  @Prop() saveOnClose: boolean = false;\n  /** Additional data to pass to renderer */\n  @Prop() additionalData: any;\n\n  /** Cell edit event */\n  @Event() cellEdit: EventEmitter<Edition.SaveDataDetails>;\n\n  /**\n   * Close editor event\n   * pass true if requires focus next\n   */\n  @Event() closeEdit: EventEmitter<boolean | undefined>;\n\n  /** Edit session editor */\n  private currentEditor: Edition.EditorBase | null = null;\n  private saveRunning = false;\n\n  @Method() async cancel() {\n    this.saveRunning = true;\n  }\n\n  onAutoSave() {\n    this.saveRunning = true;\n    const val = this.currentEditor.getValue && this.currentEditor.getValue();\n    // for editor plugin internal usage in case you want to stop save and use your own\n    if (this.currentEditor.beforeAutoSave) {\n      const canSave = this.currentEditor.beforeAutoSave(val);\n      if (canSave === false) {\n        return;\n      }\n    }\n    this.onSave(val, true);\n  }\n\n  /**\n   * Callback triggered on cell editor save\n   * Closes editor when called\n   * @param preventFocus - if true editor will not be closed and next cell will not be focused\n   */\n  onSave(val: Edition.SaveData, preventFocus?: boolean): void {\n    this.saveRunning = true;\n    if (this.editCell) {\n      this.cellEdit.emit({\n        rgCol: this.editCell.x,\n        rgRow: this.editCell.y,\n        type: this.editCell.type,\n        prop: this.editCell.prop,\n        val,\n        preventFocus,\n      });\n    }\n  }\n\n  componentWillRender(): void {\n    // we have active editor\n    if (this.currentEditor) {\n      return;\n    }\n    this.saveRunning = false;\n    \n    // custom editor usage\n    // use TextEditor (editors/text.tsx) to create custom editor\n    if (this.editor) {\n      this.currentEditor = new this.editor(\n        this.column,\n        // save\n        (e, preventFocus) => {\n          this.onSave(e, preventFocus);\n        },\n        // cancel\n        focusNext => {\n          this.saveRunning = true;\n          this.closeEdit.emit(focusNext);\n        },\n      );\n      return;\n    }\n    // default text editor usage\n    this.currentEditor = new TextEditor(this.column, (e, preventFocus) => this.onSave(e, preventFocus));\n  }\n\n  componentDidRender(): void {\n    if (!this.currentEditor) {\n      return;\n    }\n    this.currentEditor.element = this.element.firstElementChild;\n    this.currentEditor.componentDidRender?.();\n  }\n\n  disconnectedCallback(): void {\n    if (this.saveOnClose) {\n      // shouldn't be cancelled by saveRunning\n      // editor requires getValue to be able to save\n      if (!this.saveRunning) {\n        this.onAutoSave();\n      }\n    }\n\n    this.saveRunning = false;\n    if (!this.currentEditor) {\n      return;\n    }\n\n    this.currentEditor.disconnectedCallback && this.currentEditor.disconnectedCallback();\n    if (this.currentEditor.element) {\n      this.currentEditor.element = null;\n    }\n    this.currentEditor = null;\n  }\n\n  render() {\n    if (this.currentEditor) {\n      this.currentEditor.editCell = this.editCell;\n      return <Host class={EDIT_INPUT_WR}>{this.currentEditor.render(h, this.additionalData)}</Host>;\n    }\n    return '';\n  }\n}\n"]}