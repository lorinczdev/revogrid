{"version":3,"file":"selection.utils.js","sourceRoot":"","sources":["../../../src/components/overlay/selection.utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { getItemByIndex, getItemByPosition } from '../../store/dimension/dimension.helpers';\nimport { Selection, RevoGrid } from '../../interfaces';\nimport Cell = Selection.Cell;\n\nexport type EventData = {\n  el: HTMLElement;\n  rows: RevoGrid.DimensionSettingsState;\n  cols: RevoGrid.DimensionSettingsState;\n  lastCell: Selection.Cell;\n};\n\n/** Calculate cell based on x, y position */\nexport function getCurrentCell({ x, y }: Cell, { el, rows, cols }: EventData): Cell {\n  const { top, left, height, width } = el.getBoundingClientRect();\n  let cellY = y - top;\n\n  // limit to element height\n\n  if (cellY >= height) {\n    cellY = height - 1;\n  }\n  let cellX = x - left;\n  // limit to element width\n  if (cellX >= width) {\n    cellX = width - 1;\n  }\n  const rgRow = getItemByPosition(rows, cellY);\n  const rgCol = getItemByPosition(cols, cellX);\n  // before first\n  if (rgCol.itemIndex < 0) {\n    rgCol.itemIndex = 0;\n  }\n  // before first\n  if (rgRow.itemIndex < 0) {\n    rgRow.itemIndex = 0;\n  }\n  return { x: rgCol.itemIndex, y: rgRow.itemIndex };\n}\n\nexport function getCoordinate(range: Selection.RangeArea, focus: Cell, changes: Partial<Cell>, isMulti = false) {\n  const updateCoordinate = (c: keyof Cell) => {\n    const start = { x: range.x, y: range.y };\n    const end = isMulti ? { x: range.x1, y: range.y1 } : start;\n    const point = end[c] > focus[c] ? end : start;\n    point[c] += changes[c];\n    return { start, end };\n  };\n\n  if (changes.x) {\n    return updateCoordinate('x');\n  }\n  if (changes.y) {\n    return updateCoordinate('y');\n  }\n  return null;\n}\n\n/** check if out of range */\nexport function isAfterLast({ x, y }: Cell, { lastCell }: EventData) {\n  return x >= lastCell.x || y >= lastCell.y;\n}\n\n/** check if out of range */\nexport function isBeforeFirst({ x, y }: Cell) {\n  return x < 0 || y < 0;\n}\n\n/** Compare cells, only 1 coordinate difference is possible */\n// export function getDirectionCoordinate(initial: Cell, last: Cell): Partial<Cell> | null {\n//   const c: (keyof Cell)[] = ['x', 'y'];\n//   for (let k of c) {\n//     if (initial[k] !== last[k]) {\n//       return { [k]: 1 };\n//     }\n//   }\n//   return null;\n// }\n\n// export function getLargestAxis(initial: Cell, last: Cell): Partial<Cell> | null {\n//   const cell: Partial<Cell> = {};\n//   const c: (keyof Cell)[] = ['x', 'y'];\n//   for (let k of c) {\n//     cell[k] = Math.abs(initial[k] - last[k]);\n//   }\n//   if (cell.x > cell.y) {\n//     return { x: 1 };\n//   }\n//   if (cell.y > cell.x) {\n//     return { y: 1 };\n//   }\n//   return null;\n// }\n\nfunction styleByCellProps(styles: { [key: string]: number }): Selection.RangeAreaCss {\n  return {\n    left: `${styles.left}px`,\n    top: `${styles.top}px`,\n    width: `${styles.width}px`,\n    height: `${styles.height}px`,\n  };\n}\n\nexport function getCell({ x, y, x1, y1 }: Selection.RangeArea, dimensionRow: RevoGrid.DimensionSettingsState, dimensionCol: RevoGrid.DimensionSettingsState) {\n  const top = getItemByIndex(dimensionRow, y).start;\n  const left = getItemByIndex(dimensionCol, x).start;\n  const bottom = getItemByIndex(dimensionRow, y1).end;\n  const right = getItemByIndex(dimensionCol, x1).end;\n\n  return {\n    left,\n    right,\n    top,\n    bottom,\n    width: right - left,\n    height: bottom - top,\n  };\n}\n\nexport function getElStyle(range: Selection.RangeArea, dimensionRow: RevoGrid.DimensionSettingsState, dimensionCol: RevoGrid.DimensionSettingsState): Selection.RangeAreaCss {\n  const styles = getCell(range, dimensionRow, dimensionCol);\n  return styleByCellProps(styles);\n}\n"]}