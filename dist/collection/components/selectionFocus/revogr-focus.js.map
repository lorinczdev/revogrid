{"version":3,"file":"revogr-focus.js","sourceRoot":"","sources":["../../../src/components/selectionFocus/revogr-focus.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Prop, h, Host, Event, Element, EventEmitter } from '@stencil/core';\nimport { FocusRenderEvent, Observable, RevoGrid, Selection } from '../../interfaces';\nimport { FOCUS_CLASS } from '../../utils/consts';\nimport { ColumnSource, RowSource } from '../data/columnService';\nimport { getElStyle } from '../overlay/selection.utils';\nimport { getSourceItem } from '../../store/dataSource/data.store';\n\n@Component({\n  tag: 'revogr-focus',\n  styleUrl: 'revogr-focus-style.scss',\n})\nexport class RevogrFocus {\n  @Element() el: HTMLElement;\n\n  /** Dynamic stores */\n  @Prop() selectionStore!: Observable<Selection.SelectionStoreState>;\n  @Prop() dimensionRow!: Observable<RevoGrid.DimensionSettingsState>;\n  @Prop() dimensionCol!: Observable<RevoGrid.DimensionSettingsState>;\n  @Prop() dataStore!: RowSource;\n  @Prop() colData!: ColumnSource;\n  @Prop() colType!: RevoGrid.DimensionCols;\n  @Prop() rowType!: RevoGrid.DimensionRows;\n\n  @Prop() focusTemplate: RevoGrid.FocusTemplateFunc | null = null;\n  @Event({ eventName: 'before-focus-render' }) beforeFocusRender: EventEmitter<FocusRenderEvent>;\n  /**\n   * Before focus changed verify if it's in view and scroll viewport into this view\n   * Can be prevented by event.preventDefault()\n   */\n  @Event({ eventName: 'beforescrollintoview' }) beforeScrollIntoView: EventEmitter<{ el: HTMLElement }>;\n  /**\n   * Used to setup properties after focus was rendered\n   */\n  @Event({ eventName: 'afterfocus' }) afterFocus: EventEmitter<{\n    model: any;\n    column: RevoGrid.ColumnRegular;\n  }>;\n\n  private activeFocus: Selection.Cell = null;\n\n  private changed(e: HTMLElement, focus: Selection.Cell): void {\n    const beforeScrollIn = this.beforeScrollIntoView.emit({ el: e });\n    if (!beforeScrollIn.defaultPrevented) {\n      e.scrollIntoView({\n        block: 'nearest',\n        inline: 'nearest',\n      });\n    }\n    const model = getSourceItem(this.dataStore, focus.y);\n    const column = getSourceItem(this.colData, focus.x);\n    this.afterFocus.emit({\n      model,\n      column\n    });\n  }\n\n  componentDidRender(): void {\n    const currentFocus = this.selectionStore.get('focus');\n    if (this.activeFocus?.x === currentFocus?.x && this.activeFocus?.y === currentFocus?.y) {\n      return;\n    }\n    this.activeFocus = currentFocus;\n    currentFocus && this.el && this.changed(this.el, currentFocus);\n  }\n\n  render() {\n    const editCell = this.selectionStore.get('edit');\n    if (editCell) {\n      return;\n    }\n    const data = this.selectionStore.get('focus');\n    if (data) {\n      const event = this.beforeFocusRender.emit({\n        range: {\n          ...data,\n          x1: data.x,\n          y1: data.y,\n        },\n        rowType: this.rowType,\n        colType: this.colType,\n      });\n      if (event.defaultPrevented) {\n        return <slot/>;\n      }\n      const { detail } = event;\n      const style = getElStyle(\n        detail.range,\n        this.dimensionRow.state,\n        this.dimensionCol.state,\n      );\n      const extra = this.focusTemplate && this.focusTemplate(h, detail);\n      return <Host class={FOCUS_CLASS} style={style}><slot/>{ extra }</Host>;\n    }\n  }\n}\n"]}