{"version":3,"file":"revogr-cell.js","sourceRoot":"","sources":["../../../src/components/data/revogr-cell.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Event, Prop, EventEmitter, h, VNode, Host } from '@stencil/core';\nimport {\n  BeforeCellRenderEvent,\n  DragStartEvent,\n  RevoGrid,\n} from '../../interfaces';\nimport {\n  DATA_COL,\n  DATA_ROW,\n  DRAGGABLE_CLASS,\n  DRAG_ICON_CLASS,\n} from '../../utils/consts';\nimport ColumnService from './columnService';\nimport { PADDING_DEPTH } from './rowRenderer';\n/**\n * Component is responsible for rendering cell\n * Main purpose is to track changes and understand what exactly need to be rerendered instead of full grid render\n */\n@Component({\n  tag: 'revogr-cell',\n})\nexport class RevogridCellRenderer {\n  /**\n   * Additional data to pass to renderer\n   * Used in plugins such as vue or react to pass root app entity to cells\n   */\n  @Prop() additionalData: any;\n  /**\n   * Column service\n   */\n  @Prop() columnService!: ColumnService;\n  /**\n   * Cached providers\n   */\n  @Prop() providers!: RevoGrid.Providers;\n  /**\n   * Grouping\n   */\n  @Prop() depth: number;\n\n  /**\n   * Row props passed via property\n   */\n  @Prop() rowIndex!: number;\n  @Prop() rowStart!: number;\n  @Prop() rowEnd!: number;\n  @Prop() rowSize!: number;\n\n  /**\n   * Column props passed via property\n   */\n  @Prop() colIndex!: number;\n  @Prop() colStart!: number;\n  @Prop() colEnd!: number;\n  @Prop() colSize!: number;\n\n  /**\n   * Before each cell render function. Allows to override cell properties\n   */\n  @Event({ eventName: 'before-cell-render' })\n  beforeCellRender: EventEmitter<BeforeCellRenderEvent>;\n  @Event({ eventName: 'dragStartCell' })\n  dragStartCell: EventEmitter<DragStartEvent>;\n\n  render() {\n    const model = this.columnService.rowDataModel(this.rowIndex, this.colIndex);\n    const cellEvent = this.beforeCellRender.emit({\n      column: {\n        itemIndex: this.colIndex,\n        start: this.colStart,\n        end: this.colEnd,\n        size: this.colSize,\n      },\n      row: {\n        itemIndex: this.rowIndex,\n        start: this.rowStart,\n        end: this.rowEnd,\n        size: this.rowSize,\n      },\n      model,\n      rowType: this.providers.type,\n      colType: this.columnService.type,\n    });\n    if (cellEvent.defaultPrevented) {\n      return;\n    }\n    const {\n      detail: { column: columnProps, row: rowProps },\n    } = cellEvent;\n    const defaultProps: RevoGrid.CellProps = {\n      [DATA_COL]: columnProps.itemIndex,\n      [DATA_ROW]: rowProps.itemIndex,\n      style: {\n        width: `${columnProps.size}px`,\n        transform: `translateX(${columnProps.start}px)`,\n        height: rowProps.size ? `${rowProps.size}px` : undefined,\n      },\n    };\n    /**\n     * For grouping, can be removed in the future and replaced with event\n     */\n    if (this.depth && !columnProps.itemIndex) {\n      defaultProps.style.paddingLeft = `${PADDING_DEPTH * this.depth}px`;\n    }\n    const props = this.columnService.mergeProperties(\n      rowProps.itemIndex,\n      columnProps.itemIndex,\n      defaultProps,\n    );\n    const tpl = this.columnService.columns[columnProps.itemIndex]?.cellTemplate;\n    // if custom render\n    if (tpl) {\n      return (\n        <Host {...props}>\n          {tpl(h, { ...model, providers: this.providers }, this.additionalData)}\n        </Host>\n      );\n    }\n    // something is wrong with data\n    if (!model.column) {\n      console.error('Investigate column problem');\n      return;\n    }\n\n    const els: (VNode | string)[] = [];\n    if (model.column.rowDrag && isRowDragService(model.column.rowDrag, model)) {\n      els.push(\n        <span\n          class={DRAGGABLE_CLASS}\n          onMouseDown={originalEvent =>\n            this.dragStartCell.emit({\n              originalEvent,\n              model,\n            })\n          }\n        >\n          <span class={DRAG_ICON_CLASS} />\n        </span>,\n      );\n    }\n    els.push(`${ColumnService.getData(model.model[model.prop])}`);\n    // if regular render\n    return <Host {...props}>{els}</Host>;\n  }\n}\n\nfunction isRowDragService(\n  rowDrag: RevoGrid.RowDrag,\n  model: RevoGrid.ColumnDataSchemaModel,\n): boolean {\n  if (typeof rowDrag === 'function') {\n    return rowDrag(model);\n  }\n  return !!rowDrag;\n}\n"]}