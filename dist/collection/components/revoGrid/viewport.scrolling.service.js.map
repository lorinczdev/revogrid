{"version":3,"file":"viewport.scrolling.service.js","sourceRoot":"","sources":["../../../src/components/revoGrid/viewport.scrolling.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { RevoGrid } from '../../interfaces';\nimport { columnTypes } from '../../store/storeTypes';\n\nexport interface ElementScroll {\n  changeScroll?(e: RevoGrid.ViewPortScrollEvent, silent?: boolean): Promise<RevoGrid.ViewPortScrollEvent>;\n  setScroll(e: RevoGrid.ViewPortScrollEvent): Promise<void>;\n}\nexport type ElementsScroll = { [key: string]: ElementScroll[] };\nexport default class GridScrollingService {\n  private elements: ElementsScroll = {};\n  constructor(private setViewport: (e: RevoGrid.ViewPortScrollEvent) => void) {}\n\n  async scrollService(e: RevoGrid.ViewPortScrollEvent, key?: RevoGrid.DimensionColPin | string) {\n    let newEvent: Promise<RevoGrid.ViewPortScrollEvent>;\n    let event = e;\n    for (let elKey in this.elements) {\n      if (e.dimension === 'rgCol' && elKey === 'headerRow') {\n        continue;\n      // pinned column only\n      } else if (this.isPinnedColumn(key) && e.dimension === 'rgCol') {\n        if (elKey === key || !e.delta) {\n          continue;\n        }\n        for (let el of this.elements[elKey]) {\n          if (el.changeScroll) {\n            newEvent = el.changeScroll(e);\n          }\n        }\n      } else {\n        for (let el of this.elements[elKey]) {\n          await el.setScroll(e);\n        }\n      }\n    }\n    if (newEvent) {\n      event = await newEvent;\n    }\n    this.setViewport(event);\n  }\n\n  /**\n   * Silent scroll update for mobile devices when we have negative scroll top \n   */\n  async scrollSilentService(e: RevoGrid.ViewPortScrollEvent, key?: RevoGrid.DimensionColPin | string) {\n    for (let elKey in this.elements) {\n      // skip same element update\n      if (elKey === key) {\n        continue;\n      }\n      if (columnTypes.includes(key as RevoGrid.DimensionColPin) && (elKey === 'headerRow' || columnTypes.includes(elKey  as RevoGrid.DimensionColPin))) {\n        for (let el of this.elements[elKey]) {\n          await el.changeScroll?.(e, true);\n        }\n        continue;\n      }\n    }\n  }\n\n  private isPinnedColumn(key?: RevoGrid.DimensionColPin | string): key is RevoGrid.DimensionColPin {\n    return ['colPinStart', 'colPinEnd'].indexOf(key) > -1;\n  }\n\n  registerElements(els: ElementsScroll): void {\n    this.elements = els;\n  }\n\n  /**\n   * Register new element for farther scroll support\n   * @param el - can be null if holder removed\n   * @param key - element key\n   */\n  registerElement(el: ElementScroll | null, key: string): void {\n    if (!this.elements[key]) {\n      this.elements[key] = [];\n    }\n    // new element added\n    if (el) {\n      this.elements[key].push(el);\n    } else if (this.elements[key]) {\n      // element removed\n      delete this.elements[key];\n    }\n  }\n\n  unregister(): void {\n    delete this.elements;\n    this.elements = {};\n  }\n}\n"]}