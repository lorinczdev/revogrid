{"version":3,"file":"viewport.js","sourceRoot":"","sources":["../../../src/components/revoGrid/viewport.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAS,MAAM,eAAe,CAAC;AAIzC,OAAO,aAAiC,MAAM,wBAAwB,CAAC;AAgBvE,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,eAAe,EAAE,QAAQ,EAAS,EAAE,QAAiB,EAAE,EAAE;EACnI,MAAM,aAAa,GAAG,CAAC,CAAa,EAAE,EAAgB,EAAE,EAAE;IACxD,IAAI,EAAE,KAAK,CAAC,CAAC,MAAM,EAAE;MACnB,UAAU,CAAC,CAAC,CAAC,CAAC;KACf;EACH,CAAC,CAAC;EAEF,IAAI,EAAe,CAAC;EACpB,MAAM,OAAO,GAAG,OAAO,CAAC;EACxB,MAAM,OAAO,GAAG,OAAO,CAAC;EACxB,OAAO;IACL,WAAK,KAAK,EAAC,eAAe,EAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,EAAE,EAAE,CAAC;MAC/E,WAAK,KAAK,EAAC,WAAW;QACnB,QAAQ;QACT,6BACE,KAAK,EAAC,UAAU,EAChB,SAAS,EAAG,OAAO,EACnB,aAAa,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,EACvC,cAAc,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,EACzC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,eAAe,CAAC,EAAE,EAAE,WAAW,CAAC,EAC3C,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,GACxC;QACF,EAAC,aAAa,IAAC,GAAG,EAAE,QAAQ,GAAI,CAC5B,CACF;IACN,6BACE,KAAK,EAAC,YAAY,EAClB,SAAS,EAAG,OAAO,EACnB,aAAa,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,EACvC,cAAc,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,EACzC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,eAAe,CAAC,EAAE,EAAE,WAAW,CAAC,EAC3C,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,GACxC;GACH,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { h, VNode } from '@stencil/core';\nimport { RevoGrid } from '../../interfaces';\nimport { DimensionStores } from '../../services/dimension.provider';\nimport { ViewportStores } from '../../services/viewport.provider';\nimport OrderRenderer, { OrdererService } from '../order/orderRenderer';\n\nexport interface ElementScroll {\n  changeScroll?(e: RevoGrid.ViewPortScrollEvent): Promise<RevoGrid.ViewPortScrollEvent>;\n  setScroll(e: RevoGrid.ViewPortScrollEvent): Promise<void>;\n}\n\ntype Props = {\n  viewports: ViewportStores;\n  dimensions: DimensionStores;\n  orderRef(e: OrdererService): void;\n  registerElement(el: ElementScroll | null, key: string): void;\n  onScroll(e: RevoGrid.ViewPortScrollEvent, key?: RevoGrid.DimensionColPin | string): void;\n  nakedClick(e: MouseEvent): void;\n};\n\nexport const RevoViewPort = ({ viewports, dimensions, orderRef, nakedClick, registerElement, onScroll }: Props, children: VNode[]) => {\n  const viewPortClick = (e: MouseEvent, el?: HTMLElement) => {\n    if (el === e.target) {\n      nakedClick(e);\n    }\n  };\n\n  let el: HTMLElement;\n  const typeRow = 'rgRow';\n  const typeCol = 'rgCol';\n  return [\n    <div class=\"main-viewport\" ref={e => (el = e)} onClick={e => viewPortClick(e, el)}>\n      <div class=\"viewports\">\n        {children}\n        <revogr-scroll-virtual\n          class=\"vertical\"\n          dimension={ typeRow }\n          viewportStore={viewports[typeRow].store}\n          dimensionStore={dimensions[typeRow].store}\n          ref={el => registerElement(el, 'rowScroll')}\n          onScrollVirtual={e => onScroll(e.detail)}\n        />\n        <OrderRenderer ref={orderRef} />\n      </div>\n    </div>,\n    <revogr-scroll-virtual\n      class=\"horizontal\"\n      dimension={ typeCol }\n      viewportStore={viewports[typeCol].store}\n      dimensionStore={dimensions[typeCol].store}\n      ref={el => registerElement(el, 'colScroll')}\n      onScrollVirtual={e => onScroll(e.detail)}\n    />,\n  ];\n};\n"]}