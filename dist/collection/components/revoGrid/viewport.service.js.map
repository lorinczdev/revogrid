{"version":3,"file":"viewport.service.js","sourceRoot":"","sources":["../../../src/components/revoGrid/viewport.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Observable, RevoGrid, Selection } from '../../interfaces';\nimport DimensionProvider from '../../services/dimension.provider';\nimport SelectionStoreConnector, { EMPTY_INDEX } from '../../services/selection.store.connector';\nimport ViewportProvider from '../../services/viewport.provider';\nimport { DataSourceState, getSourceItem, getVisibleSourceItem } from '../../store/dataSource/data.store';\nimport { columnTypes, rowTypes } from '../../store/storeTypes';\nimport { UUID } from '../../utils/consts';\nimport { OrdererService } from '../order/orderRenderer';\nimport GridScrollingService from './viewport.scrolling.service';\nimport { CONTENT_SLOT, FOOTER_SLOT, getLastCell, HEADER_SLOT } from './viewport.helpers';\nimport { HeaderProperties, SlotType, ViewportColumn, ViewportData, ViewportProps } from './viewport.interfaces';\nimport ColumnDataProvider from '../../services/column.data.provider';\nimport { DataProvider } from '../../services/data.provider';\nimport { reduce } from 'lodash';\n\nexport type ResizeDetails = { [index: number]: RevoGrid.ColumnRegular };\ntype Config = {\n  columnProvider: ColumnDataProvider;\n  dataProvider: DataProvider;\n  dimensionProvider: DimensionProvider;\n  viewportProvider: ViewportProvider;\n  uuid: string | null;\n  scrollingService: GridScrollingService;\n  orderService: OrdererService;\n  selectionStoreConnector: SelectionStoreConnector;\n\n  resize(r: ResizeDetails): void;\n};\n\nexport type FocusedData = {\n  model: any;\n  cell: Selection.Cell;\n  colType: RevoGrid.DimensionCols;\n  rowType: RevoGrid.DimensionRows;\n  column?: RevoGrid.ColumnRegular;\n};\n\nexport default class ViewportService {\n  readonly columns: ViewportProps[];\n  constructor(private sv: Config, contentHeight: number) {\n    this.sv.selectionStoreConnector?.beforeUpdate();\n    this.columns = this.getViewportColumnData(contentHeight);\n    this.sv.scrollingService?.unregister();\n  }\n\n  private onColumnResize(\n    type: RevoGrid.DimensionCols,\n    { detail }: CustomEvent<RevoGrid.ViewSettingSizeProp>,\n    store: Observable<DataSourceState<RevoGrid.ColumnRegular, RevoGrid.DimensionCols>>,\n  ) {\n    this.sv.dimensionProvider?.setCustomSizes(type, detail, true);\n    const changedItems = reduce(\n      detail || {},\n      (r: ResizeDetails, size, i) => {\n        const index = parseInt(i, 10);\n        const item = getSourceItem(store, index);\n        if (item) {\n          r[index] = { ...item, size };\n        }\n        return r;\n      },\n      {},\n    );\n    this.sv.resize(changedItems);\n  }\n\n  /**\n   * Transform data from stores and apply it to different components\n   * Handle columns\n   */\n  private getViewportColumnData(contentHeight: number): ViewportProps[] {\n    const columns: ViewportProps[] = [];\n    let x = 0; // we increase x only if column present\n    columnTypes.forEach(val => {\n      const colStore = this.sv.columnProvider.stores[val].store;\n      // only columns that have data show\n      if (!colStore.get('items').length) {\n        return;\n      }\n      const column: ViewportColumn = {\n        colType: val,\n        position: { x, y: 1 },\n\n        contentHeight,\n        fixWidth: val !== 'rgCol',\n        uuid: `${this.sv.uuid}-${x}`,\n\n        viewports: this.sv.viewportProvider.stores,\n        dimensions: this.sv.dimensionProvider.stores,\n        rowStores: this.sv.dataProvider.stores,\n\n        colStore,\n        onHeaderresize: e => this.onColumnResize(val, e, colStore),\n      };\n      if (val === 'rgCol') {\n        column.onResizeViewport = (e: CustomEvent<RevoGrid.ViewPortResizeEvent>) => this.sv.viewportProvider?.setViewport(e.detail.dimension, { virtualSize: e.detail.size });\n      }\n      const colData = this.gatherColumnData(column);\n      const columnSelectionStore = this.registerCol(colData.position.x, val);\n\n      // render per each column data collections vertically\n      const dataPorts = this.dataViewPort(column).reduce<ViewportData[]>((r, rgRow) => {\n        // register selection store for Segment\n        const segmentSelection = this.registerSegment(rgRow.position);\n        segmentSelection.setLastCell(rgRow.lastCell);\n\n        // register selection store for Row\n        const rowSelectionStore = this.registerRow(rgRow.position.y, rgRow.type);\n        const rowDef: ViewportData = {\n          ...rgRow,\n          rowSelectionStore,\n          segmentSelectionStore: segmentSelection.store,\n          ref: (e: Element) => this.sv.selectionStoreConnector.registerSection(e),\n          onSetRange: e => {\n            segmentSelection.setRangeArea(e.detail);\n          },\n          onSetTempRange: e => {\n            segmentSelection.setTempArea(e.detail);\n          },\n          onFocusCell: e => {\n            // todo: multi focus\n            segmentSelection.clearFocus();\n            this.sv.selectionStoreConnector.focus(segmentSelection, e.detail);\n          },\n        };\n        r.push(rowDef);\n        return r;\n      }, []);\n      columns.push({\n        ...colData,\n        columnSelectionStore,\n        dataPorts,\n      });\n      x++;\n    });\n    return columns;\n  }\n\n  /** register selection store for Segment */\n  private registerSegment(position: Selection.Cell) {\n    return this.sv.selectionStoreConnector.register(position);\n  }\n\n  /** register selection store for Row */\n  private registerRow(y: number, type: RevoGrid.DimensionRows) {\n    return this.sv.selectionStoreConnector.registerRow(y, type).store;\n  }\n\n  /** register selection store for Column */\n  private registerCol(x: number, type: RevoGrid.DimensionCols) {\n    return this.sv.selectionStoreConnector.registerColumn(x, type).store;\n  }\n\n  /** Collect Column data */\n  private gatherColumnData(data: ViewportColumn) {\n    const parent = data.uuid;\n    const realSize = data.dimensions[data.colType].store.get('realSize');\n    const prop: Record<string, any> = {\n      contentWidth: realSize,\n      class: data.colType,\n      [`${UUID}`]: data.uuid,\n      contentHeight: data.contentHeight,\n      key: data.colType,\n      onResizeViewport: data.onResizeViewport,\n    };\n    if (data.fixWidth) {\n      prop.style = { minWidth: `${realSize}px` };\n    }\n    const headerProp: HeaderProperties = {\n      parent,\n      colData: getVisibleSourceItem(data.colStore),\n      dimensionCol: data.dimensions[data.colType].store,\n      groups: data.colStore.get('groups'),\n      groupingDepth: data.colStore.get('groupingDepth'),\n      resizeHandler: data.colType === 'colPinEnd' ? ['l'] : undefined,\n      onHeaderresize: data.onHeaderresize,\n    };\n\n    return {\n      prop,\n      type: data.colType,\n      position: data.position,\n      headerProp,\n      parent,\n      viewportCol: data.viewports[data.colType].store,\n    };\n  }\n\n  /** Collect Row data */\n  private dataViewPort(data: ViewportColumn) {\n    const slots: { [key in RevoGrid.DimensionRows]: SlotType } = {\n      rowPinStart: HEADER_SLOT,\n      rgRow: CONTENT_SLOT,\n      rowPinEnd: FOOTER_SLOT,\n    };\n\n    // y position for selection\n    let y = 0;\n    return rowTypes.reduce((r, type) => {\n      // filter out empty sources, we still need to return source to keep slot working\n      const isPresent = data.viewports[type].store.get('realCount') || type === 'rgRow';\n      const rgCol = {\n        ...data,\n        position: { ...data.position, y: isPresent ? y : EMPTY_INDEX },\n      };\n      r.push(\n        this.dataPartition(\n          rgCol,\n          type,\n          slots[type],\n          type !== 'rgRow', // is fixed\n        ),\n      );\n      if (isPresent) {\n        y++;\n      }\n      return r;\n    }, []);\n  }\n\n  private dataPartition(data: ViewportColumn, type: RevoGrid.DimensionRows, slot: SlotType, fixed?: boolean) {\n    return {\n      colData: data.colStore,\n      viewportCol: data.viewports[data.colType].store,\n      viewportRow: data.viewports[type].store,\n      lastCell: getLastCell(data, type),\n      slot,\n      type,\n      canDrag: !fixed,\n      position: data.position,\n      uuid: `${data.uuid}-${data.position.x}-${data.position.y}`,\n      dataStore: data.rowStores[type].store,\n      dimensionCol: data.dimensions[data.colType].store,\n      dimensionRow: data.dimensions[type].store,\n      style: fixed ? { height: `${data.dimensions[type].store.get('realSize')}px` } : undefined,\n    };\n  }\n\n  scrollToCell(cell: Partial<Selection.Cell>) {\n    for (let key in cell) {\n      const coordinate = cell[key as keyof Selection.Cell];\n      this.sv.scrollingService.scrollService({ dimension: key === 'x' ? 'rgCol' : 'rgRow', coordinate });\n    }\n  }\n\n  /**\n   * Clear current grid focus\n   */\n  clearFocused() {\n    this.sv.selectionStoreConnector.clearAll();\n  }\n\n  clearEdit() {\n    this.sv.selectionStoreConnector.setEdit(false);\n  }\n\n  /**\n   * Collect focused element data\n   */\n  getFocused(): FocusedData | null {\n    const focused = this.sv.selectionStoreConnector.focusedStore;\n    if (!focused) {\n      return null;\n    }\n    // get column data\n    const colType = this.sv.selectionStoreConnector.storesXToType[focused.position.x];\n    const column = this.sv.columnProvider.getColumn(focused.cell.x, colType);\n\n    // get row data\n    const rowType = this.sv.selectionStoreConnector.storesYToType[focused.position.y];\n    const model = this.sv.dataProvider.getModel(focused.cell.y, rowType);\n    return {\n      column,\n      model,\n      cell: focused.cell,\n      colType,\n      rowType,\n    };\n  }\n\n  getStoreCoordinateByType(colType: RevoGrid.DimensionCols, rowType: RevoGrid.DimensionRows) {\n    const stores = this.sv.selectionStoreConnector.storesByType;\n    const storeCoordinate = {\n      x: stores[colType],\n      y: stores[rowType],\n    };\n    return storeCoordinate;\n  }\n\n  setFocus(colType: string, rowType: string, start: Selection.Cell, end: Selection.Cell) {\n    this.sv.selectionStoreConnector?.focusByCell(\n      this.getStoreCoordinateByType(\n        colType as RevoGrid.DimensionCols,\n        rowType as RevoGrid.DimensionRows\n      ), start, end);\n  }\n\n  getSelectedRange(): Selection.RangeArea | null {\n    return this.sv.selectionStoreConnector.selectedRange;\n  }\n\n  setEdit(rowIndex: number, colIndex: number, colType: RevoGrid.DimensionCols, rowType: RevoGrid.DimensionRows) {\n    this.sv.selectionStoreConnector?.setEditByCell(this.getStoreCoordinateByType(colType, rowType), { x: colIndex, y: rowIndex });\n  }\n}\n"]}