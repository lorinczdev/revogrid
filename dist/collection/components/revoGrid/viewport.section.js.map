{"version":3,"file":"viewport.section.js","sourceRoot":"","sources":["../../../src/components/revoGrid/viewport.section.tsx"],"names":[],"mappings":"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","sourcesContent":["import { h, VNode } from '@stencil/core';\nimport { Edition, RevoGrid } from '../../interfaces';\nimport { UUID } from '../../utils/consts';\nimport { ElementScroll } from './viewport';\nimport { DATA_SLOT, HEADER_SLOT } from './viewport.helpers';\nimport { ViewportProps } from './viewport.interfaces';\nimport { isMobileDevice } from '../../utils/mobile';\ntype Props = {\n  editors: Edition.Editors;\n  useClipboard: boolean;\n  applyEditorChangesOnClose: boolean;\n  readonly: boolean;\n  range: boolean;\n  rowClass: string;\n  resize: boolean;\n  columns: ViewportProps[];\n  columnFilter: boolean;\n  additionalData: any;\n  focusTemplate: RevoGrid.FocusTemplateFunc;\n  scrollSection(\n    e: RevoGrid.ViewPortScrollEvent,\n    key?: RevoGrid.DimensionColPin | string,\n  ): void;\n  scrollSectionSilent(\n    e: RevoGrid.ViewPortScrollEvent,\n    key?: RevoGrid.DimensionColPin | string,\n  ): void;\n  onCancelEdit(): void;\n  onEdit(edit: Edition.BeforeEdit): void;\n  onSelectAll(): void;\n  registerElement(el: ElementScroll | null, key: string): void;\n};\n/**\n * The code renders a view port divided into sections.\n * It starts by rendering the pinned start, data, and pinned end sections.\n * Within each section, it renders columns along with their headers, pinned top, center data, and pinned bottom.\n * The code iterates over the columns and their data to generate the view port's HTML structure.\n * Finally, the rendered sections are returned as the result.\n */\nexport const ViewPortSections = ({\n  resize,\n  editors,\n  rowClass,\n  readonly,\n  range,\n  columns,\n  useClipboard,\n  columnFilter,\n  applyEditorChangesOnClose,\n  additionalData,\n  onCancelEdit,\n  registerElement,\n  onEdit,\n  scrollSection,\n  focusTemplate,\n  onSelectAll,\n  scrollSectionSilent,\n}: Props) => {\n  const isMobile = isMobileDevice();\n  const viewPortHtml: VNode[] = [];\n  /** render viewports columns */\n  for (let view of columns) {\n    /** render viewports rows */\n    const headerProperties = {\n      ...view.headerProp,\n      type: view.type,\n      additionalData,\n      viewportCol: view.viewportCol,\n      selectionStore: view.columnSelectionStore,\n      canResize: resize,\n      columnFilter,\n    };\n    const dataViews: HTMLElement[] = [\n      <revogr-header {...headerProperties} slot={HEADER_SLOT} />,\n    ];\n    view.dataPorts.forEach((data, j) => {\n      const key = view.prop.key + (j + 1);\n\n      const dataView = (\n        <revogr-overlay-selection\n          {...data}\n          isMobileDevice={isMobile}\n          selectionStore={data.segmentSelectionStore}\n          onSelectall={() => onSelectAll()}\n          editors={editors}\n          readonly={readonly}\n          range={range}\n          useClipboard={useClipboard}\n          onCancelEdit={() => onCancelEdit()}\n          applyChangesOnClose={applyEditorChangesOnClose}\n          onSetEdit={({ detail }) => onEdit(detail)}\n          additionalData={additionalData}\n          slot={data.slot}\n        >\n          <revogr-data\n            {...data}\n            {...{ [UUID]: data.uuid }}\n            key={key}\n            readonly={readonly}\n            range={range}\n            rowClass={rowClass}\n            rowSelectionStore={data.rowSelectionStore}\n            additionalData={additionalData}\n            slot={DATA_SLOT}\n          >\n            <slot name={`data-${view.type}-${data.type}`} />\n          </revogr-data>\n          <revogr-temp-range\n            selectionStore={data.segmentSelectionStore}\n            dimensionRow={data.dimensionRow}\n            dimensionCol={data.dimensionCol}\n          />\n          <revogr-focus\n            colData={data.colData}\n            dataStore={data.dataStore}\n            focusTemplate={focusTemplate}\n            rowType={data.type}\n            colType={view.type}\n            selectionStore={data.segmentSelectionStore}\n            dimensionRow={data.dimensionRow}\n            dimensionCol={data.dimensionCol}\n          >\n            <slot name={`focus-${view.type}-${data.type}`} />\n          </revogr-focus>\n        </revogr-overlay-selection>\n      );\n      dataViews.push(dataView);\n    });\n    viewPortHtml.push(\n      <revogr-viewport-scroll\n        {...view.prop}\n        ref={el => registerElement(el, view.prop.key)}\n        onScrollViewport={e => scrollSection(e.detail, view.prop.key)}\n        onSilentScroll={e => scrollSectionSilent(e.detail, view.prop.key)}\n      >\n        {dataViews}\n      </revogr-viewport-scroll>,\n    );\n  }\n  return viewPortHtml;\n};\n"]}