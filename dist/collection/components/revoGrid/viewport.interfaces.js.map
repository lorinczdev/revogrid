{"version":3,"file":"viewport.interfaces.js","sourceRoot":"","sources":["../../../src/components/revoGrid/viewport.interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { DataSourceState } from '../../store/dataSource/data.store';\nimport { Observable, RevoGrid, Selection } from '../../interfaces';\nimport { ViewportStores } from '../../services/viewport.provider';\nimport { DimensionStores } from '../../services/dimension.provider';\nimport { RowDataSources } from '../../services/data.provider';\nimport { JSX } from '../..';\n\nexport type SlotType = 'content' | 'header' | 'footer';\n\nexport type HeaderProperties = Partial<JSX.RevogrHeader>;\n\nexport type ViewportColumn = {\n  colType: RevoGrid.DimensionCols;\n  position: Selection.Cell;\n\n  uuid: string;\n  fixWidth?: boolean;\n\n  viewports: ViewportStores;\n  dimensions: DimensionStores;\n\n  rowStores: RowDataSources;\n  colStore: Observable<DataSourceState<RevoGrid.ColumnRegular, RevoGrid.DimensionCols>>;\n} & Partial<JSX.RevogrViewportScroll> &\n  Partial<JSX.RevogrHeader>;\n\nexport type ViewportData = {\n  /** Last cell in data viewport. Indicates borders of viewport */\n  lastCell: Selection.Cell;\n\n  /** Viewport data position. Position provides connection between independent data stores and Selection store. */\n  position: Selection.Cell;\n  colData: Observable<DataSourceState<RevoGrid.ColumnRegular, RevoGrid.DimensionCols>>;\n\n  dataStore: Observable<DataSourceState<RevoGrid.DataType, RevoGrid.DimensionRows>>;\n\n  /** Stores to pass dimension data for render */\n  dimensionRow: Observable<RevoGrid.DimensionSettingsState>;\n  dimensionCol: Observable<RevoGrid.DimensionSettingsState>;\n\n  /** We use this store to define is rgRow selected */\n  rowSelectionStore: Observable<Selection.SelectionStoreState>;\n  /** Selection connection */\n  segmentSelectionStore: Observable<Selection.SelectionStoreState>;\n\n  /** Cols dataset */\n  viewportCol: Observable<RevoGrid.ViewportState>;\n  /** Rows dataset */\n  viewportRow: Observable<RevoGrid.ViewportState>;\n\n  /** Slot to put data */\n  slot: SlotType;\n\n  /** Current grid uniq Id */\n  uuid: string;\n\n  type: RevoGrid.DimensionRows;\n\n  canDrag?: boolean;\n  style?: { [key: string]: string };\n  onUnregister?(): void;\n  onSetRange?(e: CustomEvent<Selection.RangeArea>): void;\n  onSetTempRange?(e: CustomEvent<Selection.TempRange | null>): void;\n  onFocusCell?(e: CustomEvent<{ focus: Selection.Cell; end: Selection.Cell }>): void;\n};\n\nexport type ViewportProps = {\n  prop: Record<string, any>;\n  position: Selection.Cell;\n  type: RevoGrid.DimensionCols;\n  /** Cols dataset */\n  viewportCol: Observable<RevoGrid.ViewportState>;\n\n  /** header container props */\n  headerProp: HeaderProperties;\n\n  /** parent selector link */\n  parent: string;\n\n  /** viewport rows */\n  dataPorts: ViewportData[];\n\n  columnSelectionStore: Observable<Selection.SelectionStoreState>;\n};\n"]}