{"version":3,"file":"orderRenderer.js","sourceRoot":"","sources":["../../../src/components/order/orderRenderer.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAS,MAAM,eAAe,CAAC;AAKzC;;GAEG;AACH,MAAM,OAAO,cAAc;EAA3B;IACU,YAAO,GAAW,CAAC,CAAC;EAoC9B,CAAC;EA9BC,KAAK,CAAC,MAAmB,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAmE;;IAC9G,MAAM,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,qBAAqB,EAAE,CAAC;IAC/C,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;IACnB,IAAI,IAAI,CAAC,IAAI,EAAE;MACb,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;KAC5B;IACD,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACf,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IACzC,MAAA,IAAI,CAAC,EAAE,0CAAE,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;EACtC,CAAC;EACD,GAAG;;IACD,MAAA,IAAI,CAAC,EAAE,0CAAE,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;EACnC,CAAC;EACD,IAAI,CAAC,GAA0B;IAC7B,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;EAC3C,CAAC;EACD,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,EAAkB;IAC9B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;MACnB,OAAO;KACR;IACD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;IACrC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC;EACtC,CAAC;EAEO,WAAW,CAAC,CAAS;IAC3B,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;MACf,OAAO;KACR;IACD,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,GAAG,cAAc,CAAC,KAAK,CAAC;EACpD,CAAC;CACF;AAED,MAAM,aAAa,GAAG,CAAC,EAAE,GAAG,EAAS,EAAW,EAAE;EAChD,MAAM,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;EACrC,GAAG,CAAC,OAAO,CAAC,CAAC;EACb,OAAO,CACL,WAAK,KAAK,EAAC,0BAA0B,EAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC;IAC9D,WAAK,KAAK,EAAC,WAAW,EAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,GAAG,EAAE,CAAC;MACxD,YAAM,KAAK,EAAC,eAAe,GAAG;MAC9B,YAAM,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,GAAG,CAAC,CAAC,GAAI,CAClC;IACN,WAAK,KAAK,EAAC,eAAe,EAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,GAAI,CACxD,CACP,CAAC;AACJ,CAAC,CAAC;AACF,eAAe,aAAa,CAAC","sourcesContent":["import { h, VNode } from '@stencil/core';\nimport { RevoGrid, Selection } from '../../interfaces';\n\ntype Props = { ref: { (e: OrdererService): void } };\n\n/**\n * Draw drag\n */\nexport class OrdererService {\n  private parentY: number = 0;\n  el!: HTMLElement;\n  rgRow!: HTMLElement;\n  text!: HTMLElement;\n  draggable!: HTMLElement;\n\n  start(parent: HTMLElement, { pos, text, event }: { pos: RevoGrid.PositionItem; text: string; event: MouseEvent }): void {\n    const { top } = parent.getBoundingClientRect();\n    this.parentY = top;\n    if (this.text) {\n      this.text.innerText = text;\n    }\n    this.move(pos);\n    this.moveTip({ x: event.x, y: event.y });\n    this.el?.classList.remove('hidden');\n  }\n  end(): void {\n    this.el?.classList.add('hidden');\n  }\n  move(pos: RevoGrid.PositionItem): void {\n    this.moveElement(pos.end - this.parentY);\n  }\n  moveTip({ x, y }: Selection.Cell): void {\n    if (!this.draggable) {\n      return;\n    }\n    this.draggable.style.left = `${x}px`;\n    this.draggable.style.top = `${y}px`;\n  }\n\n  private moveElement(y: number): void {\n    if (!this.rgRow) {\n      return;\n    }\n    this.rgRow.style.transform = `translateY(${y}px)`;\n  }\n}\n\nconst OrderRenderer = ({ ref }: Props): VNode[] => {\n  const service = new OrdererService();\n  ref(service);\n  return (\n    <div class=\"draggable-wrapper hidden\" ref={e => (service.el = e)}>\n      <div class=\"draggable\" ref={el => (service.draggable = el)}>\n        <span class=\"revo-alt-icon\" />\n        <span ref={e => (service.text = e)} />\n      </div>\n      <div class=\"drag-position\" ref={e => (service.rgRow = e)} />\n    </div>\n  );\n};\nexport default OrderRenderer;\n"]}