{"version":3,"file":"revogr-row-headers.js","sourceRoot":"","sources":["../../../src/components/rowHeaders/revogr-row-headers.tsx"],"names":[],"mappings":"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","sourcesContent":["import { h, Host } from '@stencil/core';\nimport { Component, Prop, Event, EventEmitter } from '@stencil/core';\nimport { RevoGrid } from '../../interfaces';\nimport DataStore from '../../store/dataSource/data.store';\nimport ViewportStore from '../../store/viewPort/viewport.store';\nimport { ROW_HEADER_TYPE, UUID } from '../../utils/consts';\nimport { ElementScroll } from '../revoGrid/viewport.scrolling.service';\nimport { ViewportData } from '../revoGrid/viewport.interfaces';\nimport { RowHeaderRender } from './row-header-render';\nimport { calculateRowHeaderSize } from '../../utils/row-header-utils';\nimport { HEADER_SLOT } from '../revoGrid/viewport.helpers';\nimport { JSX } from '../..';\n\n/**\n * Row headers component\n * Visible on the left side of the table\n */\n\n@Component({ tag: 'revogr-row-headers' })\nexport class RevogrRowHeaders {\n  @Prop() height: number;\n\n  @Prop() dataPorts: ViewportData[];\n  @Prop() headerProp: Record<string, any>;\n  @Prop() uiid: string;\n  @Prop() rowClass: string;\n\n  @Prop() resize: boolean;\n  @Prop() rowHeaderColumn: RevoGrid.RowHeaders;\n  /** Additional data to pass to renderer */\n  @Prop() additionalData: any;\n\n  @Event({ bubbles: false })\n  scrollViewport: EventEmitter<RevoGrid.ViewPortScrollEvent>;\n  @Event({ bubbles: false }) elementToScroll: EventEmitter<ElementScroll>;\n\n  render() {\n    const dataViews: HTMLElement[] = [];\n    const viewport = new ViewportStore('colPinStart');\n\n    /** render viewports rows */\n    let totalLength = 1;\n    for (let data of this.dataPorts) {\n      const itemCount = data.dataStore.get('items').length;\n      // initiate row data\n      const dataStore = new DataStore<\n        RevoGrid.DataType,\n        RevoGrid.DimensionRows\n      >(data.type);\n      dataStore.updateData(data.dataStore.get('source'));\n      // initiate column data\n      const colData = new DataStore<\n        RevoGrid.ColumnRegular,\n        RevoGrid.DimensionCols\n      >('colPinStart');\n      const column: RevoGrid.ColumnRegular = {\n        cellTemplate: RowHeaderRender(totalLength),\n        ...this.rowHeaderColumn,\n      };\n      colData.updateData([column]);\n\n      const viewData = {\n        ...data,\n        rowClass: this.rowClass,\n        dataStore: dataStore.store,\n        colData: colData.store,\n        viewportCol: viewport.store,\n        readonly: true,\n        range: false,\n      };\n      dataViews.push(\n        <revogr-data {...viewData}></revogr-data>,\n      );\n      totalLength += itemCount;\n    }\n\n    const colSize = calculateRowHeaderSize(totalLength, this.rowHeaderColumn);\n    viewport.setViewport({\n      realCount: 1,\n      virtualSize: 0,\n      items: [\n        {\n          size: colSize,\n          start: 0,\n          end: colSize,\n          itemIndex: 0,\n        },\n      ],\n    });\n\n    const parent = `${this.uiid}-rowHeaders`;\n    const viewportScroll = {\n      [UUID]: parent,\n      contentHeight: this.height,\n      contentWidth: 0,\n      style: { minWidth: `${colSize}px` },\n      ref: (el: ElementScroll) => this.elementToScroll.emit(el),\n      onScrollViewport: (e: CustomEvent) => this.scrollViewport.emit(e.detail),\n    };\n    const viewportHeader: JSX.RevogrHeader & { slot: string } = {\n      ...this.headerProp,\n      colData:\n        typeof this.rowHeaderColumn === 'object' ? [this.rowHeaderColumn] : [],\n      viewportCol: viewport.store,\n      canResize: false,\n      type: ROW_HEADER_TYPE,\n      parent,\n      slot: HEADER_SLOT,\n    };\n    return (\n      <Host class={{ [ROW_HEADER_TYPE]: true }} key={ROW_HEADER_TYPE}>\n        <revogr-viewport-scroll {...viewportScroll} row-header={true}>\n          <revogr-header {...viewportHeader} />\n          {dataViews}\n        </revogr-viewport-scroll>\n      </Host>\n    );\n  }\n}\n"]}