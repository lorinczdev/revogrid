{"version":3,"file":"headerCellRenderer.js","sourceRoot":"","sources":["../../../src/components/header/headerCellRenderer.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,CAAC,EAAS,MAAM,eAAe,CAAC;AAEzC,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,aAAa,MAAM,uBAAuB,CAAC;AAClD,OAAO,EAAE,gBAAgB,EAAE,MAAM,kCAAkC,CAAC;AASpE,MAAM,eAAe,GAAG,cAAc,CAAC;AAEvC,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,cAAc,EAAS,EAAE,QAAiB,EAAS,EAAE;EACrG,IAAI,WAAW,GAA6B,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,KAAI,EAAE,CAAC;EAC7D,IAAI,SAAS,GAAG,KAAK,CAAC;EACtB,IAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,cAAc,EAAE;IACxB,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;GAC5D;EACD,IAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,gBAAgB,EAAE;IAC1B,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;IAC1C,IAAI,KAAK,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;MACtC,SAAS,GAAG,aAAa,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KACjD;GACF;EACD,OAAO,CACL,EAAC,gBAAgB,oBAAK,SAAS,IAAE,WAAW,EAAE,CAAC,CAAa,EAAE,EAAE;MAC9D,QAAQ,CAAC,CAAC,CAAC,aAA4B,EAAE,eAAe,EAAE;QACxD,IAAI;QACJ,KAAK,EAAE,CAAC;OACT,CAAC,CAAC;IACJ,CAAC;IACA,WAAK,KAAK,EAAC,gBAAgB,IAAE,WAAW,CAAO;IAC9C,QAAQ,CACQ,CACpB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { h, VNode } from '@stencil/core';\nimport { RevoGrid } from '../../interfaces';\nimport { dispatch } from '../../plugins/dispatcher';\nimport ColumnService from '../data/columnService';\nimport { ResizableElement } from '../../services/resizable.element';\nimport { ResizeProps } from '../../services/resizable.directive';\n\ntype Props = {\n  props: RevoGrid.CellProps & Partial<ResizeProps>;\n  additionalData: any;\n  data?: RevoGrid.ColumnTemplateProp;\n};\n\nconst ON_COLUMN_CLICK = 'column-click';\n\nexport const HeaderCellRenderer = ({ data, props, additionalData }: Props, children: VNode[]): VNode => {\n  let colTemplate: VNode | VNode[] | string = data?.name || '';\n  let cellProps = props;\n  if (data?.columnTemplate) {\n    colTemplate = data.columnTemplate(h, data, additionalData);\n  }\n  if (data?.columnProperties) {\n    const extra = data.columnProperties(data);\n    if (extra && typeof extra === 'object') {\n      cellProps = ColumnService.doMerge(props, extra);\n    }\n  }\n  return (\n    <ResizableElement {...cellProps} onMouseDown={(e: MouseEvent) => {\n      dispatch(e.currentTarget as HTMLElement, ON_COLUMN_CLICK, {\n        data,\n        event: e,\n      });\n     }}>\n      <div class=\"header-content\">{colTemplate}</div>\n      {children}\n    </ResizableElement>\n  );\n};\n"]}