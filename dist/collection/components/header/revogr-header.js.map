{"version":3,"file":"revogr-header.js","sourceRoot":"","sources":["../../../src/components/header/revogr-header.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, h, Prop } from '@stencil/core';\nimport { HTMLStencilElement, VNode } from '@stencil/core/internal';\nimport keyBy from 'lodash/keyBy';\n\nimport { HEADER_ACTUAL_ROW_CLASS, HEADER_ROW_CLASS } from '../../utils/consts';\nimport { Observable, RevoGrid, Selection } from '../../interfaces';\nimport { Groups } from '../../store/dataSource/data.store';\nimport HeaderRenderer from './headerRenderer';\nimport ColumnGroupsRenderer from '../../plugins/groupingColumn/columnGroupsRenderer';\nimport { ResizeProps } from '../../services/resizable.directive';\n\n@Component({\n  tag: 'revogr-header',\n  styleUrl: 'revogr-header-style.scss',\n})\nexport class RevogrHeaderComponent {\n  @Element() element!: HTMLStencilElement;\n  @Prop() viewportCol: Observable<RevoGrid.ViewportState>;\n  @Prop() dimensionCol: Observable<RevoGrid.DimensionSettingsState>;\n  @Prop() selectionStore: Observable<Selection.SelectionStoreState>;\n\n  @Prop() parent: string = '';\n  @Prop() groups: Groups;\n  @Prop() groupingDepth: number = 0;\n\n  /**\n   * If columns can be resized\n   */\n  @Prop() canResize: boolean;\n  /**\n   * Define custom resize position\n   */\n  @Prop() resizeHandler: ResizeProps['active'];\n  @Prop() colData: RevoGrid.ColumnRegular[];\n  @Prop() columnFilter: boolean;\n\n  /**\n   * Column type\n   */\n  @Prop() type!:  RevoGrid.DimensionCols | 'rowHeaders';\n\n  /**\n   * Extra properties to pass into header renderer, such as vue or react components to handle parent\n   */\n  @Prop() additionalData: any = {};\n\n  @Event() initialHeaderClick: EventEmitter<RevoGrid.InitialHeaderClick>;\n  @Event() headerresize: EventEmitter<RevoGrid.ViewSettingSizeProp>;\n  @Event({ eventName: 'before-resize', cancelable: true }) beforeResize: EventEmitter<RevoGrid.ColumnRegular[]>;\n  @Event() headerdblClick: EventEmitter<RevoGrid.InitialHeaderClick>;\n\n  private onResize({ width }: { width?: number }, index: number): void {\n    const col = this.colData[index];\n    const event = this.beforeResize.emit([{\n      ...col,\n      size: width || undefined\n    }]);\n    if (event.defaultPrevented) {\n      return;\n    }\n    this.headerresize.emit({ [index]: width || 0 });\n  }\n\n  private onResizeGroup(changedX: number, startIndex: number, endIndex: number): void {\n    const sizes: RevoGrid.ViewSettingSizeProp = {};\n    const cols = keyBy(this.viewportCol.get('items'), 'itemIndex');\n    const change = changedX / (endIndex - startIndex + 1);\n    for (let i = startIndex; i <= endIndex; i++) {\n      const item = cols[i];\n      if (item) {\n        sizes[i] = item.size + change;\n      }\n    }\n    this.headerresize.emit(sizes);\n  }\n\n  render() {\n    const cols = this.viewportCol.get('items');\n    const range = this.selectionStore?.get('range');\n    const cells: VNode[] = [];\n    const visibleProps: { [prop: string]: number } = {};\n\n    // render header columns\n    for (let rgCol of cols) {\n      const colData = this.colData[rgCol.itemIndex];\n      cells.push(\n        <HeaderRenderer\n          range={range}\n          column={rgCol}\n          data={{\n            ...colData,\n            index: rgCol.itemIndex,\n            providers: this.providers,\n          }}\n          canFilter={!!this.columnFilter}\n          canResize={this.canResize}\n          active={this.resizeHandler}\n          onResize={e => this.onResize(e, rgCol.itemIndex)}\n          onDoubleClick={e => this.headerdblClick.emit(e)}\n          onClick={e => this.initialHeaderClick.emit(e)}\n          additionalData={this.additionalData}\n        />,\n      );\n      visibleProps[colData?.prop] = rgCol.itemIndex;\n    }\n\n    return [\n      <div class=\"group-rgRow\">\n        <ColumnGroupsRenderer\n          canResize={this.canResize}\n          active={this.resizeHandler}\n          visibleProps={visibleProps}\n          providers={this.providers}\n          groups={this.groups}\n          dimensionCol={this.dimensionCol.state}\n          depth={this.groupingDepth}\n          onResize={(changedX, startIndex, endIndex) => this.onResizeGroup(changedX, startIndex, endIndex)}\n          additionalData={this.additionalData}\n        />\n      </div>,\n      <div class={`${HEADER_ROW_CLASS} ${HEADER_ACTUAL_ROW_CLASS}`}>{cells}</div>,\n    ];\n  }\n\n  get providers(): RevoGrid.Providers<RevoGrid.DimensionCols | 'rowHeaders'> {\n    return {\n      type: this.type,\n      data: this.colData,\n      viewport: this.viewportCol,\n      dimension: this.dimensionCol,\n      selection: this.selectionStore,\n    };\n  }\n}\n"]}