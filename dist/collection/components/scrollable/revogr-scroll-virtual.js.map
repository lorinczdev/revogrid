{"version":3,"file":"revogr-scroll-virtual.js","sourceRoot":"","sources":["../../../src/components/scrollable/revogr-scroll-virtual.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Component, Element, Event, EventEmitter, h, Host, Method, Prop } from '@stencil/core';\nimport LocalScrollService from '../../services/localScrollService';\nimport { Observable, RevoGrid } from '../../interfaces';\nimport { getScrollbarWidth } from '../../utils';\n\n@Component({\n  tag: 'revogr-scroll-virtual',\n  styleUrl: 'revogr-scroll-style.scss',\n})\nexport class RevogrScrollVirtual {\n  private scrollSize: number = 0;\n  private isAutoHide: boolean = false;\n  private autoHideTimeout: number = 0;\n  private scrollService: LocalScrollService;\n\n  @Element() element: HTMLElement;\n\n  @Prop() dimension: RevoGrid.DimensionType = 'rgRow';\n  @Prop() viewportStore: Observable<RevoGrid.ViewportState>;\n  @Prop() dimensionStore: Observable<RevoGrid.DimensionSettingsState>;\n\n  @Event() scrollVirtual: EventEmitter<RevoGrid.ViewPortScrollEvent>;\n\n  @Method()\n  async setScroll(e: RevoGrid.ViewPortScrollEvent): Promise<void> {\n    if (this.dimension !== e.dimension) {\n      return;\n    }\n    this.scrollService?.setScroll(e);\n  }\n\n  // update on delta in case we don't know existing position or external change\n  @Method()\n  async changeScroll(e: RevoGrid.ViewPortScrollEvent): Promise<RevoGrid.ViewPortScrollEvent> {\n    if (e.delta) {\n      switch (e.dimension) {\n        case 'rgCol':\n          e.coordinate = this.element.scrollLeft + e.delta;\n          break;\n        case 'rgRow':\n          e.coordinate = this.element.scrollTop + e.delta;\n          break;\n      }\n      this.setScroll(e);\n    }\n    return e;\n  }\n\n  set size(s: number) {\n    if (this.dimension === 'rgRow') {\n      this.element.style.minWidth = `${s}px`;\n      return;\n    }\n    this.element.style.minHeight = `${s}px`;\n  }\n\n  get size(): number {\n    if (this.dimension === 'rgRow') {\n      return this.element.clientHeight;\n    }\n    return this.element.clientWidth;\n  }\n\n  connectedCallback(): void {\n    this.scrollService = new LocalScrollService({\n      beforeScroll: e => this.scrollVirtual.emit(e),\n      afterScroll: e => {\n        const type = e.dimension === 'rgRow' ? 'scrollTop' : 'scrollLeft';\n        this.element[type] = e.coordinate;\n      },\n    });\n  }\n\n  disconnectedCallback(): void {\n    clearTimeout(this.autoHideTimeout);\n  }\n\n  componentWillLoad(): void {\n    this.scrollSize = getScrollbarWidth(document);\n    this.isAutoHide = !this.scrollSize;\n  }\n\n  componentDidRender(): void {\n    const type = this.dimension === 'rgRow' ? 'scrollHeight' : 'scrollWidth';\n    if (this.element[type] > this.size) {\n      this.size = this.scrollSize;\n    } else {\n      this.size = 0;\n    }\n    this.scrollService.setParams(\n      {\n        contentSize: this.dimensionStore.get('realSize'),\n        clientSize: this.size,\n        virtualSize: this.viewportStore.get('virtualSize'),\n      },\n      this.dimension,\n    );\n  }\n\n  onScroll(e: MouseEvent): void {\n    let type: 'scrollLeft' | 'scrollTop' = 'scrollLeft';\n    if (this.dimension === 'rgRow') {\n      type = 'scrollTop';\n    }\n    if (this.isAutoHide) {\n      this.size = 20;\n      this.autoHideTimeout = this.autoHide(this.autoHideTimeout);\n    }\n    const target: HTMLElement = e.target as HTMLElement;\n    this.scrollService?.scroll(target[type] || 0, this.dimension);\n  }\n\n  autoHide(timeout?: number): number {\n    clearTimeout(timeout);\n    return (setTimeout(() => {\n      this.size = 0;\n    }, 6000) as unknown) as number;\n  }\n\n  render() {\n    const sizeType = this.dimension === 'rgRow' ? 'height' : 'width';\n    return (\n      <Host {...{ 'auto-hide': this.isAutoHide }} onScroll={(e: MouseEvent) => this.onScroll(e)}>\n        <div style={{ [sizeType]: `${this.extContentSize(this.viewportStore.get('virtualSize'), this.dimensionStore.get('realSize'))}px` }} />\n      </Host>\n    );\n  }\n\n  private extContentSize(vsize: number, contentSize: number): number {\n    return LocalScrollService.getVirtualContentSize(contentSize, this.size, vsize);\n  }\n}\n"]}