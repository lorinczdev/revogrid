{"file":"revogr-edit.revogr-order-editor.entry.cjs.js","mappings":"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","names":["timeout","isEnterKey","isTab","h","Host","EDIT_INPUT_WR","getItemByPosition","debounce","DRAGG_TEXT","setItems"],"sources":["src/components/overlay/editors/text.tsx","src/components/overlay/revogr-edit-style.scss?tag=revogr-edit","src/components/overlay/revogr-edit.tsx","src/components/order/rowOrderService.ts","src/components/order/revogr-order-editor.tsx"],"sourcesContent":["import { h } from '@stencil/core';\nimport { isEnterKey, isTab } from '../../../utils/keyCodes.utils';\nimport { Edition, RevoGrid } from '../../../interfaces';\nimport { timeout } from '../../../utils';\n\n/**\n * Callback triggered on cell editor save\n * Closes editor when called\n * @param preventFocus - if true editor will not be closed and next cell will not be focused\n */\nexport type SaveCallback = (value: Edition.SaveData, preventFocus: boolean) => void;\n\nexport class TextEditor implements Edition.EditorBase {\n  private editInput!: HTMLInputElement;\n\n  public element: Element | null = null;\n  public editCell: Edition.EditCell | null = null;\n\n  constructor(public column: RevoGrid.ColumnRegular, private saveCallback?: SaveCallback) {}\n\n  async componentDidRender(): Promise<void> {\n    if (this.editInput) {\n      await timeout();\n      this.editInput?.focus();\n    }\n  }\n\n  private onKeyDown(e: KeyboardEvent): void {\n    const isEnter = isEnterKey(e.code);\n    const isKeyTab = isTab(e.code);\n\n    if ((isKeyTab || isEnter) && e.target && this.saveCallback && !e.isComposing) {\n      // blur is needed to avoid autoscroll\n      this.editInput.blur();\n      // request callback which will close cell after all\n      this.saveCallback(this.getValue(), isKeyTab);\n    }\n  }\n  \n  getValue() {\n    return this.editInput?.value;\n  }\n\n  // required\n  render() {\n    return (\n      <input\n        type=\"text\"\n        value={this.editCell?.val || ''}\n        ref={el => {\n          this.editInput = el;\n        }}\n        onKeyDown={e => this.onKeyDown(e)}\n      />\n    );\n  }\n}\n","revogr-edit {\n  display: block;\n  position: absolute;\n  background-color: #fff;\n\n  input {\n    height: 100%;\n    width: 100%;\n    box-sizing: border-box;\n  }\n\n  revo-dropdown {\n    height: 100%;\n\n    &.shrink {\n      fieldset legend > span {\n        display: none;\n      }\n    }\n  }\n}\n","import { Component, Event, EventEmitter, Prop, h, Element, Host, Method } from '@stencil/core';\n\nimport { Edition, RevoGrid } from '../../interfaces';\nimport { EDIT_INPUT_WR } from '../../utils/consts';\nimport { TextEditor } from './editors/text';\n\n/**\n * Cell editor component\n */\n@Component({\n  tag: 'revogr-edit',\n  styleUrl: 'revogr-edit-style.scss',\n})\nexport class RevoEdit {\n  @Element() element: HTMLElement;\n  @Prop() editCell: Edition.EditCell;\n\n  @Prop() column: RevoGrid.ColumnRegular | null;\n  /** Custom editors register */\n  @Prop() editor: Edition.EditorCtr | null;\n\n  /** Save on editor close */\n  @Prop() saveOnClose: boolean = false;\n  /** Additional data to pass to renderer */\n  @Prop() additionalData: any;\n\n  /** Cell edit event */\n  @Event() cellEdit: EventEmitter<Edition.SaveDataDetails>;\n\n  /**\n   * Close editor event\n   * pass true if requires focus next\n   */\n  @Event() closeEdit: EventEmitter<boolean | undefined>;\n\n  /** Edit session editor */\n  private currentEditor: Edition.EditorBase | null = null;\n  private saveRunning = false;\n\n  @Method() async cancel() {\n    this.saveRunning = true;\n  }\n\n  onAutoSave() {\n    this.saveRunning = true;\n    const val = this.currentEditor.getValue && this.currentEditor.getValue();\n    // for editor plugin internal usage in case you want to stop save and use your own\n    if (this.currentEditor.beforeAutoSave) {\n      const canSave = this.currentEditor.beforeAutoSave(val);\n      if (canSave === false) {\n        return;\n      }\n    }\n    this.onSave(val, true);\n  }\n\n  /**\n   * Callback triggered on cell editor save\n   * Closes editor when called\n   * @param preventFocus - if true editor will not be closed and next cell will not be focused\n   */\n  onSave(val: Edition.SaveData, preventFocus?: boolean): void {\n    this.saveRunning = true;\n    if (this.editCell) {\n      this.cellEdit.emit({\n        rgCol: this.editCell.x,\n        rgRow: this.editCell.y,\n        type: this.editCell.type,\n        prop: this.editCell.prop,\n        val,\n        preventFocus,\n      });\n    }\n  }\n\n  componentWillRender(): void {\n    // we have active editor\n    if (this.currentEditor) {\n      return;\n    }\n    this.saveRunning = false;\n    \n    // custom editor usage\n    // use TextEditor (editors/text.tsx) to create custom editor\n    if (this.editor) {\n      this.currentEditor = new this.editor(\n        this.column,\n        // save\n        (e, preventFocus) => {\n          this.onSave(e, preventFocus);\n        },\n        // cancel\n        focusNext => {\n          this.saveRunning = true;\n          this.closeEdit.emit(focusNext);\n        },\n      );\n      return;\n    }\n    // default text editor usage\n    this.currentEditor = new TextEditor(this.column, (e, preventFocus) => this.onSave(e, preventFocus));\n  }\n\n  componentDidRender(): void {\n    if (!this.currentEditor) {\n      return;\n    }\n    this.currentEditor.element = this.element.firstElementChild;\n    this.currentEditor.componentDidRender?.();\n  }\n\n  disconnectedCallback(): void {\n    if (this.saveOnClose) {\n      // shouldn't be cancelled by saveRunning\n      // editor requires getValue to be able to save\n      if (!this.saveRunning) {\n        this.onAutoSave();\n      }\n    }\n\n    this.saveRunning = false;\n    if (!this.currentEditor) {\n      return;\n    }\n\n    this.currentEditor.disconnectedCallback && this.currentEditor.disconnectedCallback();\n    if (this.currentEditor.element) {\n      this.currentEditor.element = null;\n    }\n    this.currentEditor = null;\n  }\n\n  render() {\n    if (this.currentEditor) {\n      this.currentEditor.editCell = this.editCell;\n      return <Host class={EDIT_INPUT_WR}>{this.currentEditor.render(h, this.additionalData)}</Host>;\n    }\n    return '';\n  }\n}\n","import { RevoGrid, Selection } from '../../interfaces';\nimport { getItemByPosition } from '../../store/dimension/dimension.helpers';\n\ntype EventData = { el: HTMLElement; rows: RevoGrid.DimensionSettingsState; cols: RevoGrid.DimensionSettingsState };\ninterface Config {\n  positionChanged(from: number, to: number): void;\n}\n\nexport default class RowOrderService {\n  private currentCell: Selection.Cell | null = null;\n  private previousRow: number | null = null;\n\n  constructor(private config: Config) {}\n\n  /** Drag finished, calculate and apply changes */\n  endOrder(e: MouseEvent, data: EventData): void {\n    if (this.currentCell === null) {\n      return;\n    }\n    const newRow = this.getCell(e, data);\n\n    // if position changed\n    if (newRow.y !== this.currentCell.y) {\n      // rgRow dragged out table\n      if (newRow.y < 0) {\n        newRow.y = 0;\n      }\n      // rgRow dragged to the top\n      else if (newRow.y < this.currentCell.y) {\n        newRow.y++;\n      }\n      this.config.positionChanged(this.currentCell.y, newRow.y);\n    }\n    this.clear();\n  }\n\n  /** Drag started, reserve initial cell for farther use */\n  startOrder(e: MouseEvent, data: EventData): Selection.Cell {\n    this.currentCell = this.getCell(e, data);\n    return this.currentCell;\n  }\n\n  move(y: number, data: EventData): RevoGrid.PositionItem | null {\n    const rgRow = this.getRow(y, data);\n    // if rgRow same as previous or below range (-1 = 0) do nothing\n    if (this.previousRow === rgRow.itemIndex || rgRow.itemIndex < -1) {\n      return null;\n    }\n    this.previousRow = rgRow.itemIndex;\n    return rgRow;\n  }\n\n  /** Drag stopped, probably cursor outside of document area */\n  clear(): void {\n    this.currentCell = null;\n    this.previousRow = null;\n  }\n\n  /** Calculate cell based on x, y position */\n  getRow(y: number, { el, rows }: EventData): RevoGrid.PositionItem {\n    const { top } = el.getBoundingClientRect();\n    const topRelative = y - top;\n    const rgRow = getItemByPosition(rows, topRelative);\n    const absolutePosition = {\n      itemIndex: rgRow.itemIndex,\n      start: rgRow.start + top,\n      end: rgRow.end + top,\n    };\n    return absolutePosition;\n  }\n\n  /** Calculate cell based on x, y position */\n  getCell({ x, y }: Selection.Cell, { el, rows, cols }: EventData): Selection.Cell {\n    const { top, left } = el.getBoundingClientRect();\n    const topRelative = y - top;\n    const leftRelative = x - left;\n    const rgRow = getItemByPosition(rows, topRelative);\n    const rgCol = getItemByPosition(cols, leftRelative);\n    return { x: rgCol.itemIndex, y: rgRow.itemIndex };\n  }\n}\n","import { Component, Method, Event, EventEmitter, Prop, Listen } from '@stencil/core';\nimport debounce from 'lodash/debounce';\n\nimport { DragStartEvent, Observable, RevoGrid, Selection } from '../../interfaces';\nimport { DataSourceState, setItems } from '../../store/dataSource/data.store';\nimport { DRAGG_TEXT } from '../../utils/consts';\nimport RowOrderService from './rowOrderService';\n\n@Component({ tag: 'revogr-order-editor' })\nexport class OrderEditor {\n  private rowOrderService: RowOrderService;\n  private moveFunc: ((e: Selection.Cell) => void) | null;\n  private rowMoveFunc = debounce((y: number) => {\n    const rgRow = this.rowOrderService.move(y, this.getData());\n    if (rgRow !== null) {\n      this.internalRowDrag.emit(rgRow);\n    }\n  }, 5);\n\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n  @Prop() parent: HTMLElement;\n  @Prop() dimensionRow: Observable<RevoGrid.DimensionSettingsState>;\n  @Prop() dimensionCol: Observable<RevoGrid.DimensionSettingsState>;\n\n  /** Static stores, not expected to change during component lifetime */\n  @Prop() dataStore: Observable<DataSourceState<RevoGrid.DataType, RevoGrid.DimensionRows>>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /** Row drag started */\n  @Event({ cancelable: true }) internalRowDragStart: EventEmitter<{\n    cell: Selection.Cell;\n    text: string;\n    pos: RevoGrid.PositionItem;\n    event: MouseEvent;\n  }>;\n\n  /** Row drag ended */\n  @Event({ cancelable: true }) internalRowDragEnd: EventEmitter;\n\n  /** Row move */\n  @Event({ cancelable: true }) internalRowDrag: EventEmitter<RevoGrid.PositionItem>;\n\n  /** Row mouse move */\n  @Event({ cancelable: true }) internalRowMouseMove: EventEmitter<Selection.Cell>;\n\n  /** Row dragged, new range ready to be applied */\n  @Event({ cancelable: true }) initialRowDropped: EventEmitter<{ from: number; to: number }>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Listeners\n  //\n  // --------------------------------------------------------------------------\n\n  @Listen('mouseleave', { target: 'document' })\n  onMouseOut(): void {\n    this.clearOrder();\n  }\n\n  /** Action finished inside of the document */\n  @Listen('mouseup', { target: 'document' })\n  onMouseUp(e: MouseEvent): void {\n    this.endOrder(e);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n\n  @Method() async dragStart(e: DragStartEvent) {\n    e.originalEvent.preventDefault();\n\n    // extra check if previous ended\n    if (this.moveFunc) {\n      this.clearOrder();\n    }\n\n    const data = this.getData();\n    const cell = this.rowOrderService.startOrder(e.originalEvent, data);\n    const pos = this.rowOrderService.getRow(e.originalEvent.y, data);\n    const dragStartEvent = this.internalRowDragStart.emit({ cell, text: DRAGG_TEXT, pos, event: e.originalEvent });\n    if (dragStartEvent.defaultPrevented) {\n      return;\n    }\n\n    this.moveFunc = (e: MouseEvent) => this.move(e);\n    document.addEventListener('mousemove', this.moveFunc);\n  }\n\n  @Method() async endOrder(e: MouseEvent) {\n    this.rowOrderService.endOrder(e, this.getData());\n    this.clearOrder();\n  }\n\n  @Method() async clearOrder() {\n    this.rowOrderService.clear();\n    document.removeEventListener('mousemove', this.moveFunc);\n    this.moveFunc = null;\n    this.internalRowDragEnd.emit();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Component methods\n  //\n  // --------------------------------------------------------------------------\n\n  move({ x, y }: { x: number; y: number }): void {\n    this.internalRowMouseMove.emit({ x, y });\n    this.rowMoveFunc(y);\n  }\n\n  connectedCallback(): void {\n    this.rowOrderService = new RowOrderService({ positionChanged: (f, t) => this.onPositionChanged(f, t) });\n  }\n\n  private onPositionChanged(from: number, to: number) {\n    const dropEvent = this.initialRowDropped.emit({ from, to });\n    if (dropEvent.defaultPrevented) {\n      return;\n    }\n    const items = [...this.dataStore.get('items')];\n    const toMove = items.splice(from, 1);\n    items.splice(to, 0, ...toMove);\n    setItems(this.dataStore, items);\n  }\n\n  private getData() {\n    return {\n      el: this.parent,\n      rows: this.dimensionRow.state,\n      cols: this.dimensionCol.state,\n    };\n  }\n}\n"],"version":3}