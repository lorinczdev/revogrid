{"file":"revogr-clipboard.entry.cjs.js","mappings":"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","names":[],"sources":["src/components/clipboard/revogr-clipboard.tsx"],"sourcesContent":["import { Component, Listen, Method, Event, EventEmitter, Prop } from '@stencil/core';\nimport { RevoGrid } from '../../interfaces';\n\n@Component({ tag: 'revogr-clipboard' })\nexport class Clipboard {\n  /**\n   * If readonly mode enables no need for Paste event\n   */\n  @Prop() readonly: boolean;\n\n  /**\n   * Fired when region pasted\n   * @event pasteregion\n   * @property {string[][]} data - data to paste\n   * @property {boolean} defaultPrevented - if true, paste will be canceled\n   */\n  @Event({ bubbles: false }) pasteRegion: EventEmitter<string[][]>;\n\n  /**\n   * Fired before paste applied to the grid\n   * @event beforepaste\n   * @property {string} raw - raw data from clipboard\n   * @property {ClipboardEvent} event - original event\n   * @property {boolean} defaultPrevented - if true, paste will be canceled\n   */\n  @Event({ eventName: 'beforepaste' }) beforePaste: EventEmitter;\n\n  /**\n   * Fired before paste applied to the grid and after data parsed\n   * @event beforepasteapply\n   * @property {string} raw - raw data from clipboard\n   * @property {string[][]} parsed - parsed data\n   */\n  @Event({ eventName: 'beforepasteapply' }) beforePasteApply: EventEmitter;\n\n  /**\n   * Fired after paste applied to the grid\n   * @event afterpasteapply\n   * @property {string} raw - raw data from clipboard\n   * @property {string[][]} parsed - parsed data\n   * @property {ClipboardEvent} event - original event\n   * @property {boolean} defaultPrevented - if true, paste will be canceled\n   */\n  @Event({ eventName: 'afterpasteapply' }) afterPasteApply: EventEmitter;\n\n  /**\n   * Fired before cut triggered\n   * @event beforecopy\n   * @property {ClipboardEvent} event - original event\n   * @property {boolean} defaultPrevented - if true, cut will be canceled\n   */\n  @Event({ eventName: 'beforecut' }) beforeCut: EventEmitter;\n\n  /**\n   * Clears region when cut is done\n   */\n  @Event() clearRegion: EventEmitter<DataTransfer>;\n\n  /**\n   * Fired before copy triggered\n   * @event beforecopy\n   * @property {ClipboardEvent} event - original event\n   * @property {boolean} defaultPrevented - if true, copy will be canceled\n   */\n  @Event({ eventName: 'beforecopy' }) beforeCopy: EventEmitter;\n\n  /**\n   * Fired before copy applied to the clipboard\n   * @event beforecopyapply\n   * @property {DataTransfer} event - original event\n   * @property {string} data - data to copy\n   * @property {boolean} defaultPrevented - if true, copy will be canceled\n   */\n  @Event({ eventName: 'beforecopyapply' }) beforeCopyApply: EventEmitter;\n\n  /**\n   * Fired when region copied\n   * @event copyregion\n   * @property {DataTransfer} data - data to copy\n   * @property {boolean} defaultPrevented - if true, copy will be canceled\n   */\n  @Event({ bubbles: false }) copyRegion: EventEmitter<DataTransfer>;\n\n  @Listen('paste', { target: 'document' }) onPaste(e: ClipboardEvent) {\n    // if readonly do nothing\n    if (this.readonly) {\n      return;\n    }\n    const clipboardData = this.getData(e);\n    const isHTML = clipboardData.types.indexOf('text/html') > -1;\n    const data = isHTML ? clipboardData.getData('text/html') : clipboardData.getData('text');\n    const dataText = clipboardData.getData('text');\n\n    const beforePaste = this.beforePaste.emit({\n      raw: data,\n      dataText,\n      isHTML,\n      event: e,\n    });\n\n    if (beforePaste.defaultPrevented) {\n      return;\n    }\n\n    let parsedData: string[][];\n    // if html, then search for table if no table fallback to regular text parsing\n    if (beforePaste.detail.isHTML) {\n      const table = this.htmlParse(beforePaste.detail.raw);\n      parsedData = table || this.textParse(dataText);\n    } else {\n      parsedData = this.textParse(beforePaste.detail.raw);\n    }\n    const beforePasteApply = this.beforePasteApply.emit({\n      raw: data,\n      parsed: parsedData,\n      event: e,\n    });\n    if (beforePasteApply.defaultPrevented) {\n      return;\n    }\n    this.pasteRegion.emit(beforePasteApply.detail.parsed);\n    // post paste action\n    const afterPasteApply = this.afterPasteApply.emit({\n      raw: data,\n      parsed: parsedData,\n      event: e,\n    });\n    // keep default behavior if needed\n    if (afterPasteApply.defaultPrevented) {\n      return;\n    }\n    e.preventDefault();\n  }\n\n  /**\n   * Listen to copy event and emit copy region event\n   */\n  @Listen('copy', { target: 'document' }) copyStarted(e: ClipboardEvent) {\n    const beforeCopy = this.beforeCopy.emit({\n      event: e,\n    });\n    if (beforeCopy.defaultPrevented) {\n      return;\n    }\n    const data = this.getData(beforeCopy.detail.event);\n    this.copyRegion.emit(data);\n    e.preventDefault();\n  }\n\n  /**\n   * Listen to copy event and emit copy region event\n   */\n  @Listen('cut', { target: 'document' }) cutStarted(e: ClipboardEvent) {\n    const beforeCut = this.beforeCut.emit({\n      event: e,\n    });\n    if (beforeCut.defaultPrevented) {\n      return;\n    }\n    const data = this.getData(beforeCut.detail.event);\n    this.copyStarted(e);\n\n    // if readonly do nothing\n    if (this.readonly) {\n      return;\n    }\n\n    this.clearRegion.emit(data);\n    e.preventDefault();\n  }\n\n  @Method() async doCopy(e: DataTransfer, data?: RevoGrid.DataFormat[][]) {\n    const beforeCopyApply = this.beforeCopyApply.emit({\n      event: e,\n      data,\n    });\n    if (beforeCopyApply.defaultPrevented) {\n      return;\n    }\n    const parsed = data ? this.parserCopy(data) : '';\n    e.setData('text/plain', parsed);\n  }\n\n  parserCopy(data: RevoGrid.DataFormat[][]) {\n    return data.map(rgRow => rgRow.join('\\t')).join('\\n');\n  }\n\n  private textParse(data: string) {\n    const result: string[][] = [];\n    const rows = data.split(/\\r\\n|\\n|\\r/);\n    for (let y in rows) {\n      result.push(rows[y].split('\\t'));\n    }\n    return result;\n  }\n\n  private htmlParse(data: string) {\n    const result: string[][] = [];\n    const fragment = document.createRange().createContextualFragment(data);\n    const table = fragment.querySelector('table');\n    if (!table) {\n      return null;\n    }\n    for (const rgRow of Array.from(table.rows)) {\n      result.push(Array.from(rgRow.cells).map(cell => cell.innerText));\n    }\n    return result;\n  }\n\n  private getData(e: ClipboardEvent) {\n    return e.clipboardData || (window as unknown as { clipboardData: DataTransfer | null })?.clipboardData;\n  }\n}\n"],"version":3}