{"file":"revogr-data2.js","mappings":"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","names":[],"sources":["src/plugins/groupingRow/grouping.row.renderer.tsx","src/components/data/revogr-data-style.scss?tag=revogr-data","src/components/data/revogr-data.tsx"],"sourcesContent":["import { h } from '@stencil/core';\nimport RowRenderer, { RowProps } from '../../components/data/rowRenderer';\nimport { RevoGrid } from '../../interfaces';\nimport { GROUP_DEPTH, GROUP_EXPANDED, GROUP_EXPAND_BTN, GROUP_EXPAND_EVENT, PSEUDO_GROUP_ITEM } from './grouping.const';\nimport { GroupLabelTemplateFunc } from './grouping.row.types';\n\ninterface GroupRowPros extends RowProps {\n  model: RevoGrid.DataType;\n  hasExpand: boolean;\n  groupingCustomRenderer?: GroupLabelTemplateFunc;\n}\ntype Props = GroupRowPros & RevoGrid.PositionItem;\n\nfunction expandEvent(e: MouseEvent, model: RevoGrid.DataType, virtualIndex: number) {\n  const event = new CustomEvent(GROUP_EXPAND_EVENT, {\n    detail: {\n      model,\n      virtualIndex,\n    },\n    cancelable: true,\n    bubbles: true,\n  });\n  e.target.dispatchEvent(event);\n}\n\nconst GroupingRowRenderer = (props: Props) => {\n  const { model, itemIndex, hasExpand, groupingCustomRenderer } = props;\n  const name: string = model[PSEUDO_GROUP_ITEM];\n  const expanded: boolean = model[GROUP_EXPANDED];\n  const depth = parseInt(model[GROUP_DEPTH], 10) || 0;\n  if (!hasExpand) {\n    return <RowRenderer {...props} rowClass=\"groupingRow\" depth={depth} />;\n  }\n\n  if (groupingCustomRenderer) {\n    return (\n      <RowRenderer {...props} rowClass=\"groupingRow\" depth={depth}>\n        <div onClick={e => expandEvent(e, model, itemIndex)}>\n          {groupingCustomRenderer(h, { name, itemIndex, expanded, depth })}\n        </div>\n      </RowRenderer>\n    );\n  }\n\n  return (\n    <RowRenderer {...props} rowClass=\"groupingRow\" depth={depth}>\n      <button class={{ [GROUP_EXPAND_BTN]: true }} onClick={e => expandEvent(e, model, itemIndex)}>\n        <svg aria-hidden=\"true\" style={{ transform: `rotate(${!expanded ? -90 : 0}deg)` }} focusable=\"false\" viewBox=\"0 0 448 512\">\n          <path\n            fill=\"currentColor\"\n            d=\"M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z\"\n          ></path>\n        </svg>\n      </button>\n      {name}\n    </RowRenderer>\n  );\n};\nexport default GroupingRowRenderer;\n","revogr-data {\n  display: block;\n  width: 100%;\n  position: relative;\n\n  .rgRow {\n    position: absolute;\n    width: 100%;\n    left: 0;\n\n    &.groupingRow {\n      font-weight: 600;\n\n      .group-expand {\n        width: 25px;\n        height: 100%;\n        max-height: 25px;\n        margin-right: 2px;\n        background-color: transparent;\n        border-color: transparent;\n\n        svg {\n          width: 7px;\n        }\n      }\n    }\n  }\n\n  .revo-draggable {\n    $w: 24px;\n\n    border: none;\n    height: 32px;\n    display: inline-flex;\n    outline: 0;\n    padding: 0;\n    font-size: 0.8125rem;\n    box-sizing: border-box;\n    align-items: center;\n    white-space: nowrap;\n    vertical-align: middle;\n    justify-content: center;\n    text-decoration: none;\n    width: $w;\n    height: 100%;\n    cursor: pointer;\n\n    > .revo-drag-icon {\n      vertical-align: middle;\n      display: inline-block;\n      pointer-events: none;\n      transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, box-shadow 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n    }\n  }\n\n  .rgCell {\n    top: 0;\n    position: absolute;\n    box-sizing: border-box;\n    height: 100%;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n\n    &.align-center {\n      text-align: center;\n    }\n    &.align-left {\n      text-align: left;\n    }\n    &.align-right {\n      text-align: right;\n    }\n  }\n}\n","import {\n  Component,\n  Host,\n  Watch,\n  Element,\n  Event,\n  Prop,\n  VNode,\n  EventEmitter,\n  h,\n} from '@stencil/core';\nimport { HTMLStencilElement, State } from '@stencil/core/internal';\n\nimport ColumnService, { ColumnSource, RowSource } from './columnService';\nimport { ROW_FOCUSED_CLASS } from '../../utils/consts';\n\nimport { getSourceItem } from '../../store/dataSource/data.store';\nimport { Observable, RevoGrid, Selection } from '../../interfaces';\nimport RowRenderer from './rowRenderer';\nimport GroupingRowRenderer from '../../plugins/groupingRow/grouping.row.renderer';\nimport { isGrouping } from '../../plugins/groupingRow/grouping.service';\n\n/**\n * This component is responsible for rendering data\n * Rows, columns, groups and cells\n */\n@Component({\n  tag: 'revogr-data',\n  styleUrl: 'revogr-data-style.scss',\n})\nexport class RevogrData {\n  private columnService: ColumnService;\n\n  @Element() element!: HTMLStencilElement;\n\n  /**\n   * If readonly mode enables\n   */\n  @Prop() readonly: boolean;\n  /**\n   * Range selection mode\n   */\n  @Prop() range: boolean;\n\n  /**\n   * Defines property from which to read row class\n   */\n  @Prop() rowClass: string;\n  /**\n   * Additional data to pass to renderer\n   * Used in plugins such as vue or react to pass root app entity to cells\n   */\n  @Prop() additionalData: any;\n  @Prop() rowSelectionStore!: Observable<Selection.SelectionStoreState>;\n  @Prop() viewportRow!: Observable<RevoGrid.ViewportState>;\n  @Prop() viewportCol!: Observable<RevoGrid.ViewportState>;\n\n  @Prop() dimensionRow!: Observable<RevoGrid.DimensionSettingsState>;\n\n  /** Static stores, not expected to change during component lifetime */\n  @Prop() colData!: ColumnSource;\n  @Prop() dataStore!: RowSource;\n  @Prop() type!: RevoGrid.DimensionRows;\n\n  /**\n   * Before each row render\n   */\n  @Event() beforeRowRender: EventEmitter;\n  /**\n   * When data render finished for the designated type\n   */\n  @Event() afterrender: EventEmitter;\n\n  private renderedRows = new Map<number, VNode>();\n  private currentRange: Selection.RangeArea | null = null;\n\n  private rangeUnsubscribe: (() => void) | undefined;\n\n  @State() providers: RevoGrid.Providers;\n\n  @Watch('dataStore')\n  @Watch('colData')\n  onStoreChange() {\n    this.columnService?.destroy();\n    this.columnService = new ColumnService(this.dataStore, this.colData);\n    // make sure we have correct data, before render\n    this.providers = {\n      type: this.type,\n      data: this.dataStore,\n      viewport: this.viewportCol,\n      dimension: this.dimensionRow,\n      selection: this.rowSelectionStore,\n    };\n\n    this.rangeUnsubscribe?.();\n    this.rangeUnsubscribe = this.rowSelectionStore.onChange('range', e => {\n      // clear prev range\n      if (this.currentRange) {\n        this.renderedRows.forEach((row, y) => {\n          // skip current range\n          if (e && y >= e.y && y <= e.y1) {\n            return;\n          }\n          if (\n            row &&\n            row.$elm$ instanceof HTMLElement &&\n            row.$elm$.classList.contains(ROW_FOCUSED_CLASS)\n          ) {\n            row.$elm$.classList.remove(ROW_FOCUSED_CLASS);\n          }\n        });\n      }\n\n      // apply new range\n      if (e) {\n        for (let y = e.y; y <= e.y1; y++) {\n          const row = this.renderedRows.get(y);\n          if (\n            row &&\n            row.$elm$ instanceof HTMLElement &&\n            !row.$elm$.classList.contains(ROW_FOCUSED_CLASS)\n          ) {\n            row.$elm$.classList.add(ROW_FOCUSED_CLASS);\n          }\n        }\n      }\n      this.currentRange = e;\n    });\n  }\n\n  connectedCallback() {\n    this.onStoreChange();\n  }\n\n  disconnectedCallback() {\n    this.columnService?.destroy();\n    this.rangeUnsubscribe?.();\n  }\n\n  componentDidRender() {\n    this.afterrender.emit({ type: this.type });\n  }\n\n  render() {\n    this.renderedRows = new Map();\n    const rows = this.viewportRow.get('items');\n    const cols = this.viewportCol.get('items');\n    if (!this.columnService.columns.length || !rows.length || !cols.length) {\n      return '';\n    }\n    const rowsEls: VNode[] = [];\n\n    const depth = this.dataStore.get('groupingDepth');\n    const groupingCustomRenderer = this.dataStore.get('groupingCustomRenderer');\n    for (let rgRow of rows) {\n      const dataItem = getSourceItem(this.dataStore, rgRow.itemIndex);\n      /** grouping */\n      if (isGrouping(dataItem)) {\n        rowsEls.push(\n          <GroupingRowRenderer\n            {...rgRow}\n            index={rgRow.itemIndex}\n            model={dataItem}\n            groupingCustomRenderer={groupingCustomRenderer}\n            hasExpand={this.columnService.hasGrouping}\n          />,\n        );\n        continue;\n      }\n      /** grouping end */\n      const cells: (VNode | string | void)[] = [];\n      let rowClass = this.rowClass\n        ? this.columnService.getRowClass(rgRow.itemIndex, this.rowClass)\n        : '';\n\n      // highlight row if it is in range\n      if (\n        this.currentRange &&\n        rgRow.itemIndex >= this.currentRange.y &&\n        rgRow.itemIndex <= this.currentRange.y1\n      ) {\n        rowClass += ` ${ROW_FOCUSED_CLASS}`;\n      }\n      for (let rgCol of cols) {\n        cells.push(\n          <revogr-cell\n            additionalData={this.additionalData}\n            columnService={this.columnService}\n            providers={this.providers}\n            depth={this.columnService.hasGrouping ? depth : 0}\n            rowIndex={rgRow.itemIndex}\n            rowStart={rgRow.start}\n            rowEnd={rgRow.end}\n            rowSize={rgRow.size}\n            colIndex={rgCol.itemIndex}\n            colStart={rgCol.start}\n            colEnd={rgCol.end}\n            colSize={rgCol.size}\n          />,\n        );\n      }\n      const row = (\n        <RowRenderer\n          index={rgRow.itemIndex}\n          rowClass={rowClass}\n          size={rgRow.size}\n          start={rgRow.start}\n        >\n          {cells}\n        </RowRenderer>\n      );\n      this.beforeRowRender.emit({\n        node: row,\n        item: rgRow,\n        dataItem,\n      });\n      rowsEls.push(row);\n      this.renderedRows.set(rgRow.itemIndex, row);\n    }\n    return (\n      <Host>\n        <slot />\n        {rowsEls}\n      </Host>\n    );\n  }\n}\n"],"version":3}