{"file":"columnService.js","mappings":"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","names":["slice"],"sources":["src/plugins/groupingRow/grouping.const.ts","src/plugins/groupingRow/grouping.service.ts","src/store/selection/selection.helpers.ts","src/store/selection/selection.store.ts","src/services/selection.store.connector.ts","src/components/data/columnService.ts"],"sourcesContent":["import { GRID_INTERNALS } from '../../utils/consts';\n\nexport const GROUP_DEPTH = `${GRID_INTERNALS}-depth`;\nexport const PSEUDO_GROUP_ITEM = `${GRID_INTERNALS}-name`;\nexport const PSEUDO_GROUP_ITEM_ID = `${GRID_INTERNALS}-id`;\nexport const PSEUDO_GROUP_ITEM_VALUE = `${GRID_INTERNALS}-value`;\nexport const PSEUDO_GROUP_COLUMN = `${GRID_INTERNALS}-column`;\nexport const GROUP_EXPANDED = `${GRID_INTERNALS}-expanded`;\nexport const GROUP_ORIGINAL_INDEX = `${GRID_INTERNALS}-original-index`;\nexport const GROUP_EXPAND_BTN = `group-expand`;\nexport const GROUP_EXPAND_EVENT = `groupExpandClick`;\nexport const GROUPING_ROW_TYPE = 'rgRow';\n","import { RevoGrid } from '../../interfaces';\nimport {\n  GROUP_DEPTH,\n  GROUP_EXPANDED,\n  PSEUDO_GROUP_COLUMN,\n  PSEUDO_GROUP_ITEM,\n  PSEUDO_GROUP_ITEM_ID,\n  PSEUDO_GROUP_ITEM_VALUE,\n  GROUP_ORIGINAL_INDEX,\n} from './grouping.const';\nimport { GroupLabelTemplateFunc } from './grouping.row.types';\n\nexport type ExpandedOptions = {\n  prevExpanded?: Record<string, boolean>;\n  expandedAll?: boolean; // skip trim\n\n  getGroupValue?(item: RevoGrid.DataType, prop: string | number): any;\n  groupLabelTemplate?: GroupLabelTemplateFunc;\n};\n\ntype GroupedData = Map<string, GroupedData | RevoGrid.DataType[]>;\n\nfunction getGroupValueDefault(item: RevoGrid.DataType, prop: string | number) {\n  return item[prop] || null;\n}\n\n\n/**\n * Gather data for grouping\n * @param array - flat data array\n * @param groupIds - ids of groups\n * @param expanded - potentially expanded items if present\n */\nexport function gatherGrouping(\n  array: RevoGrid.DataType[],\n  groupIds: RevoGrid.ColumnProp[],\n  { prevExpanded, expandedAll, getGroupValue = getGroupValueDefault }: ExpandedOptions,\n) {\n  const groupedItems: GroupedData = new Map();\n  array.forEach((item, originalIndex) => {\n    const groupLevelValues = groupIds.map(groupId => getGroupValue(item, groupId));\n    const lastLevelValue = groupLevelValues.pop();\n    let currentGroupLevel = groupedItems;\n    groupLevelValues.forEach(value => {\n      if (!currentGroupLevel.has(value)) {\n        currentGroupLevel.set(value, new Map());\n      }\n      currentGroupLevel = currentGroupLevel.get(value) as GroupedData;\n    });\n    if (!currentGroupLevel.has(lastLevelValue)) {\n      currentGroupLevel.set(lastLevelValue, []);\n    }\n    const lastLevelItems = currentGroupLevel.get(\n      lastLevelValue,\n    ) as RevoGrid.DataType[];\n    lastLevelItems.push({\n      ...item,\n      [GROUP_ORIGINAL_INDEX]: originalIndex,\n    });\n  });\n\n  let itemIndex = -1;\n  const groupingDepth = groupIds.length;\n  // collapse all groups in the beginning\n  const trimmed: Record<number, boolean> = {};\n  // index mapping\n  const oldNewIndexMap: Record<number, number> = {};\n  // check if group header exists\n  const pseudoGroupTest: Record<string, number[]> = {};\n  const sourceWithGroups: RevoGrid.DataType[] = [];\n  function flattenGroupMaps(\n    groupedValues: GroupedData,\n    parentIds: string[],\n    isExpanded: boolean,\n  ) {\n    const depth = parentIds.length;\n    groupedValues.forEach((innerGroupedValues, groupId) => {\n      const levelIds = [...parentIds, groupId];\n      const mergedIds = levelIds.join(',');\n      const isGroupExpanded =\n        isExpanded && (!!expandedAll || !!prevExpanded?.[mergedIds]);\n      sourceWithGroups.push({\n        [PSEUDO_GROUP_ITEM]: groupId,\n        [GROUP_DEPTH]: depth,\n        [PSEUDO_GROUP_ITEM_ID]: JSON.stringify(levelIds),\n        [PSEUDO_GROUP_ITEM_VALUE]: mergedIds,\n        [GROUP_EXPANDED]: isGroupExpanded,\n      });\n      itemIndex += 1;\n      if (!isGroupExpanded && depth) {\n        trimmed[itemIndex] = true;\n      }\n      if (Array.isArray(innerGroupedValues)) {\n        innerGroupedValues.forEach(value => {\n          itemIndex += 1;\n          if (!isGroupExpanded) {\n            trimmed[itemIndex] = true;\n          }\n          oldNewIndexMap[value[GROUP_ORIGINAL_INDEX]] = itemIndex;\n          const pseudoGroupTestIds = levelIds.map((_value, index) =>\n            levelIds.slice(0, index + 1).join(','),\n          );\n          pseudoGroupTestIds.forEach(pseudoGroupTestId => {\n            if (!pseudoGroupTest[pseudoGroupTestId]) {\n              pseudoGroupTest[pseudoGroupTestId] = [];\n            }\n            pseudoGroupTest[pseudoGroupTestId].push(itemIndex);\n          });\n        });\n        sourceWithGroups.push(...innerGroupedValues);\n      } else {\n        flattenGroupMaps(innerGroupedValues, levelIds, isGroupExpanded);\n      }\n    });\n  }\n  flattenGroupMaps(groupedItems, [], true);\n\n  return {\n    sourceWithGroups, // updates source mirror\n    depth: groupingDepth, // largest depth for grouping\n    trimmed, // used for expand/collapse grouping values\n    oldNewIndexMap, // used for mapping old values to new\n    childrenByGroup: pseudoGroupTest, // used to get child items in group\n  };\n}\n\nexport function getGroupingName(rgRow?: RevoGrid.DataType) {\n  return rgRow && rgRow[PSEUDO_GROUP_ITEM];\n}\n\nexport function isGrouping(rgRow?: RevoGrid.DataType) {\n  return rgRow && typeof rgRow[PSEUDO_GROUP_ITEM] !== 'undefined';\n}\n\nexport function isGroupingColumn(column?: RevoGrid.ColumnRegular) {\n  return column && typeof column[PSEUDO_GROUP_COLUMN] !== 'undefined';\n}\n\nexport function measureEqualDepth<T>(groupA: T[], groupB: T[]) {\n  const ln = groupA.length;\n  let i = 0;\n  for (; i < ln; i++) {\n    if (groupA[i] !== groupB[i]) {\n      return i;\n    }\n  }\n  return i;\n}\n\nexport function getParsedGroup(id: string): any[] {\n  const parseGroup = JSON.parse(id);\n  // extra precaution and type safe guard\n  if (!Array.isArray(parseGroup)) {\n    return null;\n  }\n  return parseGroup;\n}\n\n// check if items is child of current clicked group\nexport function isSameGroup(\n  currentGroup: any[],\n  currentModel: RevoGrid.DataType,\n  nextModel: RevoGrid.DataType,\n) {\n  const nextGroup = getParsedGroup(nextModel[PSEUDO_GROUP_ITEM_ID]);\n  if (!nextGroup) {\n    return false;\n  }\n\n  const depth = measureEqualDepth(currentGroup, nextGroup);\n  return currentModel[GROUP_DEPTH] < depth;\n}\n","import { Selection } from '../../interfaces';\nimport { EMPTY_INDEX } from '../../services/selection.store.connector';\nimport Cell = Selection.Cell;\nimport RangeArea = Selection.RangeArea;\n\nexport function isHiddenStore(pos: number) {\n  return pos === EMPTY_INDEX;\n}\n\nexport function nextCell(cell: Cell, lastCell: Cell): Partial<Cell> | null {\n  const nextItem: Partial<Cell> = {};\n  let types: (keyof Cell)[] = ['x', 'y'];\n\n  // previous item check\n  for (let t of types) {\n    if (cell[t] < 0) {\n      nextItem[t] = cell[t];\n      return nextItem;\n    }\n  }\n  // next item check\n  for (let t of types) {\n    if (cell[t] >= lastCell[t]) {\n      nextItem[t] = cell[t] - lastCell[t];\n      return nextItem;\n    }\n  }\n  return null;\n}\n\nexport function cropCellToMax(cell: Cell, lastCell: Cell): Cell {\n  const newCell: Cell = { ...cell };\n  let types: (keyof Cell)[] = ['x', 'y'];\n  // previous item check\n  for (let t of types) {\n    if (cell[t] < 0) {\n      newCell[t] = 0;\n    }\n  }\n  // next item check\n  for (let t of types) {\n    if (cell[t] >= lastCell[t]) {\n      newCell[t] = lastCell[t] - 1;\n    }\n  }\n  return newCell;\n}\n\nexport function getRange(start?: Cell, end?: Cell): RangeArea | null {\n  return start && end\n    ? {\n        x: Math.min(start.x, end.x),\n        y: Math.min(start.y, end.y),\n        x1: Math.max(start.x, end.x),\n        y1: Math.max(start.y, end.y),\n      }\n    : null;\n}\n\nexport function isRangeSingleCell(a: RangeArea): boolean {\n  return a.x === a.x1 && a.y === a.y1;\n}\n","import { createStore } from '@stencil/store';\nimport { Observable, Selection } from '../../interfaces';\nimport { setStore } from '../../utils/store.utils';\nimport { getRange } from './selection.helpers';\n\ntype StoreState = Selection.SelectionStoreState;\n\nfunction defaultState(): StoreState {\n  return {\n    range: null,\n    tempRange: null,\n    tempRangeType: null,\n    focus: null,\n    edit: null,\n    lastCell: null,\n  };\n}\n\nexport class SelectionStore {\n  readonly store: Observable<Selection.SelectionStoreState>;\n  private unsubscribe: { (): void }[] = [];\n  constructor() {\n    this.store = createStore(defaultState());\n    this.store.on('set', (key, newVal) => {\n      if (key === 'tempRange' && !newVal) {\n        this.store.set('tempRangeType', null);\n      }\n    });\n  }\n\n  onChange<Key extends keyof StoreState>(propName: Key, cb: (newValue: StoreState[Key]) => void) {\n    this.unsubscribe.push(this.store.onChange(propName, cb));\n  }\n\n  clearFocus() {\n    setStore(this.store, { focus: null, range: null, edit: null, tempRange: null });\n  }\n\n  setFocus(focus: Selection.Cell, end?: Selection.Cell) {\n    if (!end) {\n      setStore(this.store, { focus });\n    } else {\n      setStore(this.store, {\n        focus,\n        range: getRange(focus, end),\n        edit: null,\n        tempRange: null,\n      });\n    }\n  }\n\n  setTempArea(range: Selection.TempRange | null) {\n    setStore(this.store, { tempRange: range?.area, tempRangeType: range?.type, edit: null });\n  }\n\n  clearTemp() {\n    setStore(this.store, { tempRange: null });\n  }\n\n  /** Can be applied from selection change or from simple keyboard change clicks */\n  setRangeArea(range: Selection.RangeArea) {\n    setStore(this.store, { range, edit: null, tempRange: null });\n  }\n  setRange(start: Selection.Cell, end: Selection.Cell) {\n    this.setRangeArea(getRange(start, end));\n  }\n\n  setLastCell(lastCell: Selection.Cell) {\n    setStore(this.store, { lastCell });\n  }\n\n  setEdit(val: string | boolean) {\n    const focus = this.store.get('focus');\n    if (focus && typeof val === 'string') {\n      setStore(this.store, {\n        edit: { x: focus.x, y: focus.y, val },\n      });\n      return;\n    }\n    setStore(this.store, { edit: null });\n  }\n\n  dispose() {\n    this.unsubscribe.forEach(f => f());\n    this.store.dispose();\n  }\n}\n","import { Edition, Selection, RevoGrid } from '../interfaces';\nimport { cropCellToMax, isHiddenStore, nextCell } from '../store/selection/selection.helpers';\nimport { SelectionStore } from '../store/selection/selection.store';\n\nimport Cell = Selection.Cell;\nimport EditCellStore = Edition.EditCellStore;\n\ntype StoreByDimension = Record<number, SelectionStore>;\ntype FocusedStore = {\n  entity: SelectionStore;\n  cell: Selection.Cell;\n  position: Selection.Cell;\n};\n\ntype StoresMapping<T> = { [xOrY: number]: Partial<T> };\n\nexport const EMPTY_INDEX = -1;\n\nexport default class SelectionStoreConnector {\n  // dirty flag required to cleanup whole store in case visibility of panels changed\n  private dirty = false;\n  readonly stores: { [y: number]: { [x: number]: SelectionStore } } = {};\n\n  readonly columnStores: StoreByDimension = {};\n  readonly rowStores: { [y: number]: SelectionStore } = {};\n\n  /**\n   * Helpers for data conversion\n   */\n  readonly storesByType: Partial<Record<RevoGrid.MultiDimensionType, number>> = {};\n  readonly storesXToType: StoresMapping<RevoGrid.DimensionCols> = {};\n  readonly storesYToType: StoresMapping<RevoGrid.DimensionRows> = {};\n\n  get focusedStore(): FocusedStore | null {\n    for (let y in this.stores) {\n      for (let x in this.stores[y]) {\n        const focused = this.stores[y][x]?.store.get('focus');\n        if (focused) {\n          return {\n            entity: this.stores[y][x],\n            cell: focused,\n            position: {\n              x: parseInt(x, 10),\n              y: parseInt(y, 10),\n            },\n          };\n        }\n      }\n    }\n    return null;\n  }\n\n  get edit(): EditCellStore | undefined {\n    return this.focusedStore?.entity.store.get('edit');\n  }\n\n  get focused(): Cell | undefined {\n    return this.focusedStore?.entity.store.get('focus');\n  }\n\n  get selectedRange(): Selection.RangeArea | undefined {\n    return this.focusedStore?.entity.store.get('range');\n  }\n\n  private readonly sections: Element[] = [];\n\n  registerSection(e?: Element) {\n    if (!e) {\n      this.sections.length = 0;\n      // some elements removed, rebuild stores\n      this.dirty = true;\n      return;\n    }\n    if (this.sections.indexOf(e) === -1) {\n      this.sections.push(e);\n    }\n  }\n\n  // check if require to cleanup all stores\n  beforeUpdate() {\n    if (this.dirty) {\n      for (let y in this.stores) {\n        for (let x in this.stores[y]) {\n          this.stores[y][x].dispose();\n        }\n      }\n      this.dirty = false;\n    }\n  }\n\n  registerColumn(x: number, type: RevoGrid.DimensionCols): SelectionStore {\n\n    // if hidden just create store but no operations needed\n    if (isHiddenStore(x)) {\n      return new SelectionStore();\n    }\n    if (this.columnStores[x]) {\n      return this.columnStores[x];\n    }\n    this.columnStores[x] = new SelectionStore();\n    // build cross linking type to position\n    this.storesByType[type] = x;\n    this.storesXToType[x] = type;\n    return this.columnStores[x];\n  }\n\n  registerRow(y: number, type: RevoGrid.DimensionRows): SelectionStore {\n    // if hidden just create store\n    if (isHiddenStore(y)) {\n      return new SelectionStore();\n    }\n    if (this.rowStores[y]) {\n      return this.rowStores[y];\n    }\n    this.rowStores[y] = new SelectionStore();\n    // build cross linking type to position\n    this.storesByType[type] = y;\n    this.storesYToType[y] = type;\n    return this.rowStores[y];\n  }\n\n  /**\n   * Cross store proxy, based on multiple dimensions\n   */\n  register({ x, y }: Selection.Cell): SelectionStore {\n    // if hidden just create store\n    if (isHiddenStore(x) || isHiddenStore(y)) {\n      return new SelectionStore();\n    }\n    if (!this.stores[y]) {\n      this.stores[y] = {};\n    }\n    if (this.stores[y][x]) {\n      // Store already registered. Do not register twice\n      return this.stores[y][x];\n    }\n    this.stores[y][x] = new SelectionStore();\n    // proxy update, column store trigger only range area\n    this.stores[y][x]?.onChange('range', c => {\n      this.columnStores[x].setRangeArea(c);\n      this.rowStores[y].setRangeArea(c);\n    });\n    // clean up on remove\n    this.stores[y][x]?.store.on('dispose', () => this.destroy(x, y));\n    return this.stores[y][x];\n  }\n\n  private destroy(x: number, y: number) {\n    this.columnStores[x]?.dispose();\n    this.rowStores[y]?.dispose();\n\n    delete this.rowStores[y];\n    delete this.columnStores[x];\n    // clear x cross link\n    if (this.storesXToType[x]) {\n      const type = this.storesXToType[x];\n      delete this.storesXToType[x];\n      delete this.storesByType[type];\n    }\n    // clear y cross link\n    if (this.storesYToType[y]) {\n      const type = this.storesYToType[y];\n      delete this.storesYToType[y];\n      delete this.storesByType[type];\n    }\n    if (this.stores[y]) {\n      delete this.stores[y][x];\n    }\n    // clear empty rows\n    if (!Object.keys(this.stores[y] || {}).length) {\n      delete this.stores[y];\n    }\n  }\n\n  setEditByCell<T extends Selection.Cell>(storePos: T, editCell: T) {\n    this.focusByCell(storePos, editCell, editCell);\n    this.setEdit('');\n  }\n\n  focusByCell<T extends Selection.Cell>(storePos: T, start: T, end: T) {\n    const store = this.stores[storePos.y][storePos.x];\n    this.focus(store, { focus: start, end });\n  }\n\n  focus(store: SelectionStore, { focus, end }: { focus: Cell; end: Cell }) {\n    let currentStorePointer: Selection.Cell;\n    // clear all stores focus leave only active one\n    for (let y in this.stores) {\n      for (let x in this.stores[y]) {\n        const s = this.stores[y][x];\n        // clear other stores, only one area can be selected\n        if (s !== store) {\n          s.clearFocus();\n        } else {\n          currentStorePointer = { x: parseInt(x, 10), y: parseInt(y, 10) };\n        }\n      }\n    }\n    if (!currentStorePointer) {\n      return null;\n    }\n\n    // check is focus in next store\n    const lastCell = store.store.get('lastCell');\n    // item in new store\n    const nextItem: Partial<Cell> | null = nextCell(focus, lastCell);\n\n    let nextStore;\n    if (nextItem) {\n      for (let i in nextItem) {\n        let type: keyof Cell = i as keyof Cell;\n        let stores;\n        switch (type) {\n          case 'x':\n            stores = this.getXStores(currentStorePointer.y);\n            break;\n          case 'y':\n            stores = this.getYStores(currentStorePointer.x);\n            break;\n        }\n        if (nextItem[type] >= 0) {\n          nextStore = stores[++currentStorePointer[type]];\n        } else {\n          nextStore = stores[--currentStorePointer[type]];\n          const nextLastCell = nextStore?.store.get('lastCell');\n          if (nextLastCell) {\n            nextItem[type] = nextLastCell[type] + nextItem[type];\n          }\n        }\n      }\n    }\n    // if next store present - update\n    if (nextStore) {\n      let item = { ...focus, ...nextItem };\n      this.focus(nextStore, { focus: item, end: item });\n      return null;\n    }\n\n    focus = cropCellToMax(focus, lastCell);\n    end = cropCellToMax(end, lastCell);\n\n    store.setFocus(focus, end);\n    return focus;\n  }\n\n  clearAll(): void {\n    for (let y in this.stores) {\n      for (let x in this.stores[y]) {\n        this.stores[y][x]?.clearFocus();\n      }\n    }\n  }\n\n  setEdit(val: string | boolean) {\n    if (!this.focusedStore) {\n      return;\n    }\n    this.focusedStore.entity.setEdit(val);\n  }\n\n  /**\n   * Select all cells across all stores\n   */\n  selectAll() {\n    for (let y in this.stores) {\n      for (let x in this.stores[y]) {\n        const store = this.stores[y][x];\n        if (!store) {\n          continue;\n        }\n        const lastCell = store.store.get('lastCell');\n        store.setRange({ x: 0, y: 0 }, { x: lastCell.x - 1, y: lastCell.y - 1 });\n      }\n    }\n  }\n\n  private getXStores(y: number) {\n    return this.stores[y];\n  }\n\n  private getYStores(x: number) {\n    const stores: { [p: number]: SelectionStore } = {};\n    for (let i in this.stores) {\n      stores[i] = this.stores[i][x];\n    }\n    return stores;\n  }\n}\n","import { DataSourceState, getSourceItem, getVisibleSourceItem, setSourceByVirtualIndex } from '../../store/dataSource/data.store';\nimport { CELL_CLASS, DISABLED_CLASS } from '../../utils/consts';\nimport { Edition, Observable, RevoGrid, Selection } from '../../interfaces';\nimport { getRange } from '../../store/selection/selection.helpers';\n\nimport { isGroupingColumn } from '../../plugins/groupingRow/grouping.service';\nimport { slice } from 'lodash';\n\nexport type ColumnSource<T = RevoGrid.ColumnRegular> = Observable<DataSourceState<T, RevoGrid.DimensionCols>>;\nexport type RowSource = Observable<DataSourceState<RevoGrid.DataType, RevoGrid.DimensionRows>>;\n\nexport type ColumnStores = {\n  [T in RevoGrid.DimensionCols]: ColumnSource;\n};\nexport type RowStores = {\n  [T in RevoGrid.DimensionRows]: RowSource;\n};\n\nexport default class ColumnService {\n  private unsubscribe: { (): void }[] = [];\n  get columns(): RevoGrid.ColumnRegular[] {\n    return getVisibleSourceItem(this.source);\n  }\n\n  hasGrouping = false;\n  type: RevoGrid.DimensionCols;\n\n  constructor(private dataStore: RowSource, private source: ColumnSource) {\n    this.unsubscribe.push(source.onChange('source', s => this.checkGrouping(s)));\n    this.checkGrouping(source.get('source'));\n    this.type = source.get('type');\n  }\n\n  private checkGrouping(cols: RevoGrid.ColumnRegular[]) {\n    for (let rgCol of cols) {\n      if (isGroupingColumn(rgCol)) {\n        this.hasGrouping = true;\n        return;\n      }\n      this.hasGrouping = false;\n    }\n  }\n\n  isReadOnly(r: number, c: number): boolean {\n    const readOnly: RevoGrid.ReadOnlyFormat = this.columns[c]?.readonly;\n    if (typeof readOnly === 'function') {\n      const data = this.rowDataModel(r, c);\n      return readOnly(data);\n    }\n    return readOnly;\n  }\n\n  static doMerge(existing: RevoGrid.CellProps, extra: RevoGrid.CellProps) {\n    let props: RevoGrid.CellProps = { ...extra, ...existing };\n    // extend existing props\n    if (extra.class) {\n      if (typeof extra.class === 'object' && typeof props.class === 'object') {\n        props.class = { ...extra.class, ...props.class };\n      } else if (typeof extra.class === 'string' && typeof props.class === 'object') {\n        props.class[extra.class] = true;\n      } else if (typeof props.class === 'string') {\n        props.class += ' ' + extra.class;\n      }\n    }\n    if (extra.style) {\n      props.style = { ...extra.style, ...props.style };\n    }\n    return props;\n  }\n\n  mergeProperties(r: number, c: number, defaultProps: RevoGrid.CellProps): RevoGrid.CellProps {\n    const cellClass: { [key: string]: boolean } = {\n      [CELL_CLASS]: true,\n      [DISABLED_CLASS]: this.isReadOnly(r, c),\n    };\n    let props: RevoGrid.CellProps = {\n      ...defaultProps,\n      class: cellClass,\n    };\n    const extraPropsFunc = this.columns[c]?.cellProperties;\n    if (extraPropsFunc) {\n      const data = this.rowDataModel(r, c);\n      const extra = extraPropsFunc(data);\n      if (!extra) {\n        return props;\n      }\n      return ColumnService.doMerge(props, extra);\n    }\n    return props;\n  }\n\n  getRowClass(r: number, prop: string): string {\n    const model = getSourceItem(this.dataStore, r) || {};\n    return model[prop] || '';\n  }\n\n  getCellData(r: number, c: number): string {\n    const data = this.rowDataModel(r, c);\n    return ColumnService.getData(data.model[data.prop as number]);\n  }\n\n  getSaveData(rowIndex: number, colIndex: number, val?: string): Edition.BeforeSaveDataDetails {\n    if (typeof val === 'undefined') {\n      val = this.getCellData(rowIndex, colIndex);\n    }\n    const data = this.rowDataModel(rowIndex, colIndex);\n    return {\n      prop: data.prop,\n      rowIndex,\n      colIndex,\n      val,\n      model: data.model,\n      colType: this.type,\n      type: this.dataStore.get('type'),\n    };\n  }\n\n  getCellEditor(_r: number, c: number, editors: Edition.Editors): Edition.EditorCtr | undefined {\n    const editor = this.columns[c]?.editor;\n    if (!editor) {\n      return undefined;\n    }\n    // reference\n    if (typeof editor === 'string') {\n      return editors[editor];\n    }\n    return editor;\n  }\n\n  rowDataModel(rowIndex: number, colIndex: number): RevoGrid.ColumnDataSchemaModel {\n    const column = this.columns[colIndex];\n    const prop: RevoGrid.ColumnProp | undefined = column?.prop;\n    const model = getSourceItem(this.dataStore, rowIndex) || {};\n    const type = this.dataStore.get('type');\n    return {\n      prop,\n      model,\n      data: this.dataStore.get('source'),\n      column,\n      rowIndex,\n      colIndex,\n      colType: this.type,\n      type,\n    };\n  }\n\n  getRangeData(d: Selection.ChangedRange, columns: RevoGrid.ColumnRegular[]): {\n    changed: RevoGrid.DataLookup,\n    mapping: Selection.OldNewRangeMapping,\n  } {\n    const changed: RevoGrid.DataLookup = {};\n\n    // get original length sizes\n    const copyColLength = d.oldRange.x1 - d.oldRange.x + 1;\n    const copyRowLength = d.oldRange.y1 - d.oldRange.y + 1;\n    const mapping: Selection.OldNewRangeMapping = {};\n\n    // rows\n    for (let rowIndex = d.newRange.y, i = 0; rowIndex < d.newRange.y1 + 1; rowIndex++, i++) {\n      // copy original data link\n      const oldRowIndex = d.oldRange.y + i % copyRowLength;\n      const copyRow = getSourceItem(this.dataStore, oldRowIndex) || {};\n\n      // columns\n      for (let colIndex = d.newRange.x, j = 0; colIndex < d.newRange.x1 + 1; colIndex++, j++) {\n        // check if old range area\n        if (rowIndex >= d.oldRange.y && rowIndex <= d.oldRange.y1 && colIndex >= d.oldRange.x && colIndex <= d.oldRange.x1) {\n          continue;\n        }\n\n        // requested column beyond range\n        if (!this.columns[colIndex]) {\n          continue;\n        }\n        const prop = this.columns[colIndex]?.prop;\n        const copyColIndex = d.oldRange.x + j % copyColLength;\n        const copyColumnProp = columns[copyColIndex].prop;\n\n        /** if can write */\n        if (!this.isReadOnly(rowIndex, colIndex)) {\n          /** to show before save */\n          if (!changed[rowIndex]) {\n            changed[rowIndex] = {};\n          }\n          changed[rowIndex][prop] = copyRow[copyColumnProp];\n          /** Generate mapping object */\n          if (!mapping[rowIndex]) {\n            mapping[rowIndex] = {};\n          }\n          mapping[rowIndex][prop] = {\n            colIndex: copyColIndex,\n            colProp: copyColumnProp,\n            rowIndex: oldRowIndex\n          };\n        }\n      }\n    }\n    return {\n      changed,\n      mapping,\n    };\n  }\n\n  getTransformedDataToApply(\n    start: Selection.Cell,\n    data: RevoGrid.DataFormat[][],\n  ): {\n    changed: RevoGrid.DataLookup;\n    range: Selection.RangeArea;\n  } {\n    const changed: RevoGrid.DataLookup = {};\n    const copyRowLength = data.length;\n    const colLength = this.columns.length;\n    const rowLength = this.dataStore.get('items').length;\n    // rows\n    let rowIndex = start.y;\n    let maxCol = 0;\n    for (let i = 0; rowIndex < rowLength && i < copyRowLength; rowIndex++, i++) {\n      // copy original data link\n      const copyRow = data[i % copyRowLength];\n      const copyColLength = copyRow?.length || 0;\n      // columns\n      let colIndex = start.x;\n      for (let j = 0; colIndex < colLength && j < copyColLength; colIndex++, j++) {\n        const p = this.columns[colIndex].prop;\n        const currentCol = j % colLength;\n\n        /** if can write */\n        if (!this.isReadOnly(rowIndex, colIndex)) {\n          /** to show before save */\n          if (!changed[rowIndex]) {\n            changed[rowIndex] = {};\n          }\n          changed[rowIndex][p] = copyRow[currentCol];\n        }\n      }\n      maxCol = Math.max(maxCol, colIndex - 1);\n    }\n    const range = getRange(start, {\n      y: rowIndex - 1,\n      x: maxCol,\n    });\n    return {\n      changed,\n      range,\n    };\n  }\n\n  applyRangeData(data: RevoGrid.DataLookup) {\n    const items: Record<number, RevoGrid.DataType> = {};\n    for (let rowIndex in data) {\n      const oldModel = (items[rowIndex] = getSourceItem(this.dataStore, parseInt(rowIndex, 10)));\n      if (!oldModel) {\n        continue;\n      }\n      for (let prop in data[rowIndex]) {\n        oldModel[prop] = data[rowIndex][prop];\n      }\n    }\n    setSourceByVirtualIndex(this.dataStore, items);\n  }\n\n  getRangeStaticData(d: Selection.RangeArea, value: RevoGrid.DataFormat): RevoGrid.DataLookup {\n    const changed: RevoGrid.DataLookup = {};\n\n    // rows\n    for (let rowIndex = d.y, i = 0; rowIndex < d.y1 + 1; rowIndex++, i++) {\n      // columns\n      for (let colIndex = d.x, j = 0; colIndex < d.x1 + 1; colIndex++, j++) {\n        // requested column beyond range\n        if (!this.columns[colIndex]) {\n          continue;\n        }\n        const p = this.columns[colIndex].prop;\n\n        /** if can write */\n        if (!this.isReadOnly(rowIndex, colIndex)) {\n          /** to show before save */\n          if (!changed[rowIndex]) {\n            changed[rowIndex] = {};\n          }\n          changed[rowIndex][p] = value;\n        }\n      }\n    }\n    return changed;\n  }\n\n  getRangeTransformedToProps(\n    d: Selection.RangeArea,\n    store: Observable<DataSourceState<RevoGrid.DataType, RevoGrid.DimensionRows>>,\n  ) {\n    const area: {\n      prop: RevoGrid.ColumnProp,\n      rowIndex: number,\n      colIndex: number,\n      model: RevoGrid.DataSource,\n      colType: RevoGrid.DimensionCols,\n      type: RevoGrid.DimensionRows,\n    }[] = [];\n\n    const type = this.dataStore.get('type');\n    // rows\n    for (let rowIndex = d.y, i = 0; rowIndex < d.y1 + 1; rowIndex++, i++) {\n      // columns\n      for (let colIndex = d.x, j = 0; colIndex < d.x1 + 1; colIndex++, j++) {\n        const prop = this.columns[colIndex]?.prop;\n        area.push({\n          prop,\n          rowIndex,\n          colIndex,\n          model: getSourceItem(store, rowIndex),\n          type,\n          colType: this.type,\n        });\n      }\n    }\n    return area;\n  }\n\n  copyRangeArray(\n    range: Selection.RangeArea,\n    store: Observable<DataSourceState<RevoGrid.DataType, RevoGrid.DimensionRows>>,\n  ) {\n    const cols = [...this.columns];\n    const props = slice(cols, range.x, range.x1 + 1).map(v => v.prop);\n    const toCopy: RevoGrid.DataFormat[][] = [];\n    const mapping: { [rowIndex: number]: { [colProp: RevoGrid.ColumnProp]: any } } = {};\n\n    // rows indexes\n    for (let i = range.y; i <= range.y1; i++) {\n      const rgRow: RevoGrid.DataFormat[] = [];\n      mapping[i] = {};\n\n      // columns indexes\n      for (let prop of props) {\n        const item = getSourceItem(store, i);\n\n        // if no item - skip\n        if (!item) {\n          continue;\n        }\n        const val = item[prop];\n        rgRow.push(val);\n        mapping[i][prop] = val;\n      }\n\n      toCopy.push(rgRow);\n    }\n    return {\n      data: toCopy,\n      mapping\n    };\n  }\n\n  static getData(val?: any) {\n    if (typeof val === 'undefined' || val === null) {\n      return '';\n    }\n    return val;\n  }\n\n  destroy() {\n    this.unsubscribe.forEach(f => f());\n  }\n}\n"],"version":3}