{"version":3,"names":["Clipboard","onPaste","e","this","readonly","clipboardData","getData","isHTML","types","indexOf","data","dataText","beforePaste","emit","raw","event","defaultPrevented","parsedData","detail","table","htmlParse","textParse","beforePasteApply","parsed","pasteRegion","afterPasteApply","preventDefault","copyStarted","beforeCopy","copyRegion","cutStarted","beforeCut","clearRegion","doCopy","beforeCopyApply","parserCopy","setData","map","rgRow","join","result","rows","split","y","push","fragment","document","createRange","createContextualFragment","querySelector","Array","from","cells","cell","innerText","window"],"sources":["src/components/clipboard/revogr-clipboard.tsx"],"sourcesContent":["import { Component, Listen, Method, Event, EventEmitter, Prop } from '@stencil/core';\nimport { RevoGrid } from '../../interfaces';\n\n@Component({ tag: 'revogr-clipboard' })\nexport class Clipboard {\n  /**\n   * If readonly mode enables no need for Paste event\n   */\n  @Prop() readonly: boolean;\n\n  /**\n   * Fired when region pasted\n   * @event pasteregion\n   * @property {string[][]} data - data to paste\n   * @property {boolean} defaultPrevented - if true, paste will be canceled\n   */\n  @Event({ bubbles: false }) pasteRegion: EventEmitter<string[][]>;\n\n  /**\n   * Fired before paste applied to the grid\n   * @event beforepaste\n   * @property {string} raw - raw data from clipboard\n   * @property {ClipboardEvent} event - original event\n   * @property {boolean} defaultPrevented - if true, paste will be canceled\n   */\n  @Event({ eventName: 'beforepaste' }) beforePaste: EventEmitter;\n\n  /**\n   * Fired before paste applied to the grid and after data parsed\n   * @event beforepasteapply\n   * @property {string} raw - raw data from clipboard\n   * @property {string[][]} parsed - parsed data\n   */\n  @Event({ eventName: 'beforepasteapply' }) beforePasteApply: EventEmitter;\n\n  /**\n   * Fired after paste applied to the grid\n   * @event afterpasteapply\n   * @property {string} raw - raw data from clipboard\n   * @property {string[][]} parsed - parsed data\n   * @property {ClipboardEvent} event - original event\n   * @property {boolean} defaultPrevented - if true, paste will be canceled\n   */\n  @Event({ eventName: 'afterpasteapply' }) afterPasteApply: EventEmitter;\n\n  /**\n   * Fired before cut triggered\n   * @event beforecopy\n   * @property {ClipboardEvent} event - original event\n   * @property {boolean} defaultPrevented - if true, cut will be canceled\n   */\n  @Event({ eventName: 'beforecut' }) beforeCut: EventEmitter;\n\n  /**\n   * Clears region when cut is done\n   */\n  @Event() clearRegion: EventEmitter<DataTransfer>;\n\n  /**\n   * Fired before copy triggered\n   * @event beforecopy\n   * @property {ClipboardEvent} event - original event\n   * @property {boolean} defaultPrevented - if true, copy will be canceled\n   */\n  @Event({ eventName: 'beforecopy' }) beforeCopy: EventEmitter;\n\n  /**\n   * Fired before copy applied to the clipboard\n   * @event beforecopyapply\n   * @property {DataTransfer} event - original event\n   * @property {string} data - data to copy\n   * @property {boolean} defaultPrevented - if true, copy will be canceled\n   */\n  @Event({ eventName: 'beforecopyapply' }) beforeCopyApply: EventEmitter;\n\n  /**\n   * Fired when region copied\n   * @event copyregion\n   * @property {DataTransfer} data - data to copy\n   * @property {boolean} defaultPrevented - if true, copy will be canceled\n   */\n  @Event({ bubbles: false }) copyRegion: EventEmitter<DataTransfer>;\n\n  @Listen('paste', { target: 'document' }) onPaste(e: ClipboardEvent) {\n    // if readonly do nothing\n    if (this.readonly) {\n      return;\n    }\n    const clipboardData = this.getData(e);\n    const isHTML = clipboardData.types.indexOf('text/html') > -1;\n    const data = isHTML ? clipboardData.getData('text/html') : clipboardData.getData('text');\n    const dataText = clipboardData.getData('text');\n\n    const beforePaste = this.beforePaste.emit({\n      raw: data,\n      dataText,\n      isHTML,\n      event: e,\n    });\n\n    if (beforePaste.defaultPrevented) {\n      return;\n    }\n\n    let parsedData: string[][];\n    // if html, then search for table if no table fallback to regular text parsing\n    if (beforePaste.detail.isHTML) {\n      const table = this.htmlParse(beforePaste.detail.raw);\n      parsedData = table || this.textParse(dataText);\n    } else {\n      parsedData = this.textParse(beforePaste.detail.raw);\n    }\n    const beforePasteApply = this.beforePasteApply.emit({\n      raw: data,\n      parsed: parsedData,\n      event: e,\n    });\n    if (beforePasteApply.defaultPrevented) {\n      return;\n    }\n    this.pasteRegion.emit(beforePasteApply.detail.parsed);\n    // post paste action\n    const afterPasteApply = this.afterPasteApply.emit({\n      raw: data,\n      parsed: parsedData,\n      event: e,\n    });\n    // keep default behavior if needed\n    if (afterPasteApply.defaultPrevented) {\n      return;\n    }\n    e.preventDefault();\n  }\n\n  /**\n   * Listen to copy event and emit copy region event\n   */\n  @Listen('copy', { target: 'document' }) copyStarted(e: ClipboardEvent) {\n    const beforeCopy = this.beforeCopy.emit({\n      event: e,\n    });\n    if (beforeCopy.defaultPrevented) {\n      return;\n    }\n    const data = this.getData(beforeCopy.detail.event);\n    this.copyRegion.emit(data);\n    e.preventDefault();\n  }\n\n  /**\n   * Listen to copy event and emit copy region event\n   */\n  @Listen('cut', { target: 'document' }) cutStarted(e: ClipboardEvent) {\n    const beforeCut = this.beforeCut.emit({\n      event: e,\n    });\n    if (beforeCut.defaultPrevented) {\n      return;\n    }\n    const data = this.getData(beforeCut.detail.event);\n    this.copyStarted(e);\n\n    // if readonly do nothing\n    if (this.readonly) {\n      return;\n    }\n\n    this.clearRegion.emit(data);\n    e.preventDefault();\n  }\n\n  @Method() async doCopy(e: DataTransfer, data?: RevoGrid.DataFormat[][]) {\n    const beforeCopyApply = this.beforeCopyApply.emit({\n      event: e,\n      data,\n    });\n    if (beforeCopyApply.defaultPrevented) {\n      return;\n    }\n    const parsed = data ? this.parserCopy(data) : '';\n    e.setData('text/plain', parsed);\n  }\n\n  parserCopy(data: RevoGrid.DataFormat[][]) {\n    return data.map(rgRow => rgRow.join('\\t')).join('\\n');\n  }\n\n  private textParse(data: string) {\n    const result: string[][] = [];\n    const rows = data.split(/\\r\\n|\\n|\\r/);\n    for (let y in rows) {\n      result.push(rows[y].split('\\t'));\n    }\n    return result;\n  }\n\n  private htmlParse(data: string) {\n    const result: string[][] = [];\n    const fragment = document.createRange().createContextualFragment(data);\n    const table = fragment.querySelector('table');\n    if (!table) {\n      return null;\n    }\n    for (const rgRow of Array.from(table.rows)) {\n      result.push(Array.from(rgRow.cells).map(cell => cell.innerText));\n    }\n    return result;\n  }\n\n  private getData(e: ClipboardEvent) {\n    return e.clipboardData || (window as unknown as { clipboardData: DataTransfer | null })?.clipboardData;\n  }\n}\n"],"mappings":";;;qDAIaA,EAAS,M,obA+EqB,OAAAC,CAAQC,GAE/C,GAAIC,KAAKC,SAAU,CACjB,M,CAEF,MAAMC,EAAgBF,KAAKG,QAAQJ,GACnC,MAAMK,EAASF,EAAcG,MAAMC,QAAQ,cAAgB,EAC3D,MAAMC,EAAOH,EAASF,EAAcC,QAAQ,aAAeD,EAAcC,QAAQ,QACjF,MAAMK,EAAWN,EAAcC,QAAQ,QAEvC,MAAMM,EAAcT,KAAKS,YAAYC,KAAK,CACxCC,IAAKJ,EACLC,WACAJ,SACAQ,MAAOb,IAGT,GAAIU,EAAYI,iBAAkB,CAChC,M,CAGF,IAAIC,EAEJ,GAAIL,EAAYM,OAAOX,OAAQ,CAC7B,MAAMY,EAAQhB,KAAKiB,UAAUR,EAAYM,OAAOJ,KAChDG,EAAaE,GAAShB,KAAKkB,UAAUV,E,KAChC,CACLM,EAAad,KAAKkB,UAAUT,EAAYM,OAAOJ,I,CAEjD,MAAMQ,EAAmBnB,KAAKmB,iBAAiBT,KAAK,CAClDC,IAAKJ,EACLa,OAAQN,EACRF,MAAOb,IAET,GAAIoB,EAAiBN,iBAAkB,CACrC,M,CAEFb,KAAKqB,YAAYX,KAAKS,EAAiBJ,OAAOK,QAE9C,MAAME,EAAkBtB,KAAKsB,gBAAgBZ,KAAK,CAChDC,IAAKJ,EACLa,OAAQN,EACRF,MAAOb,IAGT,GAAIuB,EAAgBT,iBAAkB,CACpC,M,CAEFd,EAAEwB,gB,CAMoC,WAAAC,CAAYzB,GAClD,MAAM0B,EAAazB,KAAKyB,WAAWf,KAAK,CACtCE,MAAOb,IAET,GAAI0B,EAAWZ,iBAAkB,CAC/B,M,CAEF,MAAMN,EAAOP,KAAKG,QAAQsB,EAAWV,OAAOH,OAC5CZ,KAAK0B,WAAWhB,KAAKH,GACrBR,EAAEwB,gB,CAMmC,UAAAI,CAAW5B,GAChD,MAAM6B,EAAY5B,KAAK4B,UAAUlB,KAAK,CACpCE,MAAOb,IAET,GAAI6B,EAAUf,iBAAkB,CAC9B,M,CAEF,MAAMN,EAAOP,KAAKG,QAAQyB,EAAUb,OAAOH,OAC3CZ,KAAKwB,YAAYzB,GAGjB,GAAIC,KAAKC,SAAU,CACjB,M,CAGFD,KAAK6B,YAAYnB,KAAKH,GACtBR,EAAEwB,gB,CAGM,YAAMO,CAAO/B,EAAiBQ,GACtC,MAAMwB,EAAkB/B,KAAK+B,gBAAgBrB,KAAK,CAChDE,MAAOb,EACPQ,SAEF,GAAIwB,EAAgBlB,iBAAkB,CACpC,M,CAEF,MAAMO,EAASb,EAAOP,KAAKgC,WAAWzB,GAAQ,GAC9CR,EAAEkC,QAAQ,aAAcb,E,CAG1B,UAAAY,CAAWzB,GACT,OAAOA,EAAK2B,KAAIC,GAASA,EAAMC,KAAK,QAAOA,KAAK,K,CAG1C,SAAAlB,CAAUX,GAChB,MAAM8B,EAAqB,GAC3B,MAAMC,EAAO/B,EAAKgC,MAAM,cACxB,IAAK,IAAIC,KAAKF,EAAM,CAClBD,EAAOI,KAAKH,EAAKE,GAAGD,MAAM,M,CAE5B,OAAOF,C,CAGD,SAAApB,CAAUV,GAChB,MAAM8B,EAAqB,GAC3B,MAAMK,EAAWC,SAASC,cAAcC,yBAAyBtC,GACjE,MAAMS,EAAQ0B,EAASI,cAAc,SACrC,IAAK9B,EAAO,CACV,OAAO,I,CAET,IAAK,MAAMmB,KAASY,MAAMC,KAAKhC,EAAMsB,MAAO,CAC1CD,EAAOI,KAAKM,MAAMC,KAAKb,EAAMc,OAAOf,KAAIgB,GAAQA,EAAKC,Y,CAEvD,OAAOd,C,CAGD,OAAAlC,CAAQJ,GACd,OAAOA,EAAEG,gBAAkBkD,SAA4D,MAA5DA,cAAM,SAANA,OAA8DlD,c"}