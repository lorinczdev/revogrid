{"version":3,"names":["ThemeCompact","constructor","this","defaultRowSize","ThemeDefault","ThemeMaterial","DEFAULT_THEME","allowedThemes","ThemeService","theme","currentTheme","rowSize","customRowSize","size","cfg","register","parsedTheme","getTheme","indexOf","createFind","findIndexFunc","collection","predicate","fromIndex","iterable","Object","isArrayLike","iteratee","baseIteratee","keys","key","index","undefined","_createFind","find","findIndex","find_1","rowTypes","columnTypes","isRowType","type","baseMap","result","Array","length","baseEach","value","_baseMap","map","func","isArray","arrayMap","map_1","BasePlugin","revogrid","subscriptions","addEventListener","eventName","callback","watch","prop","immediate","nativeValueDesc","getOwnPropertyDescriptor","prototype","defineProperty","set","val","keepDefault","_a","call","get","removeEventListener","emit","detail","event","CustomEvent","cancelable","dispatchEvent","clearSubscriptions","destroy","GroupingColumnPlugin","gatherGroup","res","colData","level","group","assign","ids","k","columns","resultItem","collectionItem","push","columnGrouping","maxLevel","Math","max","sort","isColGrouping","children","ColumnDataProvider","order","reduce","sorting","r","c","stores","dataSources","sources","DataStore","column","pin","getColumn","virtualIndex","getSourceItem","store","getRawColumns","item","rgCol","colPinStart","colPinEnd","getColumns","t","getColumnIndexByProp","getSourceItemVirtualIndexByProp","getColumnByProp","items","refreshByType","refresh","setColumns","data","forEach","updateData","depth","groups","g","updateColumns","cols","columnByKey","getColumnType","colByIndex","each","colsToUpdate","colToUpdateIfExists","setSourceByVirtualIndex","updateColumn","updateColumnSorting","additive","clearSorting","types","_","setData","source","getSizes","i","columnByProp","regularColumn","columnType","beforeSetup","DataProvider","dimensionProvider","grouping","silent","getModel","setCellData","rowIndex","model","refreshItems","setGrouping","groupingDepth","setTrimmed","trimmed","addTrimmed","getVisibleSourceItem","trimmedPlugin","trimmedSize","sizes","newSize","v","setDimensionSize","trim","realSizePlugin","realSize","count","setStore","initialBase","indexes","positionIndexToItem","indexToItem","positionIndexes","initialState","originItemSize","DimensionStore","createStore","use","getCurrentState","state","dispose","drop","dimensionData","calculateDimensionData","DimensionProvider","viewports","config","sizeChanged","debounce","realSizeChanged","RESIZE_INTERVAL","onChange","clearSize","setOriginalSizes","setItemCount","setCustomSizes","keepOld","newSizes","oldSizes","setViewPortDimensionSizes","realCount","setViewport","allTrimmed","gatherTrimmedItems","dimStoreType","itemCount","noVirtual","setNoVirtual","updateViewport","dimension","virtualSize","dropColumns","clearItems","getFullSize","x","y","_b","setNewColumns","newLength","setViewPortCoordinate","coordinate","lastCoordinate","getViewPortPos","e","getItemByIndex","start","setSettings","dimensionType","s","ViewportProvider","ViewportStore","LETTER_BLOCK_SIZE","ColumnAutoSizeMode","AutoSizeColumn","providers","super","autoSizeColumns","dataResolve","dataReject","letterBlockSize","preciseSize","precsizeCalculationArea","initiatePresizeElement","appendChild","aftersourceset","setSource","afteredit","afterEditAll","beforecolumnsset","columnSet","headerDblClick","getColumnSize","mode","autoSizeOnTextOverlap","autoSizeAll","autoSize","clearPromise","request","Promise","resolve","reject","_v","prev","rgRow","getLength","name","len","padding","str","toString","innerText","scrollWidth","isRangeEdit","props","p","dataProvider","perStore","_row","allColumns","parseInt","styleForFontTest","position","fontSize","height","width","whiteSpace","top","overflowX","el","document","createElement","style","classList","add","remove","eq","extra","JSON","stringify","filterVal","toLocaleLowerCase","notEq","gtThan","conditionValue","parseFloat","gtThanEq","gt","lt","lsEq","notSet","beginsWith","contains","toLowerCase","notContains","filterNames","none","empty","notEmpty","begins","eqN","neqN","gte","lte","filterEntities","filterTypes","string","number","FILTER_TRIMMED_TYPE","FILTER_CONFIG_CHANGED_EVENT","FilterPlugin","uiid","filterCollection","multiFilterItems","possibleFilters","possibleFilterNames","possibleFilterEntities","filterProp","FILTER_PROP","initConfig","headerclick","async","filterCollectionProps","id","relation","runFiltering","clearFiltering","onFilterChange","registerVNode","h","uuid","filterItems","filterCaptions","localization","captions","disableDynamicFiltering","ref","pop","customFilters","cType","cFilter","columnFilterType","include","filters","newTypes","filter","f","console","warn","entries","originalEvent","target","isFilterBtn","preventDefault","changes","getChanges","show","gridPos","getBoundingClientRect","buttonPos","getColumnFilter","filterType","isValidType","multiType","doFiltering","columnsToUpdate","hasFilter","itemsToFilter","getRowFilter","defaultPrevented","isAddedEvent","filterProps","firstFilterItem","getData","getSource","rows","propKeys","propFilterSatisfiedCount","lastFilterResults","propFilters","filterIndex","filterData","nextFilterData","stringTag","isString","isObjectLike","baseGetTag","isString_1","asciiSize","baseProperty","_asciiSize","rsAstralRange","rsComboMarksRange","reComboHalfMarksRange","rsComboSymbolsRange","rsComboRange","rsVarRange","rsZWJ","reHasUnicode","RegExp","hasUnicode","test","_hasUnicode","rsAstral","rsCombo","rsFitz","rsModifier","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsOptVar","rsOptJoin","join","rsSeq","rsSymbol","reUnicode","unicodeSize","lastIndex","_unicodeSize","stringSize","_stringSize","mapTag","setTag","tag","getTag","baseKeys","size_1","SortingPlugin","sortingFunc","doSort","comparison","beforeEvent","aftercolumnsset","sortable","shiftKey","getComparer","cellCmp","cellCompare","bind","defaultCellCompare","descCellCompare","getNextOrder","newCol","beforeApplyEvent","cmp","a","b","av","bv","sortIndexByItems","itemA","itemB","sorted","currentOrder","baseClamp","lower","upper","_baseClamp","MAX_ARRAY_LENGTH","toLength","toInteger","toLength_1","baseFill","array","end","_baseFill","fill","isIterateeCall","fill_1","INITIAL","mime","fileKind","bom","columnDelimiter","rowDelimiter","encoding","CARRIAGE_RETURN","String","fromCharCode","LINE_FEED","DOUBLE_QT","NO_BREAK_SPACE","escapeRegex","ExportCsv","options","doExport","headers","header","prepareHeader","isGrouping","parseCell","getGroupingName","columnHeaders","newColumnHeaders","force","escape","toEscape","some","replace","ExportTypes","ExportFilePlugin","exportString","csv","beforeexport","formatter","exportBlob","getBlob","exportFile","blob","URL","window","webkitURL","filename","url","createObjectURL","display","setAttribute","MouseEvent","removeChild","timeout","revokeObjectURL","Blob","colSource","colPromises","getColPerSource","then","all","getColumnStore","virtualIndexes","colNames","colProps","visibleItems","getGroupHeaders","template","d","levelGroups","minIndex","findGroupStartIndex","min","current","promisesData","dataPart","promise","getVisibleSource","Error","doCollapse","pIndex","collapseValue","PSEUDO_GROUP_ITEM_VALUE","total","currentModel","currentValue","startsWith","GROUP_EXPANDED","doExpand","vIndex","rowItemsIndexes","physicalIndex","currentGroup","getParsedGroup","PSEUDO_GROUP_ITEM_ID","groupItems","groupLevelOnly","isGroup","isSameGroup","GROUP_DEPTH","splice","TRIMMED_GROUPING","processDoubleConversionTrimmed","initiallyTrimed","firstLevelMap","secondLevelMap","trimemedOptionsToUpgrade","newItems","initialIndex","newConversionIndex","GroupingRowPlugin","hasProps","_c","GROUPING_ROW_TYPE","rowItems","onFocus","onExpand","newTrimmed","getPhysical","prevExpanded","setItems","clearFocus","withoutGrouping","oldNewIndexes","setColumnGrouping","PSEUDO_GROUP_COLUMN","onDrag","from","to","isDown","beforeTrimmedApply","subscribe","onDataSet","trimmedType","doSourceUpdate","GROUP_EXPAND_EVENT","sourceWithGroups","oldNewIndexMap","childrenByGroup","gatherGrouping","customRenderer","groupLabelTemplate","updateTrimmed","expanded","clearGrouping","columnProvider","deleted","isGroupingColumn","trimmedGroup","_childrenByGroup","OrdererService","parentY","parent","pos","text","move","moveTip","moveElement","draggable","left","transform","OrderRenderer","service","class","RevoViewPort","dimensions","orderRef","nakedClick","registerElement","onScroll","viewPortClick","typeRow","typeCol","onClick","viewportStore","dimensionStore","onScrollVirtual","ViewportService","sv","contentHeight","selectionStoreConnector","beforeUpdate","getViewportColumnData","scrollingService","unregister","onColumnResize","changedItems","resize","colStore","colType","fixWidth","viewportProvider","rowStores","onHeaderresize","onResizeViewport","gatherColumnData","columnSelectionStore","registerCol","dataPorts","dataViewPort","segmentSelection","registerSegment","setLastCell","lastCell","rowSelectionStore","registerRow","rowDef","segmentSelectionStore","registerSection","onSetRange","setRangeArea","onSetTempRange","setTempArea","onFocusCell","focus","registerColumn","contentWidth","UUID","minWidth","headerProp","dimensionCol","resizeHandler","viewportCol","slots","rowPinStart","HEADER_SLOT","CONTENT_SLOT","rowPinEnd","FOOTER_SLOT","isPresent","EMPTY_INDEX","dataPartition","slot","fixed","viewportRow","getLastCell","canDrag","dataStore","dimensionRow","scrollToCell","cell","scrollService","clearFocused","clearAll","clearEdit","setEdit","getFocused","focused","focusedStore","storesXToType","rowType","storesYToType","getStoreCoordinateByType","storesByType","storeCoordinate","setFocus","focusByCell","getSelectedRange","selectedRange","colIndex","setEditByCell","isMobileDevice","navigator","userAgent","maxTouchPoints","ViewPortSections","editors","rowClass","readonly","range","useClipboard","columnFilter","applyEditorChangesOnClose","additionalData","onCancelEdit","onEdit","scrollSection","focusTemplate","onSelectAll","scrollSectionSilent","isMobile","viewPortHtml","view","headerProperties","selectionStore","canResize","dataViews","j","dataView","onSelectall","applyChangesOnClose","onSetEdit","DATA_SLOT","onScrollViewport","onSilentScroll","GridScrollingService","elements","newEvent","elKey","isPinnedColumn","delta","changeScroll","setScroll","scrollSilentService","includes","registerElements","els","StretchColumn","stretchedColumn","scrollSize","getScrollbarWidth","beforecolumnapplied","applyStretch","hasScroll","initialSize","apply","dropChanges","activateChanges","sizeDifference","clientWidth","rowHeaders","itemsLength","rowHeaderSize","calculateRowHeaderSize","last","colSize","isStretchPlugin","plugin","rowDefinitionByType","newVal","rowDefinitionRemoveByType","oldVal","COLUMN_DRAG_CLASS","ColumnOrderHandler","offset","renderAutoscroll","autoscrollEl","autoscroll","dataContainerSize","direction","helperOffset","maxScroll","scrollIntoView","block","inline","dataEl","gridRect","scrollEl","gridEl","dir","scrollContainerRect","stop","element","hidden","showHandler","render","COLUMN_CLICK","MOVE","DRAG_END","BEFORE_DRAG_END","DRAG_START","ColumnPlugin","moveFunc","doMove","staticDragData","dragData","localSubscriptions","orderUi","onMouseOut","onMouseUp","dragStart","dispatch","clearOrder","mouseleave","mouseup","mousemove","closest","getDimension","elRect","startItem","getItemByPosition","getLeftRelative","startPos","abs","scrollOffset","relativePos","newPosition","stopDrag","startPosition","newItem","itemIndex","toMove","clearLocalSubscriptions","absoluteX","revoGridStyleCss","RevoGridComponent","clickTrackForFocusClear","viewport","internalPlugins","scrollToRow","scrollToCoordinate","scrollToColumnIndex","scrollToColumnProp","beforetrimmed","aftertrimmed","setCellEdit","rowSource","colGroup","setCellsFocus","cellStart","cellEnd","extraElements","getSourceStore","beforefocuslost","getPlugins","getContentSize","mousedownHandle","screenX","getFromEvent","screenY","mouseupHandle","onRowDragStarted","rowdragstart","orderService","onRowDragEnd","onRowDrag","onRowMouseMove","onBeforeEdit","beforeedit","onBeforeRangeEdit","beforerangeedit","onRangeChanged","beforeange","beforeFill","beforeautofill","onRowDropped","roworderchanged","onHeaderClick","onCellFocus","beforecellfocus","canFocus","columnTypesChanged","columnChanged","columnGather","columnDimensions","rowSizeChanged","rowDimensions","themeChanged","themeService","dataSourceChanged","watchName","beforesourceset","beforeAnySource","newSource","afterAnySource","rowDefChanged","after","before","vals","oldVals","beforerowdefinition","newRows","trimmedRowsChanged","groupingChanged","grPlugin","isStretch","stretch","applyFilter","filterconfigchanged","rowHeadersChange","rowheaderschanged","connectedCallback","dimensionProviderConfig","contentsizechanged","SelectionStoreConnector","Date","getTime","pluginData","selection","autoSizeColumn","AutoSize","exporting","canMoveColumns","plugins","pinnedTopSource","pinnedBottomSource","trimmedRows","rowDefinitions","viewportscroll","disconnectedCallback","aftercolumnresize","views","anyView","rowHeaderColumn","onElementToScroll","applyOnClose","selectAll","beforeeditstart","details","Host"],"sources":["src/themeManager/theme.compact.ts","src/themeManager/theme.default.ts","src/themeManager/theme.material.ts","src/themeManager/themeService.ts","node_modules/lodash/_createFind.js","node_modules/lodash/find.js","src/store/storeTypes.ts","node_modules/lodash/_baseMap.js","node_modules/lodash/map.js","src/plugins/basePlugin.ts","src/plugins/groupingColumn/grouping.col.plugin.ts","src/services/column.data.provider.ts","src/services/data.provider.ts","src/store/dimension/dimension.store.ts","src/services/dimension.provider.ts","src/services/viewport.provider.ts","src/plugins/autoSizeColumn.ts","src/plugins/filter/conditions/equal.ts","src/plugins/filter/conditions/number/greaterThan.ts","src/plugins/filter/conditions/number/greaterThanOrEqual.ts","src/plugins/filter/conditions/number/lessThan.ts","src/plugins/filter/conditions/number/lessThanOrEqual.ts","src/plugins/filter/conditions/set.ts","src/plugins/filter/conditions/string/beginswith.ts","src/plugins/filter/conditions/string/contains.ts","src/plugins/filter/filter.service.ts","src/plugins/filter/filter.plugin.tsx","node_modules/lodash/isString.js","node_modules/lodash/_asciiSize.js","node_modules/lodash/_hasUnicode.js","node_modules/lodash/_unicodeSize.js","node_modules/lodash/_stringSize.js","node_modules/lodash/size.js","src/plugins/sorting/sorting.plugin.ts","node_modules/lodash/_baseClamp.js","node_modules/lodash/toLength.js","node_modules/lodash/_baseFill.js","node_modules/lodash/fill.js","src/plugins/export/csv.ts","src/plugins/export/export.plugin.ts","src/plugins/groupingRow/grouping.row.expand.service.ts","src/plugins/groupingRow/grouping.trimmed.service.ts","src/plugins/groupingRow/grouping.row.plugin.ts","src/components/order/orderRenderer.tsx","src/components/revoGrid/viewport.tsx","src/components/revoGrid/viewport.service.ts","src/utils/mobile.ts","src/components/revoGrid/viewport.section.tsx","src/components/revoGrid/viewport.scrolling.service.ts","src/plugins/stretchPlugin.ts","src/components/revoGrid/grid.helpers.ts","src/plugins/moveColumn/columnOrderHandler.tsx","src/plugins/moveColumn/columnDragPlugin.ts","src/components/revoGrid/revo-grid-style.scss?tag=revo-grid","src/components/revoGrid/revo-grid.tsx"],"sourcesContent":["import { ThemeSpace } from '../interfaces';\n\nexport default class ThemeCompact implements ThemeSpace.ThemePackage {\n  defaultRowSize: number = 32;\n}\n","import { ThemeSpace } from '../interfaces';\n\nexport default class ThemeDefault implements ThemeSpace.ThemePackage {\n  defaultRowSize: number = 27;\n}\n","import { ThemeSpace } from '../interfaces';\n\nexport default class ThemeMaterial implements ThemeSpace.ThemePackage {\n  defaultRowSize: number = 42;\n}\n","import { ThemeSpace } from '../interfaces';\nimport ThemeCompact from './theme.compact';\nimport ThemeDefault from './theme.default';\nimport ThemeMaterial from './theme.material';\n\nexport const DEFAULT_THEME = 'default';\nexport const allowedThemes: ThemeSpace.Theme[] = [DEFAULT_THEME, 'material', 'compact', 'darkMaterial', 'darkCompact'];\nexport default class ThemeService {\n  private currentTheme: ThemeSpace.ThemePackage;\n  private customRowSize: number = 0;\n\n  get theme() {\n    return this.currentTheme;\n  }\n\n  get rowSize(): number {\n    return this.customRowSize || this.currentTheme.defaultRowSize;\n  }\n\n  set rowSize(size: number) {\n    this.customRowSize = size;\n  }\n\n  constructor(cfg: ThemeSpace.ThemeConfig) {\n    this.customRowSize = cfg.rowSize;\n    this.register('default');\n  }\n\n  register(theme: ThemeSpace.Theme) {\n    const parsedTheme = ThemeService.getTheme(theme);\n    switch (parsedTheme) {\n      case 'material':\n      case 'darkMaterial':\n        this.currentTheme = new ThemeMaterial();\n        break;\n      case 'compact':\n      case 'darkCompact':\n        this.currentTheme = new ThemeCompact();\n        break;\n      default:\n        this.currentTheme = new ThemeDefault();\n        break;\n    }\n  }\n\n  static getTheme(theme: string): ThemeSpace.Theme {\n    if (allowedThemes.indexOf(theme as ThemeSpace.Theme) > -1) {\n      return theme as ThemeSpace.Theme;\n    }\n    return DEFAULT_THEME;\n  }\n}\n","var baseIteratee = require('./_baseIteratee'),\n    isArrayLike = require('./isArrayLike'),\n    keys = require('./keys');\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nmodule.exports = createFind;\n","var createFind = require('./_createFind'),\n    findIndex = require('./findIndex');\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nmodule.exports = find;\n","import { RevoGrid } from '../interfaces';\n\nexport const rowTypes: RevoGrid.DimensionRows[] = ['rowPinStart', 'rgRow', 'rowPinEnd'];\nexport const columnTypes: RevoGrid.DimensionCols[] = ['colPinStart', 'rgCol', 'colPinEnd'];\n\nexport function isRowType(type: RevoGrid.DimensionRows | any): type is RevoGrid.DimensionRows {\n  return rowTypes.indexOf(type) > -1;\n}\n","var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n","var arrayMap = require('./_arrayMap'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nmodule.exports = map;\n","import { RevoPlugin, RevoGrid } from '../interfaces';\n\ntype DispatchDetail = RevoGrid.ColumnRegular | RevoGrid.ColumnTemplateProp;\ntype Target = HTMLElement | null;\ntype Event = {\n  target: HTMLElement | null;\n  preventDefault(): void;\n};\n\ntype WatchConfig = { immediate: boolean };\n\nexport function dispatchElement(target: Target, eventName: string, detail: DispatchDetail): CustomEvent {\n  const event = new CustomEvent(eventName, {\n    detail,\n    cancelable: true,\n    bubbles: true,\n  });\n  target?.dispatchEvent(event);\n  return event;\n}\nexport function dispatch(e: Event, eventName: string, detail: DispatchDetail): CustomEvent {\n  e.preventDefault();\n  return dispatchElement(e.target as Target, eventName, detail);\n}\n\n/**\n * Base layer for plugins\n * Provide minimal starting core\n */\nexport default abstract class BasePlugin implements RevoPlugin.Plugin {\n  protected readonly subscriptions: Record<string, (e?: any) => void> = {};\n  constructor(protected revogrid: HTMLRevoGridElement) {}\n  /**\n   *\n   * @param eventName - event name to subscribe to in revo-grid\n   * @param callback - callback function for event\n   */\n  protected addEventListener(eventName: string, callback: (e: CustomEvent) => void) {\n    this.revogrid.addEventListener(eventName, callback);\n    this.subscriptions[eventName] = callback;\n  }\n\n  /**\n   * Subscribe to grid properties to watch changes\n   * You can return false in callback to prevent default value set\n   * \n   * @param prop - property name\n   * @param callback - callback function\n   * @param immediate - trigger callback immediately with current value\n   */\n  protected watch<T extends any>(\n    prop: string,\n    callback: (arg: T) => boolean | void,\n    { immediate }: Partial<WatchConfig> = { immediate: false }\n  ) {\n    const nativeValueDesc =\n      Object.getOwnPropertyDescriptor(this.revogrid, prop) ||\n      Object.getOwnPropertyDescriptor(this.revogrid.constructor.prototype, prop);\n  \n    // Overwrite property descriptor for this instance\n    Object.defineProperty(this.revogrid, prop, {\n      set(val: T){\n        const keepDefault = callback(val);\n        if (keepDefault === false) {\n          return;\n        }\n        // Continue with native behavior\n        return nativeValueDesc?.set?.call(this, val);\n      },\n      get(){\n        // Continue with native behavior\n        return nativeValueDesc?.get?.call(this);\n      },\n    });\n    if (immediate) {\n      callback(nativeValueDesc?.value);\n    }\n  }\n\n  /**\n   * Remove event subscription\n   * @param eventName\n   */\n  protected removeEventListener(eventName: string) {\n    this.revogrid.removeEventListener(eventName, this.subscriptions[eventName]);\n    delete this.subscriptions[eventName];\n  }\n\n  /**\n   * Trigger event to grid upper level\n   * Event can be cancelled\n   * @param eventName\n   * @param detail\n   * @returns event\n   */\n  protected emit(eventName: string, detail?: any) {\n    const event = new CustomEvent(eventName, { detail, cancelable: true });\n    this.revogrid.dispatchEvent(event);\n    return event;\n  }\n\n  /**\n   * Clearing inner subscription\n   */\n  protected clearSubscriptions() {\n    for (let type in this.subscriptions) {\n      this.removeEventListener(type);\n    }\n  }\n\n  /**\n   * Minimal destroy implementations\n   */\n  destroy() {\n    this.clearSubscriptions();\n  }\n}\n","import isArray from 'lodash/isArray';\nimport map from 'lodash/map';\nimport { RevoGrid } from '../../interfaces';\nimport { ColumnCollection } from '../../services/column.data.provider';\nimport { ColumnItems } from '../../services/dimension.provider';\nimport { Group as StoreGroup } from '../../store/dataSource/data.store';\nimport BasePlugin from '../basePlugin';\ninterface Group extends StoreGroup {\n  level: number;\n}\nexport type ColumnGrouping = Record<RevoGrid.DimensionCols, Group[]>;\n\nexport default class GroupingColumnPlugin extends BasePlugin {\n  static gatherGroup<T extends ColumnCollection>(res: T, colData: RevoGrid.ColumnGrouping, collection: T, level = 0): T {\n    // group template\n    const group: Group = {\n      ...colData,\n      level,\n      ids: [],\n    };\n\n    // check columns for update\n    for (let k in collection.columns) {\n      const key = k as keyof ColumnItems;\n      const resultItem = res.columns[key];\n      const collectionItem = collection.columns[key];\n\n      // if column data\n      if (isArray(resultItem) && isArray(collectionItem)) {\n        // fill columns\n        resultItem.push(...collectionItem);\n\n        // fill grouping\n        if (collectionItem.length) {\n          res.columnGrouping[key].push({\n            ...group,\n            ids: map(collectionItem, 'prop'),\n          });\n        }\n      }\n    }\n    // merge column groupings\n    for (let k in collection.columnGrouping) {\n      const key = k as RevoGrid.DimensionCols;\n      const collectionItem = collection.columnGrouping[key];\n      res.columnGrouping[key].push(...collectionItem);\n    }\n    res.maxLevel = Math.max(res.maxLevel, collection.maxLevel);\n    res.sort = { ...res.sort, ...collection.sort };\n    return res;\n  }\n}\nexport function isColGrouping(colData: RevoGrid.ColumnGrouping | RevoGrid.ColumnRegular): colData is RevoGrid.ColumnGrouping {\n  return !!(colData as RevoGrid.ColumnGrouping).children;\n}\n","import reduce from 'lodash/reduce';\nimport each from 'lodash/each';\nimport find from 'lodash/find';\n\nimport DataStore, {\n  getSourceItem,\n  getSourceItemVirtualIndexByProp,\n  Groups,\n  setSourceByVirtualIndex,\n} from '../store/dataSource/data.store';\nimport { columnTypes } from '../store/storeTypes';\nimport { RevoGrid } from '../interfaces';\nimport GroupingColumnPlugin, {\n  ColumnGrouping,\n  isColGrouping,\n} from '../plugins/groupingColumn/grouping.col.plugin';\n\nexport type ColumnCollection = {\n  columns: Record<RevoGrid.DimensionCols, RevoGrid.ColumnRegular[]>;\n  columnByProp: Record<RevoGrid.ColumnProp, RevoGrid.ColumnRegular[]>;\n  columnGrouping: ColumnGrouping;\n  maxLevel: number;\n  sort: Record<RevoGrid.ColumnProp, RevoGrid.ColumnRegular>;\n};\n\nexport type ColumnDataSources = Record<\n  RevoGrid.DimensionCols,\n  DataStore<RevoGrid.ColumnRegular, RevoGrid.DimensionCols>\n>;\ntype Sorting = Record<RevoGrid.ColumnProp, RevoGrid.ColumnRegular>;\ntype SortingOrder = Record<RevoGrid.ColumnProp, 'asc' | 'desc'>;\n\nexport default class ColumnDataProvider {\n  readonly dataSources: ColumnDataSources;\n  sorting: Sorting | null = null;\n\n  get order() {\n    return reduce(\n      this.sorting,\n      (r: SortingOrder, c, prop) => {\n        r[prop] = c.order;\n        return r;\n      },\n      {},\n    );\n  }\n\n  get stores() {\n    return this.dataSources;\n  }\n  constructor() {\n    this.dataSources = reduce(\n      columnTypes,\n      (sources: Partial<ColumnDataSources>, k: RevoGrid.DimensionCols) => {\n        sources[k] = new DataStore(k);\n        return sources;\n      },\n      {},\n    ) as ColumnDataSources;\n  }\n\n  column(\n    c: number,\n    pin?: RevoGrid.DimensionColPin,\n  ): RevoGrid.ColumnRegular | undefined {\n    return this.getColumn(c, pin || 'rgCol');\n  }\n\n  getColumn(\n    virtualIndex: number,\n    type: RevoGrid.DimensionCols,\n  ): RevoGrid.ColumnRegular | undefined {\n    return getSourceItem(this.dataSources[type].store, virtualIndex);\n  }\n\n  getRawColumns() {\n    return reduce(\n      this.dataSources,\n      (\n        result: Record<RevoGrid.DimensionCols, RevoGrid.ColumnRegular[]>,\n        item,\n        type: RevoGrid.DimensionCols,\n      ) => {\n        result[type] = item.store.get('source');\n        return result;\n      },\n      {\n        rgCol: [],\n        colPinStart: [],\n        colPinEnd: [],\n      },\n    );\n  }\n\n  getColumns(type: RevoGrid.DimensionCols | 'all' = 'all') {\n    if (type !== 'all') {\n      return this.dataSources[type].store.get('source');\n    }\n    return columnTypes.reduce((r: RevoGrid.ColumnRegular[], t) => {\n      r.push(...this.dataSources[t].store.get('source'));\n      return r;\n    }, []);\n  }\n\n  getColumnIndexByProp(\n    prop: RevoGrid.ColumnProp,\n    type: RevoGrid.DimensionCols,\n  ): number {\n    return getSourceItemVirtualIndexByProp(this.dataSources[type].store, prop);\n  }\n\n  getColumnByProp(\n    prop: RevoGrid.ColumnProp,\n    type: RevoGrid.DimensionCols,\n  ): RevoGrid.ColumnRegular | undefined {\n    const items = this.dataSources[type].store.get('source');\n    return find(items, { prop });\n  }\n\n  refreshByType(type: RevoGrid.DimensionCols) {\n    this.dataSources[type].refresh();\n  }\n\n  setColumns(data: ColumnCollection): ColumnCollection {\n    columnTypes.forEach(k => {\n      // set columns data\n      this.dataSources[k].updateData(data.columns[k], {\n        // max depth level\n        depth: data.maxLevel,\n\n        // groups\n        groups: data.columnGrouping[k].reduce((res: Groups, g) => {\n            if (!res[g.level]) {\n              res[g.level] = [];\n            }\n            res[g.level].push(g);\n            return res;\n          },\n          {},\n        ),\n      });\n    });\n    this.sorting = data.sort;\n    return data;\n  }\n\n  updateColumns(cols: RevoGrid.ColumnRegular[]) {\n    // collect column by type and propert\n    const columnByKey: Partial<\n      Record<\n        RevoGrid.DimensionCols,\n        Record<RevoGrid.ColumnProp, RevoGrid.ColumnRegular>\n      >\n    > = cols.reduce(\n      (\n        res: Partial<\n          Record<\n            RevoGrid.DimensionCols,\n            Record<RevoGrid.ColumnProp, RevoGrid.ColumnRegular>\n          >\n        >,\n        c,\n      ) => {\n        const type = ColumnDataProvider.getColumnType(c);\n        if (!res[type]) {\n          res[type] = {};\n        }\n        res[type][c.prop] = c;\n        return res;\n      },\n      {},\n    );\n\n    // find indexes in source\n    const colByIndex: Partial<\n      Record<RevoGrid.DimensionCols, Record<number, RevoGrid.ColumnRegular>>\n    > = {};\n    each(columnByKey, (colsToUpdate, type: RevoGrid.DimensionCols) => {\n      const items = this.dataSources[type].store.get('source');\n      colByIndex[type] = items.reduce(\n        (result: Record<number, RevoGrid.ColumnRegular>, rgCol, index) => {\n          const colToUpdateIfExists = colsToUpdate[rgCol.prop];\n          if (colToUpdateIfExists) {\n            result[index] = colToUpdateIfExists;\n          }\n          return result;\n        },\n        {},\n      );\n    });\n    each(colByIndex, (colsToUpdate, type: RevoGrid.DimensionCols) =>\n      setSourceByVirtualIndex(this.dataSources[type].store, colsToUpdate),\n    );\n  }\n\n  updateColumn(column: RevoGrid.ColumnRegular, index: number) {\n    const type = ColumnDataProvider.getColumnType(column);\n    setSourceByVirtualIndex(this.dataSources[type].store, { [index]: column });\n  }\n\n  updateColumnSorting(\n    column: RevoGrid.ColumnRegular,\n    index: number,\n    sorting: 'asc' | 'desc',\n    additive: boolean,\n  ): RevoGrid.ColumnRegular {\n    if (!additive) {\n      this.clearSorting();\n    }\n    column.order = sorting;\n    this.sorting[column.prop] = column;\n    this.updateColumn(column, index);\n    return column;\n  }\n\n  clearSorting(): void {\n    const types = reduce(\n      this.sorting,\n      (\n        r: { [key in Partial<RevoGrid.DimensionCols>]: boolean },\n        c: RevoGrid.ColumnRegular,\n      ) => {\n        const k = ColumnDataProvider.getColumnType(c);\n        r[k] = true;\n        return r;\n      },\n      {} as { [key in Partial<RevoGrid.DimensionCols>]: boolean },\n    );\n    each(types, (_, type: RevoGrid.DimensionCols) => {\n      const cols = this.dataSources[type].store.get('source');\n      each(cols, (c: RevoGrid.ColumnRegular) => (c.order = undefined));\n      this.dataSources[type].setData({ source: [...cols] });\n    });\n\n    this.sorting = {};\n  }\n\n  static getSizes(\n    cols: RevoGrid.ColumnRegular[],\n  ): RevoGrid.ViewSettingSizeProp {\n    return reduce(\n      cols,\n      (\n        res: RevoGrid.ViewSettingSizeProp,\n        c: RevoGrid.ColumnRegular,\n        i: number,\n      ) => {\n        if (c.size) {\n          res[i] = c.size;\n        }\n        return res;\n      },\n      {},\n    );\n  }\n\n  static getColumnByProp(\n    columns: RevoGrid.ColumnData,\n    prop: RevoGrid.ColumnProp,\n  ): RevoGrid.ColumnRegular | undefined {\n    return find(columns, c => {\n      if (isColGrouping(c)) {\n        return ColumnDataProvider.getColumnByProp(c.children, prop);\n      }\n      return c.prop === prop;\n    }) as RevoGrid.ColumnRegular | undefined;\n  }\n\n  // columns processing\n  static getColumns(\n    columns: RevoGrid.ColumnData,\n    level = 0,\n    types?: RevoGrid.ColumnTypes,\n  ): ColumnCollection {\n    const collection: ColumnCollection = {\n      // columns as they are in stores per type\n      columns: {\n        rgCol: [],\n        colPinStart: [],\n        colPinEnd: [],\n      },\n      // columns grouped by prop for quick access\n      columnByProp: {},\n      // column grouping\n      columnGrouping: {\n        rgCol: [],\n        colPinStart: [],\n        colPinEnd: [],\n      },\n      // max depth level for column grouping\n      maxLevel: level,\n      // sorting\n      sort: {},\n    };\n\n    return reduce(\n      columns,\n      (res: ColumnCollection, colData: RevoGrid.ColumnDataSchema) => {\n        // Grouped column\n        if (isColGrouping(colData)) {\n          return GroupingColumnPlugin.gatherGroup(\n            res,\n            colData,\n            ColumnDataProvider.getColumns(colData.children, level + 1, types),\n            level,\n          );\n        }\n        // Regular column\n        const regularColumn = {\n          ...(colData.columnType && types && types[colData.columnType]),\n          ...colData,\n        };\n        // Regular column, no Pin\n        if (!regularColumn.pin) {\n          res.columns.rgCol.push(regularColumn);\n          // Pin\n        } else {\n          res.columns[regularColumn.pin].push(regularColumn);\n        }\n        if (regularColumn.order) {\n          res.sort[regularColumn.prop] = regularColumn;\n        }\n        // technically it's possible that some columns have same prop, but better to avoid it\n        if (!res.columnByProp[regularColumn.prop]) {\n          res.columnByProp[regularColumn.prop] = [];\n        }\n        res.columnByProp[regularColumn.prop].push(regularColumn);\n\n        // trigger setup hook if present\n        regularColumn.beforeSetup && regularColumn.beforeSetup(regularColumn);\n        return res;\n      },\n      collection,\n    );\n  }\n\n  static getColumnType(rgCol: RevoGrid.ColumnRegular): RevoGrid.DimensionCols {\n    if (rgCol.pin) {\n      return rgCol.pin;\n    }\n    return 'rgCol';\n  }\n}\n","import reduce from 'lodash/reduce';\n\nimport DataStore, { getSourceItem, getVisibleSourceItem, Groups, setSourceByVirtualIndex } from '../store/dataSource/data.store';\nimport { isRowType, rowTypes } from '../store/storeTypes';\nimport DimensionProvider from './dimension.provider';\nimport { RevoGrid, Edition } from '../interfaces';\nimport { Trimmed } from '../store/dataSource/trimmed.plugin';\nimport { GroupLabelTemplateFunc } from '../plugins/groupingRow/grouping.row.types';\n\nexport type RowDataSources = { [T in RevoGrid.DimensionRows]: DataStore<RevoGrid.DataType, RevoGrid.DimensionRows> };\n\nexport class DataProvider {\n  public readonly stores: RowDataSources;\n  constructor(private dimensionProvider: DimensionProvider) {\n    this.stores = reduce(\n      rowTypes,\n      (sources: Partial<RowDataSources>, k: RevoGrid.DimensionRows) => {\n        sources[k] = new DataStore(k);\n        return sources;\n      },\n      {},\n    ) as RowDataSources;\n  }\n\n  setData(\n    data: RevoGrid.DataType[],\n    type: RevoGrid.DimensionRows = 'rgRow',\n    grouping?: { depth: number; groups?: Groups, customRenderer?: GroupLabelTemplateFunc },\n    silent = false,\n  ): RevoGrid.DataType[] {\n    // set rgRow data\n    this.stores[type].updateData([...data], grouping, silent);\n    this.dimensionProvider.setData(data.length, type, type !== 'rgRow');\n    return data;\n  }\n\n  getModel(virtualIndex: number, type: RevoGrid.DimensionRows = 'rgRow') {\n    const store = this.stores[type].store;\n    return getSourceItem(store, virtualIndex);\n  }\n\n  setCellData({ type, rowIndex, prop, val }: Edition.BeforeSaveDataDetails) {\n    const model = this.getModel(rowIndex, type);\n    model[prop] = val;\n    setSourceByVirtualIndex(this.stores[type].store, { [rowIndex]: model });\n  }\n\n  refresh(type: RevoGrid.DimensionRows | 'all' = 'all') {\n    if (isRowType(type)) {\n      this.refreshItems(type);\n    }\n    rowTypes.forEach((t: RevoGrid.DimensionRows) => this.refreshItems(t));\n  }\n\n  refreshItems(type: RevoGrid.DimensionRows = 'rgRow') {\n    const items = this.stores[type].store.get('items');\n    this.stores[type].setData({ items: [...items] });\n  }\n\n  setGrouping({ depth }: { depth: number }, type: RevoGrid.DimensionRows = 'rgRow') {\n    this.stores[type].setData({ groupingDepth: depth });\n  }\n\n  setTrimmed(trimmed: Partial<Trimmed>, type: RevoGrid.DimensionRows = 'rgRow') {\n    const store = this.stores[type];\n    store.addTrimmed(trimmed);\n    this.dimensionProvider.setTrimmed(trimmed, type);\n    if (type === 'rgRow') {\n      this.dimensionProvider.setData(getVisibleSourceItem(store.store).length, type);\n    }\n  }\n}\n","/**\n * Storing pre-calculated\n * Dimension information and sizes\n */\n\nimport { createStore } from '@stencil/store';\nimport reduce from 'lodash/reduce';\n\nimport { setStore } from '../../utils/store.utils';\nimport { calculateDimensionData } from './dimension.helpers';\nimport { Observable, PluginSubscribe, RevoGrid } from '../../interfaces';\nimport each from 'lodash/each';\n\ntype Item = keyof RevoGrid.DimensionSettingsState;\n\nconst trimmedPlugin = (store: DimensionStore): PluginSubscribe<RevoGrid.DimensionSettingsState> => {\n  let trimmedSize: RevoGrid.DimensionSettingsState['sizes'] = {};\n\n  const setTrimmed = (sizes: RevoGrid.DimensionSettingsState['sizes'], trimmed: RevoGrid.DimensionSettingsState['trimmed']) => {\n    const newSize = { ...sizes };\n    trimmedSize = {};\n    each(trimmed, (v, index) => {\n      if (v && newSize[index]) {\n        trimmedSize[index] = newSize[index];\n        delete newSize[index];\n      }\n    });\n    store.setDimensionSize(newSize);\n  };\n  return {\n    set(key, val) {\n      switch (key) {\n        case 'trimmed':\n          const trim = val as RevoGrid.DimensionSettingsState['trimmed'];\n          const sizes = store.store.get('sizes');\n          // recover trimmed, apply new trim\n          setTrimmed({ ...sizes, ...trimmedSize }, trim);\n          break;\n      }\n    }\n  }\n};\n\nconst realSizePlugin = (store: DimensionStore): PluginSubscribe<RevoGrid.DimensionSettingsState> => {\n  return {\n    set(k) {\n      switch (k) {\n        case 'count':\n        case 'sizes':\n        case 'originItemSize':\n          let realSize = 0;\n          const count = store.store.get('count');\n          for (let i = 0; i < count; i++) {\n            realSize += store.store.get('sizes')[i] || store.store.get('originItemSize');\n          }\n          store.setStore({ realSize });\n      }\n    }\n  };\n};\n\nfunction initialBase(): RevoGrid.DimensionCalc {\n  return {\n    indexes: [],\n    count: 0,\n\n    // plugin support\n    trimmed: {},\n\n\n    // size operations, this provider stores only changed sizes, not all of them\n    // same as indexes but for sizes and positions\n    // item index to size\n    sizes: {},\n    // order in indexes[] to coordinate\n    positionIndexToItem: {},\n    // initial element to coordinate ^\n    indexToItem: {},\n    positionIndexes: [],\n  };\n}\n\nfunction initialState(): RevoGrid.DimensionSettingsState {\n  return {\n    ...initialBase(),\n    // size which all items can take\n    realSize: 0,\n\n    // initial item size if it wasn't changed\n    originItemSize: 0,\n  };\n}\n\nexport default class DimensionStore {\n  readonly store: Observable<RevoGrid.DimensionSettingsState>;\n  constructor() {\n    this.store = createStore(initialState());\n    this.store.use(trimmedPlugin(this));\n    this.store.use(realSizePlugin(this));\n  }\n\n  getCurrentState(): RevoGrid.DimensionSettingsState {\n    const state = initialState();\n    const keys = Object.keys(state);\n    return reduce(\n      keys,\n      (r: RevoGrid.DimensionSettingsState, k: Item) => {\n        const data = this.store.get(k);\n        r[k] = data as never;\n        return r;\n      },\n      state,\n    );\n  }\n\n  dispose() {\n    setStore(this.store, initialState());\n  }\n\n  setStore<T extends Record<string, any>>(data: Partial<T>) {\n    setStore(this.store, data);\n  }\n\n  drop() {\n    setStore(this.store, initialBase());\n  }\n\n  /**\n   * Set custom dimension sizes and overwrite old\n   * Generates new indexes based on sizes\n   * @param sizes - sizes to set\n   */\n  setDimensionSize(sizes: RevoGrid.ViewSettingSizeProp) {\n    const dimensionData = calculateDimensionData(this.store.get('originItemSize'), sizes);\n    setStore(this.store, dimensionData);\n    return dimensionData;\n  }\n}\n","import reduce from 'lodash/reduce';\nimport { debounce } from 'lodash';\nimport { columnTypes, rowTypes } from '../store/storeTypes';\nimport DimensionStore from '../store/dimension/dimension.store';\nimport ViewportProvider from './viewport.provider';\nimport { RevoGrid } from '../interfaces';\nimport { getItemByIndex } from '../store/dimension/dimension.helpers';\nimport { gatherTrimmedItems, Trimmed } from '../store/dataSource/trimmed.plugin';\nimport { RESIZE_INTERVAL } from '../utils/consts';\n\nexport type ColumnItems = Record<RevoGrid.DimensionCols, RevoGrid.ColumnRegular[]>;\n\nexport type DimensionStores = { [T in RevoGrid.MultiDimensionType]: DimensionStore };\nexport type DimensionConfig = {\n  realSizeChanged(k: RevoGrid.MultiDimensionType): void;\n};\n/**\n * Dimension provider\n * Stores dimension information and custom sizes\n */\nexport default class DimensionProvider {\n  readonly stores: DimensionStores;\n  constructor(private viewports: ViewportProvider, config: DimensionConfig) {\n    const sizeChanged = debounce((k: RevoGrid.MultiDimensionType) => config.realSizeChanged(k), RESIZE_INTERVAL);\n    this.stores = reduce(\n      [...rowTypes, ...columnTypes],\n      (sources: Partial<DimensionStores>, k: RevoGrid.MultiDimensionType) => {\n        sources[k] = new DimensionStore();\n        sources[k].store.onChange('realSize', () => sizeChanged(k));\n        return sources;\n      },\n      {},\n    ) as DimensionStores;\n  }\n  \n  /**\n   * Clear old sizes from dimension and viewports\n   * @param type - dimension type\n   * @param count - count of items\n   */\n  clearSize(t: RevoGrid.MultiDimensionType, count: number) {\n    this.stores[t].drop();\n    // after we done with drop trigger viewport recalculaction\n    this.viewports.stores[t].setOriginalSizes(this.stores[t].store.get('originItemSize'));\n    this.setItemCount(count, t);\n  }\n\n  /**\n   * Apply new custom sizes to dimension and view port\n   * @param type - dimension type\n   * @param sizes - new custom sizes\n   * @param keepOld - keep old sizes merge new with old\n   */\n  setCustomSizes(type: RevoGrid.MultiDimensionType, sizes: RevoGrid.ViewSettingSizeProp, keepOld = false) {\n    let newSizes = sizes;\n    if (keepOld) {\n      const oldSizes = this.stores[type].store.get('sizes');\n      newSizes = {\n        ...oldSizes,\n        ...sizes,\n      };\n    }\n    this.stores[type].setDimensionSize(newSizes);\n    this.viewports.stores[type].setViewPortDimensionSizes(\n      newSizes,\n      !keepOld ? this.stores[type].store.get('originItemSize') : undefined\n    );\n  }\n\n  setItemCount(realCount: number, type: RevoGrid.MultiDimensionType) {\n    this.viewports.stores[type].setViewport({ realCount });\n    this.stores[type].setStore({ count: realCount });\n  }\n\n  /**\n   * Apply trimmed items\n   * @param trimmed - trimmed items\n   * @param type \n   */\n  setTrimmed(trimmed: Partial<Trimmed>, type: RevoGrid.MultiDimensionType) {\n    const allTrimmed = gatherTrimmedItems(trimmed);\n    const dimStoreType = this.stores[type];\n    dimStoreType.setStore({ trimmed: allTrimmed });\n    this.viewports.stores[type].setViewPortDimensionSizes(dimStoreType.store.get('sizes'));\n  }\n\n  /**\n   * Sets dimension data and view port coordinate\n   * @param items - data/column items\n   * @param type - dimension type\n   */\n  setData(\n    itemCount: number,\n    type: RevoGrid.MultiDimensionType,\n    noVirtual = false\n  ) {\n    this.setItemCount(itemCount, type);\n    if (noVirtual) {\n      this.setNoVirtual(type);\n    }\n    this.updateViewport(type);\n  }\n  /**\n   * Virtualization will get disabled\n   * @param type - dimension type\n   */\n\n  private setNoVirtual(type: RevoGrid.MultiDimensionType) {\n    const dimension: RevoGrid.DimensionSettingsState = this.stores[type].getCurrentState();\n    this.viewports.stores[type].setViewport({ virtualSize: dimension.realSize });\n  }\n\n  /**\n   * Drop all dimension data\n   */\n  dropColumns(types: RevoGrid.MultiDimensionType[] = columnTypes) {\n    for (let type of types) {\n      this.stores[type].drop();\n      this.viewports.stores[type].clearItems(); // check if needed\n    }\n  }\n\n  getFullSize(): { x: number; y: number } {\n    let x = 0;\n    let y = 0;\n    for (let type of columnTypes) {\n      x += this.stores[type]?.store.get('realSize') || 0;\n    }\n    for (let type of rowTypes) {\n      y += this.stores[type]?.store.get('realSize') || 0;\n    }\n    return { y, x };\n  }\n\n  setNewColumns(\n    type: RevoGrid.MultiDimensionType,\n    newLength: number,\n    sizes?: RevoGrid.ViewSettingSizeProp,\n    noVirtual = false\n  ) {\n    this.setItemCount(newLength, type);\n    this.setCustomSizes(type, sizes);\n\n    if (noVirtual) {\n      this.setNoVirtual(type);\n    }\n    this.updateViewport(type);\n  }\n  \n  updateViewport(type: RevoGrid.MultiDimensionType) {\n    this.setViewPortCoordinate({\n      coordinate: this.viewports.stores[type].lastCoordinate,\n      type,\n    });\n  }\n\n  setViewPortCoordinate({ coordinate, type }: { coordinate: number; type: RevoGrid.MultiDimensionType }) {\n    const dimension = this.stores[type].getCurrentState();\n    this.viewports.stores[type].setViewPortCoordinate(coordinate, dimension);\n  }\n\n  getViewPortPos(e: RevoGrid.ViewPortScrollEvent): number {\n    const dimension: RevoGrid.DimensionSettingsState = this.stores[e.dimension].getCurrentState();\n    const item = getItemByIndex(dimension, e.coordinate);\n\n    return item.start;\n  }\n\n  setSettings(data: Partial<RevoGrid.DimensionSettingsState>, dimensionType: RevoGrid.DimensionType) {\n    let stores: RevoGrid.MultiDimensionType[] = [];\n    switch (dimensionType) {\n      case 'rgCol':\n        stores = columnTypes;\n        break;\n      case 'rgRow':\n        stores = rowTypes;\n        break;\n    }\n    for (let s of stores) {\n      this.stores[s].setStore(data);\n    }\n  }\n}\n","import reduce from 'lodash/reduce';\nimport { columnTypes, rowTypes } from '../store/storeTypes';\nimport ViewportStore from '../store/viewPort/viewport.store';\nimport { RevoGrid } from '../interfaces';\n\nexport type ViewportStores = { [T in RevoGrid.MultiDimensionType]: ViewportStore };\nexport default class ViewportProvider {\n  readonly stores: ViewportStores;\n  constructor() {\n    this.stores = reduce(\n      [...rowTypes, ...columnTypes],\n      (sources: Partial<ViewportStores>, k: RevoGrid.MultiDimensionType) => {\n        sources[k] = new ViewportStore(k);\n        return sources;\n      },\n      {},\n    ) as ViewportStores;\n  }\n\n  setViewport(type: RevoGrid.MultiDimensionType, data: Partial<RevoGrid.ViewportState>): void {\n    this.stores[type].setViewport(data);\n  }\n}\n","/**\n * Plugin module for revo-grid grid system\n * Add support for automatic column resize\n */\nimport each from 'lodash/each';\nimport reduce from 'lodash/reduce';\nimport BasePlugin from './basePlugin';\nimport { RevoGrid, Edition } from '../interfaces';\nimport ColumnDataProvider, { ColumnCollection } from '../services/column.data.provider';\nimport { DataProvider } from '../services/data.provider';\nimport { columnTypes } from '../store/storeTypes';\nimport DimensionProvider, { ColumnItems } from '../services/dimension.provider';\nimport { getSourceItem } from '../store/dataSource/data.store';\n\ninterface Column extends RevoGrid.ColumnRegular {\n  index: number;\n}\n\ntype AutoSizeColumns = Record<RevoGrid.DimensionCols, ColumnRecords>;\ntype ColumnRecords = Record<any, Column>;\ntype SourceSetEvent = { type: RevoGrid.DimensionRows; source: RevoGrid.DataType[] };\ntype EditEvent = Edition.BeforeSaveDataDetails | Edition.BeforeRangeSaveDataDetails;\ntype Resolve = (cols: Partial<AutoSizeColumns>) => void;\ntype Reject = () => void;\n\nexport type AutoSizeColumnConfig = {\n  // ui behavior mode\n  mode?: ColumnAutoSizeMode;\n  /**\n   * autoSize for all columns\n   * if allColumnes true all columns treated as autoSize, worse for performance\n   * false by default\n   */\n  allColumns?: boolean;\n  /**\n   * assumption per characted size\n   * by default defined as 8, can be changed in this config\n   */\n  letterBlockSize?: number;\n  /** make size calculation exact\n   * by default it based on assumption each character takes some space defined in letterBlockSize */\n  preciseSize?: boolean;\n};\n\ntype Providers = {\n  dataProvider: DataProvider;\n  dimensionProvider: DimensionProvider;\n  columnProvider: ColumnDataProvider;\n};\n\nconst LETTER_BLOCK_SIZE = 7;\n\nenum ColumnAutoSizeMode {\n  // increases column width on header click according the largest text value\n  headerClickAutosize = 'headerClickAutoSize',\n  // increases column width on data set and text edit, decreases performance\n  autoSizeOnTextOverlap = 'autoSizeOnTextOverlap',\n  // increases and decreases column width based on all items sizes, worst for performance\n  autoSizeAll = 'autoSizeAll',\n}\n\nexport default class AutoSizeColumn extends BasePlugin {\n  private autoSizeColumns: Partial<AutoSizeColumns> | null = null;\n  private readonly letterBlockSize: number;\n\n  /** for config option when @preciseSize enabled */\n  private readonly precsizeCalculationArea: HTMLElement;\n\n  /** for edge case when no columns defined before data */\n  private dataResolve: Resolve | null = null;\n  private dataReject: Reject | null = null;\n\n  constructor(revogrid: HTMLRevoGridElement, protected providers: Providers, private config?: AutoSizeColumnConfig) {\n    super(revogrid);\n    this.letterBlockSize = config?.letterBlockSize || LETTER_BLOCK_SIZE;\n\n    // create test container to check text width\n    if (config?.preciseSize) {\n      this.precsizeCalculationArea = this.initiatePresizeElement();\n      revogrid.appendChild(this.precsizeCalculationArea);\n    }\n\n    const aftersourceset = ({ detail: { source } }: CustomEvent<SourceSetEvent>) => {\n      this.setSource(source);\n    };\n    const afteredit = ({ detail }: CustomEvent<EditEvent>) => {\n      this.afteredit(detail);\n    };\n    const afterEditAll = ({ detail }: CustomEvent<EditEvent>) => {\n      this.afterEditAll(detail);\n    };\n    const beforecolumnsset = ({ detail: { columns } }: CustomEvent<ColumnCollection>) => {\n      this.columnSet(columns);\n    };\n    const headerDblClick = ({ detail }: CustomEvent<RevoGrid.InitialHeaderClick>) => {\n      const type = ColumnDataProvider.getColumnType(detail.column);\n      const size = this.getColumnSize(detail.index, type);\n      if (size) {\n        this.providers.dimensionProvider.setCustomSizes(type, {\n          [detail.index]: size,\n        }, true);\n      }\n    };\n    this.addEventListener('beforecolumnsset', beforecolumnsset);\n    switch (config?.mode) {\n      case ColumnAutoSizeMode.autoSizeOnTextOverlap:\n        this.addEventListener('aftersourceset', aftersourceset);\n        this.addEventListener('afteredit', afteredit);\n        break;\n      case ColumnAutoSizeMode.autoSizeAll:\n        this.addEventListener('aftersourceset', aftersourceset);\n        this.addEventListener('afteredit', afterEditAll);\n        break;\n      default:\n        this.addEventListener('headerdblClick', headerDblClick);\n        break;\n    }\n  }\n\n  private async setSource(source: RevoGrid.DataType[]): Promise<void> {\n    let autoSize = this.autoSizeColumns;\n    if (this.dataReject) {\n      this.dataReject();\n      this.clearPromise();\n    }\n\n    /** If data set first and no column provided await until get one */\n    if (!autoSize) {\n      const request = new Promise((resolve: Resolve, reject: Reject) => {\n        this.dataResolve = resolve;\n        this.dataReject = reject;\n      });\n      try {\n        autoSize = await request;\n      } catch (e) {\n        return;\n      }\n    }\n\n    // calculate sizes\n    each(autoSize, (_v, type: RevoGrid.DimensionCols) => {\n      const sizes: RevoGrid.ViewSettingSizeProp = {};\n      each(autoSize[type], rgCol => {\n        // calculate size\n        rgCol.size = sizes[rgCol.index] = source.reduce((prev, rgRow) => Math.max(prev, this.getLength(rgRow[rgCol.prop])), this.getLength(rgCol.name || ''));\n      });\n      this.providers.dimensionProvider.setCustomSizes(type, sizes, true);\n    });\n  }\n\n  private getLength(len?: any): number {\n    const padding = 15;\n    if (!len) {\n      return 0;\n    }\n    try {\n      const str = len.toString();\n\n      /**if exact calculation required proxy with html element, slow operation */\n      if (this.config?.preciseSize) {\n        this.precsizeCalculationArea.innerText = str;\n        return this.precsizeCalculationArea.scrollWidth + padding * 2;\n      }\n      return str.length * this.letterBlockSize + padding * 2;\n    } catch (e) {\n      return 0;\n    }\n  }\n\n  private afteredit(e: EditEvent): void {\n    let data: Record<string, RevoGrid.DataType>;\n    if (this.isRangeEdit(e)) {\n      data = e.data;\n    } else {\n      data = { 0: { [e.prop]: e.val } };\n    }\n    each(this.autoSizeColumns, (columns, type: RevoGrid.DimensionCols) => {\n      const sizes: RevoGrid.ViewSettingSizeProp = {};\n\n      each(columns, rgCol => {\n        // calculate size\n        const size = reduce(\n          data,\n          (prev: number | undefined, rgRow) => {\n            if (typeof rgRow[rgCol.prop] === 'undefined') {\n              return prev;\n            }\n            return Math.max(prev || 0, this.getLength(rgRow[rgCol.prop]));\n          },\n          undefined,\n        );\n\n        if (size && rgCol.size < size) {\n          rgCol.size = sizes[rgCol.index] = size;\n        }\n      });\n\n      this.providers.dimensionProvider.setCustomSizes(type, sizes, true);\n    });\n  }\n\n  private afterEditAll(e: EditEvent): void {\n    const props: Record<any, true> = {};\n    if (this.isRangeEdit(e)) {\n      each(e.data, r => each(r, (_v, p) => (props[p] = true)));\n    } else {\n      props[e.prop] = true;\n    }\n    each(this.autoSizeColumns, (columns, type: RevoGrid.DimensionCols) => {\n      const sizes: RevoGrid.ViewSettingSizeProp = {};\n\n      each(columns, rgCol => {\n        if (props[rgCol.prop]) {\n          const size = this.getColumnSize(rgCol.index, type);\n          if (size) {\n            sizes[rgCol.index] = size;\n          }\n        }\n      });\n      this.providers.dimensionProvider.setCustomSizes(type, sizes, true);\n    });\n  }\n\n  private getColumnSize(index: number, type: RevoGrid.DimensionCols): number {\n    const rgCol = this.autoSizeColumns[type][index];\n    if (!rgCol) {\n      return 0;\n    }\n    return reduce(\n      this.providers.dataProvider.stores,\n      (r, s) => {\n        const perStore = reduce(\n          s.store.get('items'),\n          (prev, _row, i) => {\n            const item = getSourceItem(s.store, i);\n            return Math.max(prev || 0, this.getLength(item[rgCol.prop]));\n          },\n          0,\n        );\n        return Math.max(r, perStore);\n      },\n      rgCol.size || 0,\n    );\n  }\n\n  private columnSet(columns: ColumnItems): void {\n    for (let t of columnTypes) {\n      const type = t as RevoGrid.DimensionCols;\n      const cols = columns[type];\n\n      for (let i in cols) {\n        if (cols[i].autoSize || this.config?.allColumns) {\n          if (!this.autoSizeColumns) {\n            this.autoSizeColumns = {};\n          }\n          if (!this.autoSizeColumns[type]) {\n            this.autoSizeColumns[type] = {};\n          }\n          this.autoSizeColumns[type][i] = {\n            ...cols[i],\n            index: parseInt(i, 10),\n          };\n        }\n      }\n    }\n\n    if (this.dataResolve) {\n      this.dataResolve(this.autoSizeColumns);\n      this.clearPromise();\n    }\n  }\n\n  private clearPromise() {\n    this.dataResolve = null;\n    this.dataReject = null;\n  }\n\n  private isRangeEdit(e: EditEvent): e is Edition.BeforeRangeSaveDataDetails {\n    return !!(e as Edition.BeforeRangeSaveDataDetails).data;\n  }\n\n  private initiatePresizeElement(): HTMLElement {\n    const styleForFontTest: Partial<CSSStyleDeclaration> = {\n      position: 'absolute',\n      fontSize: '14px',\n      height: '0',\n      width: '0',\n      whiteSpace: 'nowrap',\n      top: '0',\n      overflowX: 'scroll',\n    };\n\n    const el = document.createElement('div');\n    for (let s in styleForFontTest) {\n      el.style[s] = styleForFontTest[s];\n    }\n    el.classList.add('revo-test-container');\n    return el;\n  }\n\n  destroy() {\n    super.destroy();\n    this.precsizeCalculationArea?.remove();\n  }\n}\n","import { LogicFunction, LogicFunctionExtraParam, LogicFunctionParam, ExtraField } from '../filter.types';\n\nconst eq: LogicFunction = (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) => {\n  if (typeof value === 'undefined' || (value === null && !extra)) {\n    return true;\n  }\n  if (typeof value !== 'string') {\n    value = JSON.stringify(value);\n  }\n\n  const filterVal = extra.toString().toLocaleLowerCase();\n  if (filterVal.length === 0) {\n    return true;\n  }\n  \n  return value.toLocaleLowerCase() === filterVal;\n};\n\nexport const notEq: LogicFunction = (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) => !eq(value, extra);\nnotEq.extra = 'input' as ExtraField;\neq.extra = 'input' as ExtraField;\nexport default eq;\n","import { LogicFunction, LogicFunctionExtraParam, LogicFunctionParam } from '../../filter.types';\n\nconst gtThan: LogicFunction = function (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) {\n  let conditionValue: number;\n\n  if (typeof value === 'number') {\n    conditionValue = parseFloat(extra?.toString());\n    return value > conditionValue;\n  }\n  return false;\n};\n\ngtThan.extra = 'input';\nexport default gtThan;\n","import { LogicFunction, LogicFunctionExtraParam, LogicFunctionParam } from '../../filter.types';\nimport eq from '../equal';\nimport gt from './greaterThan';\n\nconst gtThanEq: LogicFunction = function (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) {\n  return eq(value, extra) || gt(value, extra);\n};\n\ngtThanEq.extra = 'input';\nexport default gtThanEq;\n","import { LogicFunction, LogicFunctionExtraParam, LogicFunctionParam } from '../../filter.types';\n\nconst lt: LogicFunction = function (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) {\n  let conditionValue: number;\n  if (typeof value === 'number') {\n    conditionValue = parseFloat(extra?.toString());\n    return value < conditionValue;\n  } else {\n    return false;\n  }\n};\n\nlt.extra = 'input';\nexport default lt;\n","import { LogicFunction, LogicFunctionExtraParam, LogicFunctionParam } from '../../filter.types';\nimport eq from '../equal';\nimport lt from './lessThan';\n\nconst lsEq: LogicFunction = function (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) {\n  return eq(value, extra) || lt(value, extra);\n};\n\nlsEq.extra = 'input';\nexport default lsEq;\n","import { LogicFunction, LogicFunctionParam } from '../filter.types';\n\nconst set: LogicFunction = (value: LogicFunctionParam) => !(value === '' || value === null || value === void 0);\nexport const notSet: LogicFunction = (value: LogicFunctionParam) => !set(value);\nexport default set;\n","import { LogicFunction, LogicFunctionExtraParam, LogicFunctionParam } from '../../filter.types';\n\nconst beginsWith: LogicFunction = (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) => {\n  if (!value) {\n    return false;\n  }\n  if (!extra) {\n    return true;\n  }\n  if (typeof value !== 'string') {\n    value = JSON.stringify(value);\n  }\n  if (typeof extra !== 'string') {\n    extra = JSON.stringify(extra);\n  }\n  return value.toLocaleLowerCase().indexOf(extra.toLocaleLowerCase()) === 0;\n};\n\nbeginsWith.extra = 'input';\nexport default beginsWith;\n","import { LogicFunction, LogicFunctionExtraParam, LogicFunctionParam } from '../../filter.types';\n\nconst contains: LogicFunction = (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) => {\n  if (!extra) {\n    return true;\n  }\n  if (!value) {\n    return false;\n  }\n  if (extra) {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    return value.toLocaleLowerCase().indexOf(extra.toString().toLowerCase()) > -1;\n  }\n  return true;\n};\n\nexport const notContains: LogicFunction = (value: LogicFunctionParam, extra?: LogicFunctionExtraParam) => {\n  return !contains(value, extra);\n};\nnotContains.extra = 'input';\ncontains.extra = 'input';\nexport default contains;\n","import eq, { notEq } from './conditions/equal';\nimport gtThan from './conditions/number/greaterThan';\nimport gtThanEq from './conditions/number/greaterThanOrEqual';\nimport lt from './conditions/number/lessThan';\nimport lsEq from './conditions/number/lessThanOrEqual';\nimport set, { notSet } from './conditions/set';\nimport beginsWith from './conditions/string/beginswith';\nimport contains, { notContains } from './conditions/string/contains';\nimport { LogicFunction } from './filter.types';\n\nexport const filterNames = {\n  none: 'None',\n  empty: 'Not set',\n  notEmpty: 'Set',\n\n  eq: 'Equal',\n  notEq: 'Not equal',\n  begins: 'Begins with',\n  contains: 'Contains',\n  notContains: 'Does not contain',\n\n  eqN: '=',\n  neqN: '!=',\n  gt: '>',\n  gte: '>=',\n  lt: '<',\n  lte: '<=',\n};\n\nexport type FilterType = keyof typeof filterNames;\n\nexport const filterEntities: Record<FilterType, LogicFunction> = {\n  none: () => true,\n  empty: notSet,\n  notEmpty: set,\n  eq: eq,\n  notEq: notEq,\n  begins: beginsWith,\n  contains: contains,\n  notContains: notContains,\n\n  eqN: eq,\n  neqN: notEq,\n  gt: gtThan,\n  gte: gtThanEq,\n  lt: lt,\n  lte: lsEq,\n};\n\nexport const filterTypes: Record<string, FilterType[]> = {\n  string: ['notEmpty', 'empty', 'eq', 'notEq', 'begins', 'contains', 'notContains'],\n  number: ['notEmpty', 'empty', 'eqN', 'neqN', 'gt', 'gte', 'lt', 'lte'],\n};\n","import { h } from '@stencil/core';\nimport BasePlugin from '../basePlugin';\nimport { RevoGrid } from '../../interfaces';\nimport { FILTER_PROP, isFilterBtn } from './filter.button';\nimport { MultiFilterItem } from './filter.pop';\nimport { filterEntities, filterNames, FilterType, filterTypes } from './filter.service';\nimport { LogicFunction } from './filter.types';\nimport { reduce } from 'lodash';\n\ntype CustomFilter = {\n  columnFilterType: string; // property defined in column filter: string/number/abstract/enum...etc\n  name: string;\n  func: LogicFunction;\n};\n\nexport type FilterCaptions = {\n  title: string;\n  save: string;\n  reset: string;\n  cancel: string;\n};\n\nexport type FilterLocalization = {\n  captions: FilterCaptions;\n  filterNames: Record<FilterType, string>;\n};\n\n/**\n * @typedef ColumnFilterConfig\n * @type {object}\n * @property {FilterCollection|undefined} collection - preserved filter data\n * @property {string[]|undefined} include - filters to be included, if defined everything else out of scope will be ignored\n * @property {Record<string, CustomFilter>|undefined} customFilters - hash map of {FilterType:CustomFilter}.\n * @property {FilterLocalization|undefined} localization - translation for filter popup captions.\n * @property {MultiFilterItem|undefined} multiFilterItems - data for multi filtering.\n * @property {boolean|undefined} disableDynamicFiltering - disables dynamic filtering.\n * A way to define your own filter types per column\n */\nexport type ColumnFilterConfig = {\n  collection?: FilterCollection;\n  include?: string[];\n  customFilters?: Record<string, CustomFilter>;\n  filterProp?: string;\n  localization?: FilterLocalization;\n  multiFilterItems?: MultiFilterItem;\n  disableDynamicFiltering?: boolean;\n};\ntype HeaderEvent = CustomEvent<RevoGrid.ColumnRegular>;\ntype FilterCollectionItem = {\n  filter: LogicFunction;\n  type: FilterType;\n  value?: any;\n};\n\nexport type FilterCollection = Record<RevoGrid.ColumnProp, FilterCollectionItem>;\n\nexport const FILTER_TRIMMED_TYPE = 'filter';\nexport const FILTER_CONFIG_CHANGED_EVENT = 'filterconfigchanged';\n\nexport default class FilterPlugin extends BasePlugin {\n  private pop: HTMLRevogrFilterPanelElement;\n  private filterCollection: FilterCollection = {};\n  private multiFilterItems: MultiFilterItem = {};\n  private possibleFilters: Record<string, string[]> = { ...filterTypes };\n  private possibleFilterNames: Record<string, string> = { ...filterNames };\n  private possibleFilterEntities: Record<string, LogicFunction> = { ...filterEntities };\n  private filterProp = FILTER_PROP;\n\n  constructor(protected revogrid: HTMLRevoGridElement, uiid: string, config?: ColumnFilterConfig) {\n    super(revogrid);\n    if (config) {\n      this.initConfig(config);\n    }\n\n    const headerclick = (e: HeaderEvent) => this.headerclick(e);\n\n    const aftersourceset = async () => {\n      const filterCollectionProps = Object.keys(this.filterCollection);\n      if (filterCollectionProps.length > 0) {\n        // handle old way of filtering by reworking FilterCollection to new MultiFilterItem\n        filterCollectionProps.forEach((prop, index) => {\n          if (!this.multiFilterItems[prop]) {\n            this.multiFilterItems[prop] = [\n              {\n                id: index,\n                type: this.filterCollection[prop].type,\n                value: this.filterCollection[prop].value,\n                relation: 'and',\n              },\n            ];\n          }\n        });\n      }\n      await this.runFiltering();\n    };\n    this.addEventListener('headerclick', headerclick);\n    this.addEventListener(FILTER_CONFIG_CHANGED_EVENT, ({ detail }: CustomEvent<ColumnFilterConfig | boolean>) => {\n      if (!detail) {\n        this.clearFiltering();\n        return;\n      }\n      if (typeof detail === 'object') {\n        this.initConfig(detail);\n      }\n      aftersourceset();\n    });\n    this.addEventListener('aftersourceset', aftersourceset);\n    this.addEventListener('filter', ({ detail }: CustomEvent) => this.onFilterChange(detail));\n\n    this.revogrid.registerVNode([\n      <revogr-filter-panel\n        uuid={`filter-${uiid}`}\n        filterItems={this.multiFilterItems}\n        filterNames={this.possibleFilterNames}\n        filterEntities={this.possibleFilterEntities}\n        filterCaptions={config?.localization?.captions}\n        onFilterChange={e => this.onFilterChange(e.detail)}\n        disableDynamicFiltering={config?.disableDynamicFiltering}\n        ref={e => (this.pop = e)}\n      />,\n    ]);\n  }\n\n  private initConfig(config: ColumnFilterConfig) {\n    if (config.multiFilterItems) {\n      this.multiFilterItems = { ...config.multiFilterItems };\n    }\n    if (config.customFilters) {\n      for (let cType in config.customFilters) {\n        const cFilter = config.customFilters[cType];\n        if (!this.possibleFilters[cFilter.columnFilterType]) {\n          this.possibleFilters[cFilter.columnFilterType] = [];\n        }\n        this.possibleFilters[cFilter.columnFilterType].push(cType);\n        this.possibleFilterEntities[cType] = cFilter.func;\n        this.possibleFilterNames[cType] = cFilter.name;\n      }\n    }\n\n    if (config.filterProp) {\n      this.filterProp = config.filterProp;\n    }\n\n    /**\n     * which filters has to be included/excluded\n     * convinient way to exclude system filters\n     */\n    if (config.include) {\n      const filters: Record<string, string[]> = {};\n\n      for (let t in this.possibleFilters) {\n        // validate filters, if appropriate function present\n        const newTypes = this.possibleFilters[t].filter(f => config.include.indexOf(f) > -1);\n        if (newTypes.length) {\n          filters[t] = newTypes;\n        }\n      }\n      // if any valid filters provided show them\n      if (Object.keys(filters).length > 0) {\n        this.possibleFilters = filters;\n      }\n    }\n    if (config.collection) {\n      this.filterCollection = reduce(config.collection, (result: FilterCollection, item, prop) => {\n        if (this.possibleFilterEntities[item.type]) {\n          result[prop] = item;\n        } else {\n          console.warn(`${item.type} type is not found.`);\n        }\n        return result;\n      }, {});\n    }\n\n    if (config.localization) {\n      if (config.localization.filterNames) {\n        Object.entries(config.localization.filterNames).forEach(([k, v]) => {\n          if (this.possibleFilterNames[k] != void 0) {\n            this.possibleFilterNames[k] = v;\n          }\n        });\n      }\n    }\n  }\n\n  private async headerclick(e: HeaderEvent) {\n    const el = e.detail.originalEvent?.target as HTMLElement;\n    if (!isFilterBtn(el)) {\n      return;\n    }\n    e.preventDefault();\n\n    // close if same\n    const changes = await this.pop.getChanges();\n    if (changes && changes?.prop === e.detail.prop) {\n      this.pop.show();\n      return;\n    }\n\n    // filter button clicked, open filter dialog\n    const gridPos = this.revogrid.getBoundingClientRect();\n    const buttonPos = el.getBoundingClientRect();\n    const prop = e.detail.prop;\n    this.pop.filterTypes = this.getColumnFilter(e.detail.filter);\n    this.pop.show({\n      ...this.filterCollection[prop],\n      x: buttonPos.x - gridPos.x,\n      y: buttonPos.y - gridPos.y + buttonPos.height,\n      prop,\n    });\n  }\n\n  private getColumnFilter(type?: boolean | string | string[]): Record<string, string[]> {\n    let filterType = 'string';\n    if (!type) {\n      return { [filterType]: this.possibleFilters[filterType] };\n    }\n\n    // if custom column filter\n    if (this.isValidType(type)) {\n      filterType = type;\n\n      // if multiple filters applied\n    } else if (typeof type === 'object' && type.length) {\n      return type.reduce((r: Record<string, string[]>, multiType) => {\n        if (this.isValidType(multiType)) {\n          r[multiType] = this.possibleFilters[multiType];\n        }\n        return r;\n      }, {});\n    }\n    return { [filterType]: this.possibleFilters[filterType] };\n  }\n\n  private isValidType(type: any): type is string {\n    return !!(typeof type === 'string' && this.possibleFilters[type]);\n  }\n\n  // called on internal component change\n  private async onFilterChange(filterItems: MultiFilterItem) {\n    this.multiFilterItems = filterItems;\n    this.runFiltering();\n  }\n\n  /**\n   * Triggers grid filtering\n   */\n  async doFiltering(collection: FilterCollection, items: RevoGrid.DataType[], columns: RevoGrid.ColumnRegular[], filterItems: MultiFilterItem) {\n    const columnsToUpdate: RevoGrid.ColumnRegular[] = [];\n\n    columns.forEach(rgCol => {\n      const column = { ...rgCol };\n      const hasFilter = filterItems[column.prop];\n      if (column[this.filterProp] && !hasFilter) {\n        delete column[this.filterProp];\n        columnsToUpdate.push(column);\n      }\n      if (!column[this.filterProp] && hasFilter) {\n        columnsToUpdate.push(column);\n        column[this.filterProp] = true;\n      }\n    });\n    const itemsToFilter = this.getRowFilter(items, filterItems);\n    // check is filter event prevented\n    const { defaultPrevented, detail } = this.emit('beforefiltertrimmed', { collection, itemsToFilter, source: items, filterItems });\n    if (defaultPrevented) {\n      return;\n    }\n\n    // check is trimmed event prevented\n    const isAddedEvent = await this.revogrid.addTrimmed(detail.itemsToFilter, FILTER_TRIMMED_TYPE);\n    if (isAddedEvent.defaultPrevented) {\n      return;\n    }\n\n    // applies the hasFilter to the columns to show filter icon\n    await this.revogrid.updateColumns(columnsToUpdate);\n    this.emit('afterFilterApply');\n  }\n\n  async clearFiltering() {\n    this.multiFilterItems = {};\n    await this.runFiltering();\n  }\n\n  private async runFiltering() {\n    const collection: FilterCollection = {};\n\n    // handle old filterCollection to return the first filter only (if any) from multiFilterItems\n    const filterProps = Object.keys(this.multiFilterItems);\n\n    for (const prop of filterProps) {\n      // check if we have any filter for a column\n      if (this.multiFilterItems[prop].length > 0) {\n        const firstFilterItem = this.multiFilterItems[prop][0];\n        collection[prop] = {\n          filter: filterEntities[firstFilterItem.type],\n          type: firstFilterItem.type,\n          value: firstFilterItem.value,\n        };\n      }\n    }\n\n    this.filterCollection = collection;\n\n    const { source, columns } = await this.getData();\n    const { defaultPrevented, detail } = this.emit('beforefilterapply', { collection: this.filterCollection, source, columns, filterItems: this.multiFilterItems });\n    if (defaultPrevented) {\n      return;\n    }\n    this.doFiltering(detail.collection, detail.source, detail.columns, detail.filterItems);\n  }\n\n  private async getData() {\n    return {\n      source: await this.revogrid.getSource(),\n      columns: await this.revogrid.getColumns(),\n    };\n  }\n\n  private getRowFilter(rows: RevoGrid.DataType[], filterItems: MultiFilterItem) {\n    const propKeys = Object.keys(filterItems);\n\n    const trimmed: Record<number, boolean> = {};\n    let propFilterSatisfiedCount: number = 0;\n    let lastFilterResults: boolean[] = [];\n\n    // each rows\n    rows.forEach((model, rowIndex) => {\n      // working on all props\n      for (const prop of propKeys) {\n        const propFilters = filterItems[prop];\n\n        propFilterSatisfiedCount = 0;\n        lastFilterResults = [];\n\n        // testing each filter for a prop\n        for (const [filterIndex, filterData] of propFilters.entries()) {\n          // the filter LogicFunction based on the type\n          const filter = this.possibleFilterEntities[filterData.type];\n\n          // THE MAGIC OF FILTERING IS HERE\n          if (filterData.relation === 'or') {\n            lastFilterResults = [];\n            if (filter(model[prop], filterData.value)) {\n              continue;\n            }\n            propFilterSatisfiedCount++;\n          } else {\n            // 'and' relation will need to know the next filter\n            // so we save this current filter to include it in the next filter\n            lastFilterResults.push(!filter(model[prop], filterData.value));\n\n            // check first if we have a filter on the next index to pair it with this current filter\n            const nextFilterData = propFilters[filterIndex + 1];\n            // stop the sequence if there is no next filter or if the next filter is not an 'and' relation\n            if (!nextFilterData || nextFilterData.relation !== 'and') {\n              // let's just continue since for sure propFilterSatisfiedCount cannot be satisfied\n              if (lastFilterResults.indexOf(true) === -1) {\n                lastFilterResults = [];\n                continue;\n              }\n\n              // we need to add all of the lastFilterResults since we need to satisfy all\n              propFilterSatisfiedCount += lastFilterResults.length;\n              lastFilterResults = [];\n            }\n          }\n        } // end of propFilters forEach\n\n        // add to the list of removed/trimmed rows of filter condition is satisfied\n        if (propFilterSatisfiedCount === propFilters.length) trimmed[rowIndex] = true;\n      } // end of for-of propKeys\n    });\n    return trimmed;\n  }\n}\n","var baseGetTag = require('./_baseGetTag'),\n    isArray = require('./isArray'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nmodule.exports = isString;\n","var baseProperty = require('./_baseProperty');\n\n/**\n * Gets the size of an ASCII `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nvar asciiSize = baseProperty('length');\n\nmodule.exports = asciiSize;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nmodule.exports = hasUnicode;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Gets the size of a Unicode `string`.\n *\n * @private\n * @param {string} string The string inspect.\n * @returns {number} Returns the string size.\n */\nfunction unicodeSize(string) {\n  var result = reUnicode.lastIndex = 0;\n  while (reUnicode.test(string)) {\n    ++result;\n  }\n  return result;\n}\n\nmodule.exports = unicodeSize;\n","var asciiSize = require('./_asciiSize'),\n    hasUnicode = require('./_hasUnicode'),\n    unicodeSize = require('./_unicodeSize');\n\n/**\n * Gets the number of symbols in `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the string size.\n */\nfunction stringSize(string) {\n  return hasUnicode(string)\n    ? unicodeSize(string)\n    : asciiSize(string);\n}\n\nmodule.exports = stringSize;\n","var baseKeys = require('./_baseKeys'),\n    getTag = require('./_getTag'),\n    isArrayLike = require('./isArrayLike'),\n    isString = require('./isString'),\n    stringSize = require('./_stringSize');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    setTag = '[object Set]';\n\n/**\n * Gets the size of `collection` by returning its length for array-like\n * values or the number of own enumerable string keyed properties for objects.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @returns {number} Returns the collection size.\n * @example\n *\n * _.size([1, 2, 3]);\n * // => 3\n *\n * _.size({ 'a': 1, 'b': 2 });\n * // => 2\n *\n * _.size('pebbles');\n * // => 7\n */\nfunction size(collection) {\n  if (collection == null) {\n    return 0;\n  }\n  if (isArrayLike(collection)) {\n    return isString(collection) ? stringSize(collection) : collection.length;\n  }\n  var tag = getTag(collection);\n  if (tag == mapTag || tag == setTag) {\n    return collection.size;\n  }\n  return baseKeys(collection).length;\n}\n\nmodule.exports = size;\n","import size from 'lodash/size';\nimport debounce from 'lodash/debounce';\n\nimport { RevoGrid } from '../../interfaces';\nimport { setStore } from '../../utils/store.utils';\nimport ColumnDataProvider from '../../services/column.data.provider';\nimport BasePlugin from '../basePlugin';\n\nexport type SortingOrder = Record<RevoGrid.ColumnProp, RevoGrid.Order>;\ntype SortingOrderFunction = Record<RevoGrid.ColumnProp, RevoGrid.CellCompareFunc | undefined>;\ntype ColumnSetEvent = {\n  order: SortingOrder;\n};\n\n/**\n * lifecycle\n * 1) @event beforesorting - sorting just started, nothing happened yet, can be from column or from source, if type is from rows - column will be undefined\n * 2) @metod updateColumnSorting - column sorting icon applied to grid and column get updated, data still untiuched\n * 3) @event beforesortingapply - before we applied sorting data to data source, you can prevent event and data will not be sorted. It's called only from column sorting click\n * 4) @event afterSortingApply - sorting applied, just finished event, from rows and columns\n *\n * If you prevent event it'll not reach farther steps\n */\n\nexport default class SortingPlugin extends BasePlugin {\n  // sorting order per column\n  private sorting: SortingOrder | null = null;\n\n  // sorting function per column, multiple columns sorting supported\n  private sortingFunc: SortingOrderFunction | null = null;\n  private doSort = debounce((order: SortingOrder, comparison: SortingOrderFunction) => this.sort(order, comparison), 50);\n\n\n  constructor(protected revogrid: HTMLRevoGridElement) {\n    super(revogrid);\n\n    const aftersourceset = async ({ detail: { type } }: CustomEvent<{\n      type: RevoGrid.DimensionRows\n    }>) => {\n      // if sorting was provided - sort data\n      if (!!this.sorting && this.sortingFunc) {\n        const beforeEvent = this.emit('beforesorting', { type });\n        if (beforeEvent.defaultPrevented) {\n          return;\n        }\n        this.doSort(this.sorting, this.sortingFunc);\n      }\n    };\n    const aftercolumnsset = async ({ detail: { order } }: CustomEvent<ColumnSetEvent>) => {\n      // const columns = await this.revogrid.getColumns();\n      // const sortingFunc: SortingOrderFunction = {};\n\n      // for (let prop in order) {\n      //   const cmp = this.getComparer(ColumnDataProvider.getColumnByProp(columns, prop), order[prop]);\n      //   sortingFunc[prop] = cmp;\n      // }\n      // this.doSort(order, sortingFunc);\n    };\n    const headerclick = async (e: CustomEvent<RevoGrid.InitialHeaderClick>) => {\n      if (e.defaultPrevented) {\n        return;\n      }\n\n      if (!e.detail.column.sortable) {\n        return;\n      }\n\n      this.headerclick(e.detail.column, e.detail.index, e.detail?.originalEvent?.shiftKey);\n    };\n\n    this.addEventListener('after-any-source', aftersourceset);\n    this.addEventListener('aftercolumnsset', aftercolumnsset);\n    this.addEventListener('initialHeaderClick', headerclick);\n  }\n\n  private getComparer(column: RevoGrid.ColumnRegular, order: RevoGrid.Order): RevoGrid.CellCompareFunc {\n    const cellCmp: RevoGrid.CellCompareFunc = column?.cellCompare?.bind({ order }) || this.defaultCellCompare;\n    if (order == 'asc') {\n      return cellCmp;\n    }\n    if (order == 'desc') {\n      return this.descCellCompare(cellCmp);\n    }\n    return undefined;\n  }\n\n  /**\n   * Apply sorting to data on header click\n   * If additive - add to existing sorting, multiple columns can be sorted\n   */\n  async headerclick(column: RevoGrid.ColumnRegular, index: number, additive: boolean) {\n    let order: RevoGrid.Order = this.getNextOrder(column.order);\n    const beforeEvent = this.emit('beforesorting', { column, order, additive });\n    if (beforeEvent.defaultPrevented) {\n      return;\n    }\n    order = beforeEvent.detail.order;\n    const newCol = await this.revogrid.updateColumnSorting(beforeEvent.detail.column, index, order, additive);\n\n    // apply sort data\n    const beforeApplyEvent = this.emit('beforesortingapply', { column: newCol, order, additive });\n    if (beforeApplyEvent.defaultPrevented) {\n      return;\n    }\n    order = beforeApplyEvent.detail.order;\n    const cmp = this.getComparer(column, order);\n\n    if (additive && this.sorting) {\n      const sorting: SortingOrder = {};\n      const sortingFunc: SortingOrderFunction = {};\n\n      this.sorting = {\n        ...this.sorting,\n        ...sorting,\n      };\n      // extend sorting function with new sorting for multiple columns sorting\n      this.sortingFunc = {\n        ...this.sortingFunc,\n        ...sortingFunc,\n      };\n\n      if (column.prop in sorting && size(sorting) > 1 && order === undefined) {\n        delete sorting[column.prop];\n        delete sortingFunc[column.prop];\n      } else {\n        sorting[column.prop] = order;\n        sortingFunc[column.prop] = cmp;\n      }\n    } else {\n      // reset sorting\n      this.sorting = { [column.prop]: order };\n      this.sortingFunc = { [column.prop]: cmp };\n    }\n\n    this.doSort(this.sorting, this.sortingFunc);\n  }\n\n  /**\n   * Sort items by sorting function\n   * @requires proxyItems applied to row store\n   * @requires source applied to row store\n   * \n   * @param sorting - per column sorting\n   * @param data - this.stores['rgRow'].store.get('source')\n   */\n  async sort(sorting: SortingOrder, sortingFunc: SortingOrderFunction, types: RevoGrid.DimensionRows[] = ['rgRow', 'rowPinStart', 'rowPinEnd']) {\n    return\n    // if no sorting - reset\n    if (!size(sorting)) {\n      this.sorting = null;\n      this.sortingFunc = null;\n      return;\n    }\n    // set sorting\n    this.sorting = sorting;\n    this.sortingFunc = sortingFunc;\n\n    // by default it'll sort by rgRow store\n    // todo: support multiple stores\n    for (let type of types) {\n      const store = await this.revogrid.getSourceStore(type);\n      // row data\n      const source = store.get('source');\n      // row indexes\n      const proxyItems = store.get('proxyItems');\n      const data = this.sortIndexByItems([...proxyItems], source, sortingFunc);\n      setStore(store, {\n        proxyItems: data,\n        source: [...source],\n      });\n    }\n    this.emit('afterSortingApply');\n  }\n\n  defaultCellCompare(prop: RevoGrid.ColumnProp, a: RevoGrid.DataType, b: RevoGrid.DataType) {\n    const av = a[prop]?.toString().toLowerCase();\n    const bv = b[prop]?.toString().toLowerCase();\n\n    return av == bv ? 0 : av > bv ? 1 : -1;\n  }\n\n  descCellCompare(cmp: RevoGrid.CellCompareFunc) {\n    return (prop: RevoGrid.ColumnProp, a: RevoGrid.DataType, b: RevoGrid.DataType): number => {\n      return -1 * cmp(prop, a, b);\n    };\n  }\n\n  sortIndexByItems(indexes: number[], source: RevoGrid.DataType[], sortingFunc: SortingOrderFunction): number[] {\n    // if no sorting - return unsorted indexes\n    if (Object.entries(sortingFunc).length === 0) {\n      // Unsort indexes\n      return [...Array(indexes.length).keys()];\n    }\n    // \n    /**\n     * go through all indexes and align in new order\n     * performs a multi-level sorting by applying multiple comparison functions to determine the order of the items based on different properties.\n     */\n    return indexes.sort((a, b) => {\n      for (const [prop, cmp] of Object.entries(sortingFunc)) {\n        const itemA = source[a];\n        const itemB = source[b];\n\n        /**\n         * If the comparison function returns a non-zero value (sorted), it means that the items should be sorted based on the given property. In such a case, the function immediately returns the sorted value, indicating the order in which the items should be arranged.\n         * If none of the comparison functions result in a non-zero value, indicating that the items are equal or should remain in the same order, the function eventually returns 0.\n         */\n        const sorted = cmp(prop, itemA, itemB);\n        if (sorted) {\n          return sorted;\n        }\n      }\n      return 0;\n    });\n  }\n\n  getNextOrder(currentOrder: RevoGrid.Order): RevoGrid.Order {\n    switch (currentOrder) {\n      case undefined:\n        return 'asc';\n      case 'asc':\n        return 'desc';\n      case 'desc':\n        return undefined;\n    }\n  }\n}\n","/**\n * The base implementation of `_.clamp` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */\nfunction baseClamp(number, lower, upper) {\n  if (number === number) {\n    if (upper !== undefined) {\n      number = number <= upper ? number : upper;\n    }\n    if (lower !== undefined) {\n      number = number >= lower ? number : lower;\n    }\n  }\n  return number;\n}\n\nmodule.exports = baseClamp;\n","var baseClamp = require('./_baseClamp'),\n    toInteger = require('./toInteger');\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/**\n * Converts `value` to an integer suitable for use as the length of an\n * array-like object.\n *\n * **Note:** This method is based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toLength(3.2);\n * // => 3\n *\n * _.toLength(Number.MIN_VALUE);\n * // => 0\n *\n * _.toLength(Infinity);\n * // => 4294967295\n *\n * _.toLength('3.2');\n * // => 3\n */\nfunction toLength(value) {\n  return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;\n}\n\nmodule.exports = toLength;\n","var toInteger = require('./toInteger'),\n    toLength = require('./toLength');\n\n/**\n * The base implementation of `_.fill` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to fill.\n * @param {*} value The value to fill `array` with.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns `array`.\n */\nfunction baseFill(array, value, start, end) {\n  var length = array.length;\n\n  start = toInteger(start);\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = (end === undefined || end > length) ? length : toInteger(end);\n  if (end < 0) {\n    end += length;\n  }\n  end = start > end ? 0 : toLength(end);\n  while (start < end) {\n    array[start++] = value;\n  }\n  return array;\n}\n\nmodule.exports = baseFill;\n","var baseFill = require('./_baseFill'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Fills elements of `array` with `value` from `start` up to, but not\n * including, `end`.\n *\n * **Note:** This method mutates `array`.\n *\n * @static\n * @memberOf _\n * @since 3.2.0\n * @category Array\n * @param {Array} array The array to fill.\n * @param {*} value The value to fill `array` with.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns `array`.\n * @example\n *\n * var array = [1, 2, 3];\n *\n * _.fill(array, 'a');\n * console.log(array);\n * // => ['a', 'a', 'a']\n *\n * _.fill(Array(3), 2);\n * // => [2, 2, 2]\n *\n * _.fill([4, 6, 8, 10], '*', 1, 3);\n * // => [4, '*', '*', 10]\n */\nfunction fill(array, value, start, end) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {\n    start = 0;\n    end = length;\n  }\n  return baseFill(array, value, start, end);\n}\n\nmodule.exports = fill;\n","import { getGroupingName, isGrouping } from '../groupingRow/grouping.service';\nimport { CSVFormat, DataInput, Formatter } from './types';\n\nconst INITIAL: CSVFormat = {\n  mime: 'text/csv',\n  fileKind: 'csv',\n  // BOM signature\n  bom: true,\n  columnDelimiter: ',',\n  rowDelimiter: '\\r\\n',\n  encoding: '',\n};\n\nexport type CSVFormatter = (options: Partial<CSVFormat>, data: DataInput) => string;\n\n// The ASCII character code 13 is called a Carriage Return or CR.\nconst CARRIAGE_RETURN = String.fromCharCode(13);\n// Chr(13) followed by a Chr(10) that compose a proper CRLF.\nconst LINE_FEED = String.fromCharCode(10);\nconst DOUBLE_QT = String.fromCharCode(34);\nconst NO_BREAK_SPACE = String.fromCharCode(0xfeff);\nconst escapeRegex = new RegExp('\"', 'g');\n\nexport default class ExportCsv implements Formatter {\n  readonly options: Readonly<CSVFormat>;\n  constructor(options: Partial<CSVFormat> = {}) {\n    this.options = { ...INITIAL, ...options };\n  }\n\n  doExport({ data, headers, props }: DataInput) {\n    let result = this.options.bom ? NO_BREAK_SPACE : '';\n\n    // any header\n    if (headers?.length > 0) {\n      headers.forEach(header => {\n        // ignore empty\n        if (!header.length) {\n          return;\n        }\n        result += this.prepareHeader(header, this.options.columnDelimiter);\n        result += this.options.rowDelimiter;\n      });\n    }\n\n    data.forEach((rgRow, index) => {\n      if (index > 0) {\n        result += this.options.rowDelimiter;\n      }\n      // support grouping\n      if (isGrouping(rgRow)) {\n        result += this.parseCell(getGroupingName(rgRow), this.options.columnDelimiter);\n        return;\n      }\n      result += props.map(p => this.parseCell(rgRow[p], this.options.columnDelimiter)).join(this.options.columnDelimiter);\n    });\n\n    return result;\n  }\n\n  private prepareHeader(columnHeaders: string[], columnDelimiter: string) {\n    let result = '';\n    const newColumnHeaders = columnHeaders.map(v => this.parseCell(v, columnDelimiter, true));\n    result += newColumnHeaders.join(columnDelimiter);\n    return result;\n  }\n\n  private parseCell(value: any, columnDelimiter: string, force = false) {\n    let escape = value;\n    if (typeof value !== 'string') {\n      escape = JSON.stringify(value);\n    }\n    const toEscape = [CARRIAGE_RETURN, DOUBLE_QT, LINE_FEED, columnDelimiter];\n    if (typeof escape === 'undefined') {\n      return '';\n    }\n    if (escape !== '' && (force || toEscape.some(i => escape.indexOf(i) >= 0))) {\n      return `\"${escape.replace(escapeRegex, '\"\"')}\"`;\n    }\n\n    return escape;\n  }\n}\n","import fill from 'lodash/fill';\nimport { RevoGrid } from '../../interfaces';\nimport { Group, Groups } from '../../store/dataSource/data.store';\nimport { ColSource, CSVFormat, DataInput, Formatter } from './types';\n\nimport { columnTypes, rowTypes } from '../../store/storeTypes';\nimport { timeout } from '../../utils';\nimport BasePlugin from '../basePlugin';\nimport ExportCsv from './csv';\n\nenum ExportTypes {\n  csv = 'csv',\n}\n\nexport type ExportFormat = Partial<CSVFormat>;\n\nexport default class ExportFilePlugin extends BasePlugin {\n  /** Exports string */\n  async exportString(options: ExportFormat = {}, t: ExportTypes = ExportTypes.csv) {\n    const data = await this.beforeexport();\n    if (!data) {\n      return null;\n    }\n    return this.formatter(t, options).doExport(data);\n  }\n\n  /** Exports Blob */\n  async exportBlob(options: ExportFormat = {}, t: ExportTypes = ExportTypes.csv) {\n    return await this.getBlob(this.formatter(t, options));\n  }\n\n  /** Export file */\n  async exportFile(options: ExportFormat = {}, t: ExportTypes = ExportTypes.csv) {\n    const formatter = this.formatter(t, options);\n    const blob = await this.getBlob(formatter);\n\n    // url\n    const URL = window.URL || window.webkitURL;\n\n    const a = document.createElement('a');\n    const { filename, fileKind } = formatter.options;\n    const name = `${filename}.${fileKind}`;\n    const url = URL.createObjectURL(blob);\n\n    a.style.display = 'none';\n    a.setAttribute('href', url);\n    a.setAttribute('download', name);\n    this.revogrid.appendChild(a);\n    a.dispatchEvent(new MouseEvent('click'));\n    this.revogrid.removeChild(a);\n\n    // delay for revoke, correct for some browsers\n    await timeout(120);\n    URL.revokeObjectURL(url);\n  }\n\n  /** Blob object */\n  async getBlob(formatter: Formatter) {\n    const type = `${formatter.options.mime};charset=${formatter.options.encoding}`;\n    if (typeof Blob !== 'undefined') {\n      const data = await this.beforeexport();\n      if (!data) {\n        return null;\n      }\n      return new Blob([formatter.doExport(data)], { type });\n    }\n    return null;\n  }\n\n  // before event\n  private async beforeexport() {\n    let data = await this.getData();\n    const event: CustomEvent<{ data: DataInput }> = this.emit('beforeexport', { data });\n    if (event.defaultPrevented) {\n      return null;\n    }\n    return event.detail.data;\n  }\n\n  private async getData(): Promise<DataInput> {\n    const data = await this.getSource();\n    const colSource: ColSource[] = [];\n    const colPromises: Promise<ColSource>[] = [];\n    columnTypes.forEach((t, i) => {\n      colPromises.push(this.getColPerSource(t).then(s => (colSource[i] = s)));\n    });\n    await Promise.all(colPromises);\n    const columns: ColSource = {\n      headers: [],\n      props: [],\n    };\n    for (let source of colSource) {\n      source.headers.forEach((h, i) => {\n        if (!columns.headers[i]) {\n          columns.headers[i] = [];\n        }\n        columns.headers[i].push(...h);\n      });\n      columns.props.push(...source.props);\n    }\n    return {\n      data,\n      ...columns,\n    };\n  }\n\n  private async getColPerSource(t: RevoGrid.DimensionCols) {\n    const store = await this.revogrid.getColumnStore(t);\n    const source = store.get('source');\n    const virtualIndexes = store.get('items');\n    const depth = store.get('groupingDepth');\n    const groups = store.get('groups');\n    const colNames: string[] = [];\n    const colProps: RevoGrid.ColumnProp[] = [];\n    const visibleItems = virtualIndexes.reduce((r: Record<string, number>, v, virtualIndex) => {\n      const prop = source[v].prop;\n      colNames.push(source[v].name || '');\n      colProps.push(prop);\n      r[prop] = virtualIndex;\n      return r;\n    }, {});\n    const rows: string[][] = this.getGroupHeaders(depth, groups, virtualIndexes, visibleItems);\n    rows.push(colNames);\n    return {\n      headers: rows,\n      props: colProps,\n    };\n  }\n\n  private getGroupHeaders(depth: number, groups: Groups, items: number[], visibleItems: Record<string, number>) {\n    const rows: string[][] = [];\n    const template = fill(new Array(items.length), '');\n    for (let d = 0; d < depth; d++) {\n      const rgRow = [...template];\n      rows.push(rgRow);\n      if (!groups[d]) {\n        continue;\n      }\n      const levelGroups = groups[d];\n\n      // add names of groups\n      levelGroups.forEach((group: Group) => {\n        const minIndex = this.findGroupStartIndex(group.ids, visibleItems);\n        if (typeof minIndex === 'number') {\n          rgRow[minIndex] = group.name;\n        }\n      });\n    }\n    return rows;\n  }\n\n  private findGroupStartIndex(ids: (string | number)[], visibleItems: Record<string, number>): number | undefined {\n    let min: number | undefined;\n    ids.forEach(id => {\n      const current = visibleItems[id];\n      if (typeof current === 'number') {\n        if (typeof min !== 'number' || min > current) {\n          min = current;\n        }\n      }\n    });\n    return min;\n  }\n\n  private async getSource() {\n    const data: RevoGrid.DataType[][] = [];\n    const promisesData: Promise<number>[] = [];\n    rowTypes.forEach(t => {\n      const dataPart: RevoGrid.DataType[] = [];\n      data.push(dataPart);\n      const promise = this.revogrid.getVisibleSource(t).then((d: RevoGrid.DataType[]) => dataPart.push(...d));\n      promisesData.push(promise);\n    });\n    await Promise.all(promisesData);\n    return data.reduce((r, v) => {\n      r.push(...v);\n      return r;\n    }, []);\n  }\n\n  // get correct class for future multiple types support\n  private formatter(type: ExportTypes, options: ExportFormat = {}) {\n    switch (type) {\n      case ExportTypes.csv:\n        return new ExportCsv(options);\n      default:\n        throw new Error('Unknown format');\n    }\n  }\n}\n","import { RevoGrid } from '../../interfaces';\nimport { PSEUDO_GROUP_ITEM_ID, PSEUDO_GROUP_ITEM_VALUE, GROUP_EXPANDED, GROUP_DEPTH } from './grouping.const';\nimport { isGrouping, getParsedGroup, isSameGroup } from './grouping.service';\n\n// provide collapse data\nexport function doCollapse(pIndex: number, source: RevoGrid.DataType[]) {\n  const model = source[pIndex];\n  const collapseValue = model[PSEUDO_GROUP_ITEM_VALUE];\n  const trimmed: Record<number, boolean> = {};\n  let i = pIndex + 1;\n  const total = source.length;\n  while (i < total) {\n    const currentModel = source[i];\n    if (isGrouping(currentModel)) {\n      const currentValue = currentModel[PSEUDO_GROUP_ITEM_VALUE];\n      if (!currentValue.length || !currentValue.startsWith(collapseValue + ',')) {\n        break;\n      }\n      currentModel[GROUP_EXPANDED] = false;\n    }\n    trimmed[i++] = true;\n  }\n  model[GROUP_EXPANDED] = false;\n  return { trimmed };\n}\n\n/**\n *\n * @param pIndex - physical index\n * @param vIndex - virtual index, need to update item collection\n * @param source - data source\n * @param rowItemsIndexes - rgRow indexes\n */\nexport function doExpand(vIndex: number, source: RevoGrid.DataType[], rowItemsIndexes: number[]) {\n  const physicalIndex = rowItemsIndexes[vIndex];\n  const model = source[physicalIndex];\n  const currentGroup = getParsedGroup(model[PSEUDO_GROUP_ITEM_ID]);\n  const trimmed: Record<number, boolean> = {};\n\n  // no group found\n  if (!currentGroup) {\n    return { trimmed };\n  }\n\n  const groupItems: number[] = [];\n  model[GROUP_EXPANDED] = true;\n  let i = physicalIndex + 1;\n  const total = source.length;\n  let groupLevelOnly = 0;\n\n  // go through all rows\n  while (i < total) {\n    const currentModel = source[i];\n    const isGroup = isGrouping(currentModel);\n    // group found\n    if (isGroup) {\n      if (!isSameGroup(currentGroup, model, currentModel)) {\n        break;\n      } else if (!groupLevelOnly) {\n        // if get group first it's group only level\n        groupLevelOnly = currentModel[GROUP_DEPTH];\n      }\n    }\n    // level 0 or same depth\n    if (!groupLevelOnly || (isGroup && groupLevelOnly === currentModel[GROUP_DEPTH])) {\n      trimmed[i] = false;\n      groupItems.push(i);\n    }\n    i++;\n  }\n  const result: {\n    trimmed: Record<number, boolean>;\n    items?: number[];\n  } = {\n    trimmed,\n  };\n  if (groupItems.length) {\n    const items = [...rowItemsIndexes];\n    items.splice(vIndex + 1, 0, ...groupItems);\n    result.items = items;\n  }\n  return result;\n}\n","import { gatherTrimmedItems, Trimmed, TrimmedEntity } from '../../store/dataSource/trimmed.plugin';\n\nexport const TRIMMED_GROUPING = 'grouping';\n\n/**\n * Prepare trimming updated indexes for grouping\n * @param initiallyTrimed\n * @param firstLevelMap\n * @param secondLevelMap\n */\nexport function processDoubleConversionTrimmed(initiallyTrimed: Trimmed, firstLevelMap: Record<number, number>, secondLevelMap?: Record<number, number>) {\n  const trimemedOptionsToUpgrade: Trimmed = {};\n  /**\n   * go through all groups except grouping\n   */\n  for (let type in initiallyTrimed) {\n    if (type === TRIMMED_GROUPING) {\n      continue;\n    }\n    const items = initiallyTrimed[type];\n    const newItems: TrimmedEntity = {};\n\n    for (let initialIndex in items) {\n      /**\n       * if item exists we find it in collection\n       * we support 2 level of conversions\n       */\n      let newConversionIndex = firstLevelMap[initialIndex];\n      if (secondLevelMap) {\n        newConversionIndex = secondLevelMap[newConversionIndex];\n      }\n\n      /**\n       * if item was trimmed previously\n       * trimming makes sense to apply\n       */\n      if (items[initialIndex]) {\n        newItems[newConversionIndex] = true;\n        /**\n         * If changes present apply changes to new source\n         */\n        if (newConversionIndex !== parseInt(initialIndex, 10)) {\n          trimemedOptionsToUpgrade[type] = newItems;\n        }\n      }\n    }\n  }\n  return trimemedOptionsToUpgrade;\n}\n\nexport function filterOutEmptyGroups(allTrimmedGroups: Trimmed, childrenByGroup: Record<number, number[]> = {}) {\n  const trimmedGroup: TrimmedEntity = {};\n  const allTrimmed = gatherTrimmedItems(allTrimmedGroups);\n  // find is groups are filled\n  for (let groupIndex in childrenByGroup) {\n    const hasChidlren = childrenByGroup[groupIndex].filter(childIndex => !allTrimmed[childIndex]).length > 0;\n    if (!hasChidlren) {\n      trimmedGroup[groupIndex] = true;\n    }\n  }\n  return trimmedGroup;\n}\n","import { Edition, RevoGrid } from '../../interfaces';\nimport ColumnDataProvider, { ColumnCollection } from '../../services/column.data.provider';\nimport { DataProvider } from '../../services/data.provider';\nimport { getPhysical, setItems } from '../../store/dataSource/data.store';\nimport { columnTypes } from '../../store/storeTypes';\nimport BasePlugin from '../basePlugin';\nimport { FILTER_TRIMMED_TYPE } from '../filter/filter.plugin';\nimport { TrimmedEntity } from '../../store/dataSource/trimmed.plugin';\nimport { GROUPING_ROW_TYPE, GROUP_EXPANDED, GROUP_EXPAND_EVENT, PSEUDO_GROUP_COLUMN, PSEUDO_GROUP_ITEM_VALUE } from './grouping.const';\nimport { doExpand, doCollapse } from './grouping.row.expand.service';\nimport { BeforeSourceSetEvent, GroupingOptions, OnExpandEvent, SourceGather } from './grouping.row.types';\nimport { ExpandedOptions, gatherGrouping, isGrouping, isGroupingColumn } from './grouping.service';\nimport { processDoubleConversionTrimmed, TRIMMED_GROUPING } from './grouping.trimmed.service';\n\nexport default class GroupingRowPlugin extends BasePlugin {\n  private options: GroupingOptions | undefined;\n\n  get hasProps() {\n    return this.options?.props && this.options?.props?.length;\n  }\n\n  get store() {\n    return this.providers.dataProvider.stores[GROUPING_ROW_TYPE].store;\n  }\n\n  // proxy for items get\n  get rowItems() {\n    return this.store.get('items');\n  }\n\n  get trimmed() {\n    return this.store.get('trimmed');\n  }\n\n  constructor(\n    protected revogrid: HTMLRevoGridElement,\n    protected providers: {\n      dataProvider: DataProvider;\n      columnProvider: ColumnDataProvider;\n    },\n  ) {\n    super(revogrid);\n  }\n\n  // befoce cell focus\n  private onFocus(e: CustomEvent<Edition.BeforeSaveDataDetails>) {\n    if (isGrouping(e.detail.model)) {\n      e.preventDefault();\n    }\n  }\n\n  // expand event triggered\n  private onExpand({ virtualIndex }: OnExpandEvent) {\n    const { source } = this.getSource();\n    let newTrimmed = this.trimmed[TRIMMED_GROUPING];\n\n    let i = getPhysical(this.store, virtualIndex);\n    const model = source[i];\n    const prevExpanded = model[GROUP_EXPANDED];\n    if (!prevExpanded) {\n      const { trimmed, items } = doExpand(virtualIndex, source, this.rowItems);\n      newTrimmed = { ...newTrimmed, ...trimmed };\n      if (items) {\n        setItems(this.store, items);\n      }\n    } else {\n      const { trimmed } = doCollapse(i, source);\n      newTrimmed = { ...newTrimmed, ...trimmed };\n      this.revogrid.clearFocus();\n    }\n\n    this.store.set('source', source);\n    this.revogrid.addTrimmed(newTrimmed, TRIMMED_GROUPING);\n  }\n\n  // get source based on proxy item collection to preserve rgRow order\n  private getSource(withoutGrouping = false) {\n    const source = this.store.get('source');\n    const items = this.store.get('proxyItems');\n    let index = 0;\n    // order important here, expected parent is first, then others\n    return items.reduce(\n      (result: SourceGather, i) => {\n        const model = source[i];\n        if (!withoutGrouping) {\n          result.source.push(model);\n          return result;\n        }\n\n        // grouping filter\n        if (!isGrouping(model)) {\n          result.source.push(model);\n          result.oldNewIndexes[i] = index;\n          index++;\n        } else {\n          if (model[GROUP_EXPANDED]) {\n            result.prevExpanded[model[PSEUDO_GROUP_ITEM_VALUE]] = true;\n          }\n        }\n        return result;\n      },\n      {\n        source: [],\n        prevExpanded: {},\n        oldNewIndexes: {},\n      },\n    );\n  }\n\n  private setColumnGrouping(cols?: RevoGrid.ColumnRegular[]) {\n    // if 0 column as holder\n    if (cols?.length) {\n      cols[0][PSEUDO_GROUP_COLUMN] = true;\n      return true;\n    }\n    return false;\n  }\n\n  private setColumns({ columns }: ColumnCollection) {\n    for (let type of columnTypes) {\n      if (this.setColumnGrouping(columns[type])) {\n        break;\n      }\n    }\n  }\n\n  // evaluate drag between groups\n  private onDrag(e: CustomEvent<{ from: number; to: number }>) {\n    const { from, to } = e.detail;\n    const isDown = to - from >= 0;\n    const { source } = this.getSource();\n    const items = this.rowItems;\n    let i = isDown ? from : to;\n    const end = isDown ? to : from;\n    for (; i < end; i++) {\n      const model = source[items[i]];\n      const isGroup = isGrouping(model);\n      if (isGroup) {\n        e.preventDefault();\n        return;\n      }\n    }\n  }\n\n  private beforeTrimmedApply(trimmed: Record<number, boolean>, type: string) {\n    /** Before filter apply remove grouping filtering */\n    if (type === FILTER_TRIMMED_TYPE) {\n      const source = this.store.get('source');\n      for (let index in trimmed) {\n        if (trimmed[index] && isGrouping(source[index])) {\n          trimmed[index] = false;\n        }\n      }\n    }\n  }\n\n  // subscribe to grid events to process them accordingly\n  private subscribe() {\n    /** if grouping present and new data source arrived */\n    this.addEventListener('beforesourceset', ({ detail }: CustomEvent<BeforeSourceSetEvent>) => this.onDataSet(detail));\n    this.addEventListener('beforecolumnsset', ({ detail }: CustomEvent<ColumnCollection>) => this.setColumns(detail));\n\n    /**\n     * filter applied need to clear grouping and apply again\n     * based on new results can be new grouping\n     */\n    this.addEventListener('beforetrimmed', ({ detail: { trimmed, trimmedType } }) => this.beforeTrimmedApply(trimmed, trimmedType));\n    /**\n     * sorting applied need to clear grouping and apply again\n     * based on new results whole grouping order will changed\n     */\n    this.addEventListener('afterSortingApply', () => this.doSourceUpdate({ ...this.options }));\n\n    /**\n     * Apply logic for focus inside of grouping\n     * We can't focus on grouping rows, navigation only inside of groups for now\n     */\n    this.addEventListener('beforecellfocus', e => this.onFocus(e));\n    /**\n     * Prevent rgRow drag outside the group\n     */\n    this.addEventListener('roworderchanged', e => this.onDrag(e));\n\n    /**\n     * When grouping expand icon was clicked\n     */\n    this.addEventListener(GROUP_EXPAND_EVENT, ({ detail }: CustomEvent<OnExpandEvent>) => this.onExpand(detail));\n  }\n\n  /**\n   * Starts global source update with group clearing and applying new one\n   * Initiated when need to reapply grouping\n   */\n  private doSourceUpdate(options?: ExpandedOptions) {\n    if (!this.hasProps) {\n      return;\n    }\n    /**\n     * Get source without grouping\n     * @param newOldIndexMap - provides us mapping with new indexes vs old indexes, we would use it for trimmed mapping\n     */\n    const { source, prevExpanded, oldNewIndexes } = this.getSource(true);\n    /**\n     * Group again\n     * @param oldNewIndexMap - provides us mapping with new indexes vs old indexes\n     */\n    const { sourceWithGroups, depth, trimmed, oldNewIndexMap, childrenByGroup } = gatherGrouping(\n      source,\n      this.options?.props || [],\n      {\n        prevExpanded,\n        ...options,\n      },\n    );\n\n    // setup source\n    this.providers.dataProvider.setData(\n      sourceWithGroups,\n      GROUPING_ROW_TYPE,\n      { depth, customRenderer: options?.groupLabelTemplate },\n      true,\n    );\n    this.updateTrimmed(trimmed, childrenByGroup, oldNewIndexes, oldNewIndexMap);\n  }\n\n  /**\n   * Apply grouping on data set\n   * Clear grouping from source\n   * If source came from other plugin\n   */\n  private onDataSet(data: BeforeSourceSetEvent) {\n    if (!this.hasProps || !data?.source || !data.source.length) {\n      return;\n    }\n    const source = data.source.filter(s => !isGrouping(s));\n    const expanded = this.revogrid.grouping || {};\n    const { sourceWithGroups, depth, trimmed, oldNewIndexMap, childrenByGroup } = gatherGrouping(\n      source,\n      this.options?.props || [],\n      {\n        ...(expanded || {}),\n      },\n    );\n    data.source = sourceWithGroups;\n    this.providers.dataProvider.setGrouping({ depth });\n    this.updateTrimmed(trimmed, childrenByGroup, oldNewIndexMap);\n  }\n\n  // apply grouping\n  setGrouping(options: GroupingOptions) {\n    // unsubscribe from all events when group applied\n    this.clearSubscriptions();\n    this.options = options;\n    // clear props, no grouping exists\n    if (!options.props || !Object.keys(options.props).length) {\n      this.clearGrouping();\n      return;\n    }\n    // props exist and source inited\n    const { source } = this.getSource();\n    if (source.length) {\n      this.doSourceUpdate({ ...options });\n    }\n    // props exist and columns inited\n    for (let t of columnTypes) {\n      if (this.setColumnGrouping(this.providers.columnProvider.getColumns(t))) {\n        this.providers.columnProvider.refreshByType(t);\n        break;\n      }\n    }\n\n    // if has any grouping subscribe to events again\n    this.subscribe();\n  }\n\n  // clear grouping\n  clearGrouping() {\n    // clear columns\n    columnTypes.forEach(t => {\n      const cols = this.providers.columnProvider.getColumns(t);\n      let deleted = false;\n      cols.forEach(c => {\n        if (isGroupingColumn(c)) {\n          delete c[PSEUDO_GROUP_COLUMN];\n          deleted = true;\n        }\n      });\n      // if column store had grouping clear and refresh\n      if (deleted) {\n        this.providers.columnProvider.refreshByType(t);\n      }\n    });\n    // clear rows\n    const { source, oldNewIndexes } = this.getSource(true);\n    this.providers.dataProvider.setData(source, GROUPING_ROW_TYPE, undefined, true);\n    this.updateTrimmed(undefined, undefined, oldNewIndexes);\n  }\n\n  private updateTrimmed(\n    trimmedGroup: TrimmedEntity = {},\n    _childrenByGroup: Record<number, number[]> = {},\n    firstLevelMap: Record<number, number>,\n    secondLevelMap?: Record<number, number>,\n  ) {\n    // map previously trimmed data\n    const trimemedOptionsToUpgrade = processDoubleConversionTrimmed(this.trimmed, firstLevelMap, secondLevelMap);\n    for (let type in trimemedOptionsToUpgrade) {\n      this.revogrid.addTrimmed(trimemedOptionsToUpgrade[type], type);\n    }\n\n    // const emptyGroups = this.filterOutEmptyGroups(trimemedOptionsToUpgrade, childrenByGroup);\n\n    // setup trimmed data for grouping\n    this.revogrid.addTrimmed({ ...trimmedGroup }, TRIMMED_GROUPING);\n  }\n}\n","import { h, VNode } from '@stencil/core';\nimport { RevoGrid, Selection } from '../../interfaces';\n\ntype Props = { ref: { (e: OrdererService): void } };\n\n/**\n * Draw drag\n */\nexport class OrdererService {\n  private parentY: number = 0;\n  el!: HTMLElement;\n  rgRow!: HTMLElement;\n  text!: HTMLElement;\n  draggable!: HTMLElement;\n\n  start(parent: HTMLElement, { pos, text, event }: { pos: RevoGrid.PositionItem; text: string; event: MouseEvent }): void {\n    const { top } = parent.getBoundingClientRect();\n    this.parentY = top;\n    if (this.text) {\n      this.text.innerText = text;\n    }\n    this.move(pos);\n    this.moveTip({ x: event.x, y: event.y });\n    this.el?.classList.remove('hidden');\n  }\n  end(): void {\n    this.el?.classList.add('hidden');\n  }\n  move(pos: RevoGrid.PositionItem): void {\n    this.moveElement(pos.end - this.parentY);\n  }\n  moveTip({ x, y }: Selection.Cell): void {\n    if (!this.draggable) {\n      return;\n    }\n    this.draggable.style.left = `${x}px`;\n    this.draggable.style.top = `${y}px`;\n  }\n\n  private moveElement(y: number): void {\n    if (!this.rgRow) {\n      return;\n    }\n    this.rgRow.style.transform = `translateY(${y}px)`;\n  }\n}\n\nconst OrderRenderer = ({ ref }: Props): VNode[] => {\n  const service = new OrdererService();\n  ref(service);\n  return (\n    <div class=\"draggable-wrapper hidden\" ref={e => (service.el = e)}>\n      <div class=\"draggable\" ref={el => (service.draggable = el)}>\n        <span class=\"revo-alt-icon\" />\n        <span ref={e => (service.text = e)} />\n      </div>\n      <div class=\"drag-position\" ref={e => (service.rgRow = e)} />\n    </div>\n  );\n};\nexport default OrderRenderer;\n","import { h, VNode } from '@stencil/core';\nimport { RevoGrid } from '../../interfaces';\nimport { DimensionStores } from '../../services/dimension.provider';\nimport { ViewportStores } from '../../services/viewport.provider';\nimport OrderRenderer, { OrdererService } from '../order/orderRenderer';\n\nexport interface ElementScroll {\n  changeScroll?(e: RevoGrid.ViewPortScrollEvent): Promise<RevoGrid.ViewPortScrollEvent>;\n  setScroll(e: RevoGrid.ViewPortScrollEvent): Promise<void>;\n}\n\ntype Props = {\n  viewports: ViewportStores;\n  dimensions: DimensionStores;\n  orderRef(e: OrdererService): void;\n  registerElement(el: ElementScroll | null, key: string): void;\n  onScroll(e: RevoGrid.ViewPortScrollEvent, key?: RevoGrid.DimensionColPin | string): void;\n  nakedClick(e: MouseEvent): void;\n};\n\nexport const RevoViewPort = ({ viewports, dimensions, orderRef, nakedClick, registerElement, onScroll }: Props, children: VNode[]) => {\n  const viewPortClick = (e: MouseEvent, el?: HTMLElement) => {\n    if (el === e.target) {\n      nakedClick(e);\n    }\n  };\n\n  let el: HTMLElement;\n  const typeRow = 'rgRow';\n  const typeCol = 'rgCol';\n  return [\n    <div class=\"main-viewport\" ref={e => (el = e)} onClick={e => viewPortClick(e, el)}>\n      <div class=\"viewports\">\n        {children}\n        <revogr-scroll-virtual\n          class=\"vertical\"\n          dimension={ typeRow }\n          viewportStore={viewports[typeRow].store}\n          dimensionStore={dimensions[typeRow].store}\n          ref={el => registerElement(el, 'rowScroll')}\n          onScrollVirtual={e => onScroll(e.detail)}\n        />\n        <OrderRenderer ref={orderRef} />\n      </div>\n    </div>,\n    <revogr-scroll-virtual\n      class=\"horizontal\"\n      dimension={ typeCol }\n      viewportStore={viewports[typeCol].store}\n      dimensionStore={dimensions[typeCol].store}\n      ref={el => registerElement(el, 'colScroll')}\n      onScrollVirtual={e => onScroll(e.detail)}\n    />,\n  ];\n};\n","import { Observable, RevoGrid, Selection } from '../../interfaces';\nimport DimensionProvider from '../../services/dimension.provider';\nimport SelectionStoreConnector, { EMPTY_INDEX } from '../../services/selection.store.connector';\nimport ViewportProvider from '../../services/viewport.provider';\nimport { DataSourceState, getSourceItem, getVisibleSourceItem } from '../../store/dataSource/data.store';\nimport { columnTypes, rowTypes } from '../../store/storeTypes';\nimport { UUID } from '../../utils/consts';\nimport { OrdererService } from '../order/orderRenderer';\nimport GridScrollingService from './viewport.scrolling.service';\nimport { CONTENT_SLOT, FOOTER_SLOT, getLastCell, HEADER_SLOT } from './viewport.helpers';\nimport { HeaderProperties, SlotType, ViewportColumn, ViewportData, ViewportProps } from './viewport.interfaces';\nimport ColumnDataProvider from '../../services/column.data.provider';\nimport { DataProvider } from '../../services/data.provider';\nimport { reduce } from 'lodash';\n\nexport type ResizeDetails = { [index: number]: RevoGrid.ColumnRegular };\ntype Config = {\n  columnProvider: ColumnDataProvider;\n  dataProvider: DataProvider;\n  dimensionProvider: DimensionProvider;\n  viewportProvider: ViewportProvider;\n  uuid: string | null;\n  scrollingService: GridScrollingService;\n  orderService: OrdererService;\n  selectionStoreConnector: SelectionStoreConnector;\n\n  resize(r: ResizeDetails): void;\n};\n\nexport type FocusedData = {\n  model: any;\n  cell: Selection.Cell;\n  colType: RevoGrid.DimensionCols;\n  rowType: RevoGrid.DimensionRows;\n  column?: RevoGrid.ColumnRegular;\n};\n\nexport default class ViewportService {\n  readonly columns: ViewportProps[];\n  constructor(private sv: Config, contentHeight: number) {\n    this.sv.selectionStoreConnector?.beforeUpdate();\n    this.columns = this.getViewportColumnData(contentHeight);\n    this.sv.scrollingService?.unregister();\n  }\n\n  private onColumnResize(\n    type: RevoGrid.DimensionCols,\n    { detail }: CustomEvent<RevoGrid.ViewSettingSizeProp>,\n    store: Observable<DataSourceState<RevoGrid.ColumnRegular, RevoGrid.DimensionCols>>,\n  ) {\n    this.sv.dimensionProvider?.setCustomSizes(type, detail, true);\n    const changedItems = reduce(\n      detail || {},\n      (r: ResizeDetails, size, i) => {\n        const index = parseInt(i, 10);\n        const item = getSourceItem(store, index);\n        if (item) {\n          r[index] = { ...item, size };\n        }\n        return r;\n      },\n      {},\n    );\n    this.sv.resize(changedItems);\n  }\n\n  /**\n   * Transform data from stores and apply it to different components\n   * Handle columns\n   */\n  private getViewportColumnData(contentHeight: number): ViewportProps[] {\n    const columns: ViewportProps[] = [];\n    let x = 0; // we increase x only if column present\n    columnTypes.forEach(val => {\n      const colStore = this.sv.columnProvider.stores[val].store;\n      // only columns that have data show\n      if (!colStore.get('items').length) {\n        return;\n      }\n      const column: ViewportColumn = {\n        colType: val,\n        position: { x, y: 1 },\n\n        contentHeight,\n        fixWidth: val !== 'rgCol',\n        uuid: `${this.sv.uuid}-${x}`,\n\n        viewports: this.sv.viewportProvider.stores,\n        dimensions: this.sv.dimensionProvider.stores,\n        rowStores: this.sv.dataProvider.stores,\n\n        colStore,\n        onHeaderresize: e => this.onColumnResize(val, e, colStore),\n      };\n      if (val === 'rgCol') {\n        column.onResizeViewport = (e: CustomEvent<RevoGrid.ViewPortResizeEvent>) => this.sv.viewportProvider?.setViewport(e.detail.dimension, { virtualSize: e.detail.size });\n      }\n      const colData = this.gatherColumnData(column);\n      const columnSelectionStore = this.registerCol(colData.position.x, val);\n\n      // render per each column data collections vertically\n      const dataPorts = this.dataViewPort(column).reduce<ViewportData[]>((r, rgRow) => {\n        // register selection store for Segment\n        const segmentSelection = this.registerSegment(rgRow.position);\n        segmentSelection.setLastCell(rgRow.lastCell);\n\n        // register selection store for Row\n        const rowSelectionStore = this.registerRow(rgRow.position.y, rgRow.type);\n        const rowDef: ViewportData = {\n          ...rgRow,\n          rowSelectionStore,\n          segmentSelectionStore: segmentSelection.store,\n          ref: (e: Element) => this.sv.selectionStoreConnector.registerSection(e),\n          onSetRange: e => {\n            segmentSelection.setRangeArea(e.detail);\n          },\n          onSetTempRange: e => {\n            segmentSelection.setTempArea(e.detail);\n          },\n          onFocusCell: e => {\n            // todo: multi focus\n            segmentSelection.clearFocus();\n            this.sv.selectionStoreConnector.focus(segmentSelection, e.detail);\n          },\n        };\n        r.push(rowDef);\n        return r;\n      }, []);\n      columns.push({\n        ...colData,\n        columnSelectionStore,\n        dataPorts,\n      });\n      x++;\n    });\n    return columns;\n  }\n\n  /** register selection store for Segment */\n  private registerSegment(position: Selection.Cell) {\n    return this.sv.selectionStoreConnector.register(position);\n  }\n\n  /** register selection store for Row */\n  private registerRow(y: number, type: RevoGrid.DimensionRows) {\n    return this.sv.selectionStoreConnector.registerRow(y, type).store;\n  }\n\n  /** register selection store for Column */\n  private registerCol(x: number, type: RevoGrid.DimensionCols) {\n    return this.sv.selectionStoreConnector.registerColumn(x, type).store;\n  }\n\n  /** Collect Column data */\n  private gatherColumnData(data: ViewportColumn) {\n    const parent = data.uuid;\n    const realSize = data.dimensions[data.colType].store.get('realSize');\n    const prop: Record<string, any> = {\n      contentWidth: realSize,\n      class: data.colType,\n      [`${UUID}`]: data.uuid,\n      contentHeight: data.contentHeight,\n      key: data.colType,\n      onResizeViewport: data.onResizeViewport,\n    };\n    if (data.fixWidth) {\n      prop.style = { minWidth: `${realSize}px` };\n    }\n    const headerProp: HeaderProperties = {\n      parent,\n      colData: getVisibleSourceItem(data.colStore),\n      dimensionCol: data.dimensions[data.colType].store,\n      groups: data.colStore.get('groups'),\n      groupingDepth: data.colStore.get('groupingDepth'),\n      resizeHandler: data.colType === 'colPinEnd' ? ['l'] : undefined,\n      onHeaderresize: data.onHeaderresize,\n    };\n\n    return {\n      prop,\n      type: data.colType,\n      position: data.position,\n      headerProp,\n      parent,\n      viewportCol: data.viewports[data.colType].store,\n    };\n  }\n\n  /** Collect Row data */\n  private dataViewPort(data: ViewportColumn) {\n    const slots: { [key in RevoGrid.DimensionRows]: SlotType } = {\n      rowPinStart: HEADER_SLOT,\n      rgRow: CONTENT_SLOT,\n      rowPinEnd: FOOTER_SLOT,\n    };\n\n    // y position for selection\n    let y = 0;\n    return rowTypes.reduce((r, type) => {\n      // filter out empty sources, we still need to return source to keep slot working\n      const isPresent = data.viewports[type].store.get('realCount') || type === 'rgRow';\n      const rgCol = {\n        ...data,\n        position: { ...data.position, y: isPresent ? y : EMPTY_INDEX },\n      };\n      r.push(\n        this.dataPartition(\n          rgCol,\n          type,\n          slots[type],\n          type !== 'rgRow', // is fixed\n        ),\n      );\n      if (isPresent) {\n        y++;\n      }\n      return r;\n    }, []);\n  }\n\n  private dataPartition(data: ViewportColumn, type: RevoGrid.DimensionRows, slot: SlotType, fixed?: boolean) {\n    return {\n      colData: data.colStore,\n      viewportCol: data.viewports[data.colType].store,\n      viewportRow: data.viewports[type].store,\n      lastCell: getLastCell(data, type),\n      slot,\n      type,\n      canDrag: !fixed,\n      position: data.position,\n      uuid: `${data.uuid}-${data.position.x}-${data.position.y}`,\n      dataStore: data.rowStores[type].store,\n      dimensionCol: data.dimensions[data.colType].store,\n      dimensionRow: data.dimensions[type].store,\n      style: fixed ? { height: `${data.dimensions[type].store.get('realSize')}px` } : undefined,\n    };\n  }\n\n  scrollToCell(cell: Partial<Selection.Cell>) {\n    for (let key in cell) {\n      const coordinate = cell[key as keyof Selection.Cell];\n      this.sv.scrollingService.scrollService({ dimension: key === 'x' ? 'rgCol' : 'rgRow', coordinate });\n    }\n  }\n\n  /**\n   * Clear current grid focus\n   */\n  clearFocused() {\n    this.sv.selectionStoreConnector.clearAll();\n  }\n\n  clearEdit() {\n    this.sv.selectionStoreConnector.setEdit(false);\n  }\n\n  /**\n   * Collect focused element data\n   */\n  getFocused(): FocusedData | null {\n    const focused = this.sv.selectionStoreConnector.focusedStore;\n    if (!focused) {\n      return null;\n    }\n    // get column data\n    const colType = this.sv.selectionStoreConnector.storesXToType[focused.position.x];\n    const column = this.sv.columnProvider.getColumn(focused.cell.x, colType);\n\n    // get row data\n    const rowType = this.sv.selectionStoreConnector.storesYToType[focused.position.y];\n    const model = this.sv.dataProvider.getModel(focused.cell.y, rowType);\n    return {\n      column,\n      model,\n      cell: focused.cell,\n      colType,\n      rowType,\n    };\n  }\n\n  getStoreCoordinateByType(colType: RevoGrid.DimensionCols, rowType: RevoGrid.DimensionRows) {\n    const stores = this.sv.selectionStoreConnector.storesByType;\n    const storeCoordinate = {\n      x: stores[colType],\n      y: stores[rowType],\n    };\n    return storeCoordinate;\n  }\n\n  setFocus(colType: string, rowType: string, start: Selection.Cell, end: Selection.Cell) {\n    this.sv.selectionStoreConnector?.focusByCell(\n      this.getStoreCoordinateByType(\n        colType as RevoGrid.DimensionCols,\n        rowType as RevoGrid.DimensionRows\n      ), start, end);\n  }\n\n  getSelectedRange(): Selection.RangeArea | null {\n    return this.sv.selectionStoreConnector.selectedRange;\n  }\n\n  setEdit(rowIndex: number, colIndex: number, colType: RevoGrid.DimensionCols, rowType: RevoGrid.DimensionRows) {\n    this.sv.selectionStoreConnector?.setEditByCell(this.getStoreCoordinateByType(colType, rowType), { x: colIndex, y: rowIndex });\n  }\n}\n","export function isMobileDevice() {\n    return /Mobi/i.test(navigator.userAgent) || /Android/i.test(navigator.userAgent) || navigator.maxTouchPoints > 0;\n}\n","import { h, VNode } from '@stencil/core';\nimport { Edition, RevoGrid } from '../../interfaces';\nimport { UUID } from '../../utils/consts';\nimport { ElementScroll } from './viewport';\nimport { DATA_SLOT, HEADER_SLOT } from './viewport.helpers';\nimport { ViewportProps } from './viewport.interfaces';\nimport { isMobileDevice } from '../../utils/mobile';\ntype Props = {\n  editors: Edition.Editors;\n  useClipboard: boolean;\n  applyEditorChangesOnClose: boolean;\n  readonly: boolean;\n  range: boolean;\n  rowClass: string;\n  resize: boolean;\n  columns: ViewportProps[];\n  columnFilter: boolean;\n  additionalData: any;\n  focusTemplate: RevoGrid.FocusTemplateFunc;\n  scrollSection(\n    e: RevoGrid.ViewPortScrollEvent,\n    key?: RevoGrid.DimensionColPin | string,\n  ): void;\n  scrollSectionSilent(\n    e: RevoGrid.ViewPortScrollEvent,\n    key?: RevoGrid.DimensionColPin | string,\n  ): void;\n  onCancelEdit(): void;\n  onEdit(edit: Edition.BeforeEdit): void;\n  onSelectAll(): void;\n  registerElement(el: ElementScroll | null, key: string): void;\n};\n/**\n * The code renders a view port divided into sections.\n * It starts by rendering the pinned start, data, and pinned end sections.\n * Within each section, it renders columns along with their headers, pinned top, center data, and pinned bottom.\n * The code iterates over the columns and their data to generate the view port's HTML structure.\n * Finally, the rendered sections are returned as the result.\n */\nexport const ViewPortSections = ({\n  resize,\n  editors,\n  rowClass,\n  readonly,\n  range,\n  columns,\n  useClipboard,\n  columnFilter,\n  applyEditorChangesOnClose,\n  additionalData,\n  onCancelEdit,\n  registerElement,\n  onEdit,\n  scrollSection,\n  focusTemplate,\n  onSelectAll,\n  scrollSectionSilent,\n}: Props) => {\n  const isMobile = isMobileDevice();\n  const viewPortHtml: VNode[] = [];\n  /** render viewports columns */\n  for (let view of columns) {\n    /** render viewports rows */\n    const headerProperties = {\n      ...view.headerProp,\n      type: view.type,\n      additionalData,\n      viewportCol: view.viewportCol,\n      selectionStore: view.columnSelectionStore,\n      canResize: resize,\n      columnFilter,\n    };\n    const dataViews: HTMLElement[] = [\n      <revogr-header {...headerProperties} slot={HEADER_SLOT} />,\n    ];\n    view.dataPorts.forEach((data, j) => {\n      const key = view.prop.key + (j + 1);\n\n      const dataView = (\n        <revogr-overlay-selection\n          {...data}\n          isMobileDevice={isMobile}\n          selectionStore={data.segmentSelectionStore}\n          onSelectall={() => onSelectAll()}\n          editors={editors}\n          readonly={readonly}\n          range={range}\n          useClipboard={useClipboard}\n          onCancelEdit={() => onCancelEdit()}\n          applyChangesOnClose={applyEditorChangesOnClose}\n          onSetEdit={({ detail }) => onEdit(detail)}\n          additionalData={additionalData}\n          slot={data.slot}\n        >\n          <revogr-data\n            {...data}\n            {...{ [UUID]: data.uuid }}\n            key={key}\n            readonly={readonly}\n            range={range}\n            rowClass={rowClass}\n            rowSelectionStore={data.rowSelectionStore}\n            additionalData={additionalData}\n            slot={DATA_SLOT}\n          >\n            <slot name={`data-${view.type}-${data.type}`} />\n          </revogr-data>\n          <revogr-temp-range\n            selectionStore={data.segmentSelectionStore}\n            dimensionRow={data.dimensionRow}\n            dimensionCol={data.dimensionCol}\n          />\n          <revogr-focus\n            colData={data.colData}\n            dataStore={data.dataStore}\n            focusTemplate={focusTemplate}\n            rowType={data.type}\n            colType={view.type}\n            selectionStore={data.segmentSelectionStore}\n            dimensionRow={data.dimensionRow}\n            dimensionCol={data.dimensionCol}\n          >\n            <slot name={`focus-${view.type}-${data.type}`} />\n          </revogr-focus>\n        </revogr-overlay-selection>\n      );\n      dataViews.push(dataView);\n    });\n    viewPortHtml.push(\n      <revogr-viewport-scroll\n        {...view.prop}\n        ref={el => registerElement(el, view.prop.key)}\n        onScrollViewport={e => scrollSection(e.detail, view.prop.key)}\n        onSilentScroll={e => scrollSectionSilent(e.detail, view.prop.key)}\n      >\n        {dataViews}\n      </revogr-viewport-scroll>,\n    );\n  }\n  return viewPortHtml;\n};\n","import { RevoGrid } from '../../interfaces';\nimport { columnTypes } from '../../store/storeTypes';\n\nexport interface ElementScroll {\n  changeScroll?(e: RevoGrid.ViewPortScrollEvent, silent?: boolean): Promise<RevoGrid.ViewPortScrollEvent>;\n  setScroll(e: RevoGrid.ViewPortScrollEvent): Promise<void>;\n}\nexport type ElementsScroll = { [key: string]: ElementScroll[] };\nexport default class GridScrollingService {\n  private elements: ElementsScroll = {};\n  constructor(private setViewport: (e: RevoGrid.ViewPortScrollEvent) => void) {}\n\n  async scrollService(e: RevoGrid.ViewPortScrollEvent, key?: RevoGrid.DimensionColPin | string) {\n    let newEvent: Promise<RevoGrid.ViewPortScrollEvent>;\n    let event = e;\n    for (let elKey in this.elements) {\n      if (e.dimension === 'rgCol' && elKey === 'headerRow') {\n        continue;\n      // pinned column only\n      } else if (this.isPinnedColumn(key) && e.dimension === 'rgCol') {\n        if (elKey === key || !e.delta) {\n          continue;\n        }\n        for (let el of this.elements[elKey]) {\n          if (el.changeScroll) {\n            newEvent = el.changeScroll(e);\n          }\n        }\n      } else {\n        for (let el of this.elements[elKey]) {\n          await el.setScroll(e);\n        }\n      }\n    }\n    if (newEvent) {\n      event = await newEvent;\n    }\n    this.setViewport(event);\n  }\n\n  /**\n   * Silent scroll update for mobile devices when we have negative scroll top \n   */\n  async scrollSilentService(e: RevoGrid.ViewPortScrollEvent, key?: RevoGrid.DimensionColPin | string) {\n    for (let elKey in this.elements) {\n      // skip same element update\n      if (elKey === key) {\n        continue;\n      }\n      if (columnTypes.includes(key as RevoGrid.DimensionColPin) && (elKey === 'headerRow' || columnTypes.includes(elKey  as RevoGrid.DimensionColPin))) {\n        for (let el of this.elements[elKey]) {\n          await el.changeScroll?.(e, true);\n        }\n        continue;\n      }\n    }\n  }\n\n  private isPinnedColumn(key?: RevoGrid.DimensionColPin | string): key is RevoGrid.DimensionColPin {\n    return ['colPinStart', 'colPinEnd'].indexOf(key) > -1;\n  }\n\n  registerElements(els: ElementsScroll): void {\n    this.elements = els;\n  }\n\n  /**\n   * Register new element for farther scroll support\n   * @param el - can be null if holder removed\n   * @param key - element key\n   */\n  registerElement(el: ElementScroll | null, key: string): void {\n    if (!this.elements[key]) {\n      this.elements[key] = [];\n    }\n    // new element added\n    if (el) {\n      this.elements[key].push(el);\n    } else if (this.elements[key]) {\n      // element removed\n      delete this.elements[key];\n    }\n  }\n\n  unregister(): void {\n    delete this.elements;\n    this.elements = {};\n  }\n}\n","import { each } from 'lodash';\nimport { calculateRowHeaderSize } from '../utils/row-header-utils';\nimport { RevoGrid, RevoPlugin } from '../interfaces';\nimport ColumnDataProvider, { ColumnCollection } from '../services/column.data.provider';\nimport { DataProvider } from '../services/data.provider';\nimport DimensionProvider, { ColumnItems } from '../services/dimension.provider';\nimport { getScrollbarWidth } from '../utils';\nimport BasePlugin from './basePlugin';\ntype Providers = {\n  dataProvider: DataProvider;\n  dimensionProvider: DimensionProvider;\n  columnProvider: ColumnDataProvider;\n};\n/**\n * This plugin serves to recalculate columns initially\n * Base on empty space if there is any\n * Currently plugin supports only increasing last column\n */\ntype ScrollChange = {\n  type: RevoGrid.DimensionType;\n  hasScroll: boolean;\n};\ntype StretchedData = {\n  initialSize: number;\n  size: number;\n  index: number;\n};\n\nexport default class StretchColumn extends BasePlugin {\n  private stretchedColumn: StretchedData | null = null;\n  private readonly scrollSize;\n  constructor(revogrid: HTMLRevoGridElement, protected providers: Providers) {\n    super(revogrid);\n\n    // calculate scroll bar size for current user session\n    this.scrollSize = getScrollbarWidth(document);\n\n    // subscribe to column changes\n    const beforecolumnapplied = ({ detail: { columns } }: CustomEvent<ColumnCollection>) => this.applyStretch(columns);\n    this.addEventListener('beforecolumnapplied', beforecolumnapplied);\n  }\n\n  private setScroll({ type, hasScroll }: ScrollChange) {\n    if (type === 'rgRow' && this.stretchedColumn && this.stretchedColumn?.initialSize === this.stretchedColumn.size) {\n      if (hasScroll) {\n        this.stretchedColumn.size -= this.scrollSize;\n        this.apply();\n        this.dropChanges();\n      }\n    }\n  }\n\n  private activateChanges() {\n    const setScroll = ({ detail }: CustomEvent<ScrollChange>) => this.setScroll(detail);\n    this.addEventListener('scrollchange', setScroll);\n  }\n\n  private dropChanges() {\n    this.stretchedColumn = null;\n    this.removeEventListener('scrollchange');\n  }\n\n  private apply() {\n    if (!this.stretchedColumn) {\n      return;\n    }\n    const type: RevoGrid.DimensionCols = 'rgCol';\n    const sizes = this.providers.dimensionProvider.stores[type].store.get('sizes');\n    this.providers.dimensionProvider.setCustomSizes(\n      type,\n      {\n        ...sizes,\n        [this.stretchedColumn.index]: this.stretchedColumn.size\n      }, true\n    );\n  }\n\n  /**\n   * Apply stretch changes\n   */\n  applyStretch(columns: ColumnItems) {\n    // unsubscribe from all events\n    this.dropChanges();\n    // calculate grid size\n    let sizeDifference = this.revogrid.clientWidth - 1;\n    each(columns, (_, type: RevoGrid.DimensionCols) => {\n      const realSize = this.providers.dimensionProvider.stores[type].store.get('realSize');\n      sizeDifference -= realSize;\n    });\n    if (this.revogrid.rowHeaders) {\n      const itemsLength = this.providers.dataProvider.stores.rgRow.store.get('source').length;\n      const header = this.revogrid.rowHeaders;\n      const rowHeaderSize = calculateRowHeaderSize(itemsLength, typeof header === 'object' ? header : undefined);\n      if (rowHeaderSize) {\n        sizeDifference -= rowHeaderSize;\n      }\n    }\n    if (sizeDifference > 0) {\n      // currently plugin accepts last column only\n      const index = columns.rgCol.length - 1;\n      const last = columns.rgCol[index];\n      /**\n       * has column\n       * no auto size applied\n       * size for column shouldn't be defined\n       */\n      const colSize = last?.size || this.revogrid.colSize || 0;\n      const size = sizeDifference + colSize - 1;\n\n      if (last && !last.autoSize && colSize < size) {\n        this.stretchedColumn = {\n          initialSize: size,\n          index,\n          size,\n        };\n        this.apply();\n        this.activateChanges();\n      }\n    }\n  }\n}\n\n/**\n * Check plugin type is Stretch\n */\nexport function isStretchPlugin(plugin: RevoPlugin.Plugin | StretchColumn): plugin is StretchColumn {\n  return !!(plugin as StretchColumn).applyStretch;\n}\n","import { RevoGrid } from '../../interfaces';\nimport reduce from 'lodash/reduce';\ntype Result = Partial<{\n  [T in RevoGrid.DimensionRows]: { sizes?: Record<number, number>; };\n}>;\ntype RemoveResult = Partial<{\n  [T in RevoGrid.DimensionRows]: number[];\n}>;\nexport const rowDefinitionByType = (newVal: RevoGrid.RowDefinition[] = []) => {\n  return reduce(newVal, (r: Result, v) => {\n      if (!r[v.type]) {\n        r[v.type] = {};\n      }\n      if (v.size) {\n        if (!r[v.type].sizes) {\n          r[v.type].sizes = {};\n        }\n        r[v.type].sizes[v.index] = v.size;\n      }\n      return r;\n    },\n    {},\n  );\n};\n\nexport const rowDefinitionRemoveByType = (oldVal: RevoGrid.RowDefinition[] = []) => {\n  return reduce(oldVal, (r: RemoveResult, v) => {\n      if (!r[v.type]) {\n        r[v.type] = [];\n      }\n      if (v.size) {\n        r[v.type].push(v.index);\n      }\n      return r;\n    },\n    {},\n  );\n};\n","import { h } from '@stencil/core';\n\nconst COLUMN_DRAG_CLASS = 'column-drag-start';\n\nexport class ColumnOrderHandler {\n  private element?: HTMLDivElement;\n  private autoscrollEl?: HTMLElement;\n  private offset = 0;\n\n  renderAutoscroll(_: MouseEvent, parent: HTMLElement | null) {\n    if (!parent) {\n      return;\n    }\n    this.autoscrollEl = document.createElement('div');\n    this.autoscrollEl.classList.add('drag-auto-scroll-y');\n    parent.appendChild(this.autoscrollEl);\n  }\n\n  autoscroll(pos: number, dataContainerSize: number, direction = 'translateX') {\n    if (!this.autoscrollEl) {\n      return;\n    }\n    const helperOffset = 10;\n    // calculate current y position inside of the grid active holder\n    // 3 - size of element + border\n    const maxScroll = Math.min(pos + helperOffset, dataContainerSize - 3);\n\n    this.autoscrollEl.style.transform = `${direction}(${maxScroll}px)`;\n    this.autoscrollEl.scrollIntoView({\n      block: 'nearest',\n      inline: 'nearest',\n    });\n  }\n\n  start(e: MouseEvent, { dataEl, gridRect, scrollEl, gridEl }: {\n    dataEl: HTMLElement;\n    gridRect: DOMRect;\n    scrollEl: Element;\n    gridEl: Element;\n  }, dir: 'top' | 'left'  = 'left') {\n    gridEl.classList.add(COLUMN_DRAG_CLASS);\n    const scrollContainerRect = scrollEl.getBoundingClientRect();\n    if (scrollContainerRect) {\n      this.offset = scrollContainerRect[dir] - gridRect[dir];\n    }\n    this.renderAutoscroll(e, dataEl);\n  }\n\n  stop(gridEl: Element) {\n    gridEl.classList.remove(COLUMN_DRAG_CLASS);\n    if (this.element) {\n      this.element.hidden = true;\n    }\n    this.offset = 0;\n    this.autoscrollEl?.remove();\n    this.autoscrollEl = undefined;\n  }\n\n  showHandler(pos: number, size: number, direction = 'translateX') {\n    if (!this.element) {\n      return;\n    }\n    // do not allow overcross top of the scrollable area, header excluded\n    if (this.offset) {\n      pos = Math.max(pos, this.offset);\n    }\n    // can not be bigger then grid end\n    pos = Math.min(pos, size);\n    this.element.style.transform = `${direction}(${pos}px)`;\n    this.element.hidden = false;\n  }\n\n  render() {\n    return <div class=\"drag-position-y\" hidden ref={(el?: HTMLDivElement) => (this.element = el)}></div>;\n  }\n}\n","/**\n * Plugin for column manual move\n */\nimport debounce from 'lodash/debounce';\nimport each from 'lodash/each';\nimport { RevoGrid } from '../../interfaces';\nimport ColumnDataProvider from '../../services/column.data.provider';\nimport { DataProvider } from '../../services/data.provider';\nimport DimensionProvider from '../../services/dimension.provider';\nimport SelectionStoreConnector from '../../services/selection.store.connector';\nimport ViewportProvider from '../../services/viewport.provider';\nimport { getItemByPosition } from '../../store/dimension/dimension.helpers';\nimport BasePlugin from '../basePlugin';\nimport { ColumnOrderHandler } from './columnOrderHandler';\nimport { dispatch } from '../dispatcher';\nimport { isColGrouping } from '../groupingColumn/grouping.col.plugin';\n\nconst COLUMN_CLICK = 'column-click';\nconst MOVE = 'column-mouse-move';\nconst DRAG_END = 'column-drag-end';\nconst BEFORE_DRAG_END = 'before-column-drag-end';\n\n// use this event subscription to drop D&D for particular columns\nconst DRAG_START = 'column-drag-start';\n\nexport type DragStartEventDetails = {\n  event: MouseEvent;\n  data: RevoGrid.ColumnDataSchema;\n};\n\nexport type Providers = {\n  data: DataProvider;\n  dimension: DimensionProvider;\n  selection: SelectionStoreConnector;\n  column: ColumnDataProvider;\n  viewport: ViewportProvider;\n};\ntype StaticData = {\n  startPos: number;\n  startItem: RevoGrid.PositionItem;\n  data: RevoGrid.ColumnRegular;\n  dataEl: HTMLElement;\n  scrollEl: Element;\n  gridEl: HTMLElement;\n  cols: RevoGrid.DimensionSettingsState;\n};\n\ntype LocalSubscriptions = Record<string, LocalSubscription>;\ntype LocalSubscription = {\n  target: Element | Document;\n  callback(...params: any[]): void;\n};\nexport type EventData = {\n  elRect: DOMRect;\n  gridRect: DOMRect;\n  scrollOffset: number;\n  type: RevoGrid.DimensionCols;\n};\nexport default class ColumnPlugin extends BasePlugin {\n  private moveFunc = debounce((e: MouseEvent) => this.doMove(e), 5);\n  private staticDragData: StaticData | null = null;\n  private dragData: EventData | null = null;\n  private readonly orderUi: ColumnOrderHandler;\n  protected readonly localSubscriptions: LocalSubscriptions = {};\n  constructor(protected revogrid: HTMLRevoGridElement, private providers: Providers) {\n    super(revogrid);\n    this.orderUi = new ColumnOrderHandler();\n    revogrid.registerVNode([this.orderUi.render()]);\n\n    revogrid.classList.add('column-draggable');\n\n    /** Register events */\n    this.localSubscriptions['mouseleave'] = {\n      target: document,\n      callback: (e: MouseEvent) => this.onMouseOut(e),\n    };\n    this.localSubscriptions['mouseup'] = {\n      target: document,\n      callback: (e: MouseEvent) => this.onMouseUp(e),\n    };\n\n    this.localSubscriptions['mousemove'] = {\n      target: document,\n      callback: (e: MouseEvent) => this.move(e),\n    };\n\n    this.addEventListener(COLUMN_CLICK, ({ detail }) => this.dragStart(detail));\n  }\n\n  dragStart({ event, data }: DragStartEventDetails) {\n    if (event.defaultPrevented) {\n      return;\n    }\n    const { defaultPrevented } = dispatch(this.revogrid, DRAG_START, data);\n    // check if allowed to drag particulat column\n    if (defaultPrevented) {\n      return;\n    }\n    this.clearOrder();\n    const { mouseleave, mouseup, mousemove } = this.localSubscriptions;\n    mouseleave.target.addEventListener('mouseleave', mouseleave.callback);\n    mouseup.target.addEventListener('mouseup', mouseup.callback);\n\n    const dataEl = (event.target as HTMLElement).closest('revogr-header');\n    const scrollEl = (event.target as HTMLElement).closest('revogr-viewport-scroll');\n    if (!dataEl || !scrollEl) {\n      return;\n    }\n\n    if (isColGrouping(data)) {\n      return;\n    }\n\n    const cols = this.getDimension(data.pin || 'rgCol');\n    const gridRect = this.revogrid.getBoundingClientRect();\n    const elRect = dataEl.getBoundingClientRect();\n    const startItem = getItemByPosition(\n      cols,\n      getLeftRelative(event.x, gridRect.left, elRect.left - gridRect.left));\n  \n    this.staticDragData = {\n      startPos: event.x,\n      startItem,\n      data,\n      dataEl,\n      scrollEl,\n      gridEl: this.revogrid,\n      cols,\n    };\n    this.dragData = this.getData(this.staticDragData);\n    mousemove.target.addEventListener('mousemove', mousemove.callback);\n    this.orderUi.start(event, {\n      ...this.dragData,\n      ...this.staticDragData,\n    });\n  }\n\n  doMove(e: MouseEvent) {\n    if (!this.staticDragData) {\n      return;\n    }\n\n    const dragData = (this.dragData = this.getData(this.staticDragData));\n    if (!dragData) {\n      return;\n    }\n    const start = this.staticDragData.startPos;\n    if (Math.abs(start - e.x) > 10) {\n      const x = getLeftRelative(e.x, this.dragData.gridRect.left, this.dragData.scrollOffset);\n      const rgCol = getItemByPosition(this.staticDragData.cols, x);\n      this.orderUi.autoscroll(x, dragData.elRect.width);\n      this.orderUi.showHandler(\n        rgCol.end + dragData.scrollOffset,\n        dragData.gridRect.width\n      );\n    }\n  }\n\n  move(e: MouseEvent): void {\n    dispatch(this.revogrid, MOVE, e);\n    // then do move\n    this.moveFunc(e);\n  }\n  onMouseOut(_: MouseEvent) {\n    this.clearOrder();\n  }\n  onMouseUp(e: MouseEvent) {\n    // apply new positions\n    if (this.dragData) {\n      let relativePos = getLeftRelative(e.x, this.dragData.gridRect.left, this.dragData.scrollOffset);\n      if (relativePos < 0) {\n        relativePos = 0;\n      }\n      const newPosition = getItemByPosition(this.staticDragData.cols, relativePos);\n\n      const store = this.providers.column.stores[this.dragData.type].store;\n      const items = [...store.get('items')];\n\n      // prevent position change if needed\n      const { defaultPrevented: stopDrag } = dispatch(this.revogrid, BEFORE_DRAG_END, {\n        ...this.staticDragData,\n        startPosition: this.staticDragData.startItem,\n        newPosition,\n        newItem: store.get('source')[items[this.staticDragData.startItem.itemIndex]]\n      });\n      if (!stopDrag) {\n        // todo: if move item out of group remove item from group\n        const toMove = items.splice(this.staticDragData.startItem.itemIndex, 1);\n        items.splice(newPosition.itemIndex, 0, ...toMove);\n        store.set('items', items);\n      }\n      dispatch(this.revogrid, DRAG_END, this.dragData);\n    }\n    this.clearOrder();\n  }\n\n  private clearLocalSubscriptions() {\n    each(this.localSubscriptions, ({ target, callback }, key) => target.removeEventListener(key, callback));\n  }\n\n  clearOrder() {\n    this.staticDragData = null;\n    this.dragData = null;\n    this.clearLocalSubscriptions();\n    this.orderUi.stop(this.revogrid);\n  }\n  /**\n   * Clearing subscription\n   */\n  protected clearSubscriptions() {\n    super.clearSubscriptions();\n    this.clearLocalSubscriptions();\n  }\n\n  private getData({\n    gridEl,\n    dataEl,\n    data,\n  }: StaticData): EventData {\n    const gridRect = gridEl.getBoundingClientRect();\n    const elRect = dataEl.getBoundingClientRect();\n    const scrollOffset = elRect.left - gridRect.left;\n    return {\n      elRect,\n      gridRect,\n      type: data.pin || 'rgCol',\n      scrollOffset,\n    };\n  }\n  private getDimension(type: RevoGrid.MultiDimensionType) {\n    return this.providers.dimension.stores[type].getCurrentState();\n  }\n}\n\nexport function getLeftRelative(\n  absoluteX: number,\n  gridPos: number,\n  offset: number\n): number {\n  return absoluteX - gridPos - offset;\n}\n","@import './styles/revo-grid.mixin.scss';\n@import './styles/revo-grid.default.scss';\n@import './styles/revo-grid.material.scss';\n@import './styles/revo-grid.dark.material.scss';\n@import './styles/revo-grid.dark.compact.scss';\n@import './styles/revo-grid.compact.scss';\n\nrevo-grid {\n  display: block;\n  height: 100%;\n  font-family: Helvetica, Arial, Sans-Serif, serif;\n  font-size: 14px;\n  position: relative;\n\n  @include noSelect;\n\n  &.column-draggable.column-drag-start {\n    &, * {\n      &:hover {\n        cursor: grabbing;\n      }\n    }\n  }\n\n  .footer-wrapper,\n  .header-wrapper {\n    width: 100%;\n\n    revogr-data {\n      z-index: 3;\n    }\n  }\n\n  revo-dropdown {\n    width: 100%;\n\n    .rv-dr-root {\n      max-height: 100%;\n    }\n    &.shrink label {\n      opacity: 0;\n    }\n  }\n\n  .viewports {\n    max-height: 100%;\n    display: flex;\n    flex-direction: row;\n    align-items: flex-start;\n    max-width: 100%;\n  }\n\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n\n  .main-viewport {\n    flex-grow: 1;\n    height: 0;\n    display: flex;\n    flex-direction: row;\n  }\n\n  .draggable {\n    $s: 30px;\n    position: fixed;\n    height: $s;\n    line-height: $s;\n    background: #fff;\n    border-radius: 3px;\n    display: block;\n    z-index: 100;\n    margin-top: 5px;\n    margin-right: -20px;\n    box-shadow: 0 4px 20px 0 rgba(black, 0.15);\n    padding-left: 20px;\n    padding-right: 5px;\n\n    &.hidden {\n      display: none;\n    }\n\n    .revo-alt-icon {\n      $alt-icon-color: black;\n      background-color: $alt-icon-color;\n      position: absolute;\n      left: 5px;\n      top: 10px;\n    }\n  }\n\n  .draggable-wrapper {\n    &.hidden {\n      display: none;\n    }\n  }\n\n  .drag-position {\n    position: absolute;\n    left: 0;\n    right: 0;\n    height: 1px;\n    z-index: 2;\n    background: gray;\n    pointer-events: none;\n  }\n\n  .drag-position-y {\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    width: 1px;\n    z-index: 2;\n    background: gray;\n    pointer-events: none;\n  }\n\n  .drag-auto-scroll-y {\n    pointer-events: none;\n    position: absolute;\n    left: 0;\n    top: 0;\n    height: 50px;\n    width: 1px;\n  }\n\n  .clipboard {\n    position: absolute;\n    left: 0;\n    top: 0;\n  }\n\n  revogr-scroll-virtual {\n    position: relative;\n    &.vertical,\n    &.horizontal {\n      z-index: 3;\n    }\n  }\n}\n","import { Component, Prop, h, Watch, Element, Listen, Event, EventEmitter, Method, VNode, State, Host } from '@stencil/core';\nimport each from 'lodash/each';\n\nimport ColumnDataProvider, { ColumnCollection } from '../../services/column.data.provider';\nimport { DataProvider } from '../../services/data.provider';\nimport { getVisibleSourceItem } from '../../store/dataSource/data.store';\nimport DimensionProvider, { DimensionConfig } from '../../services/dimension.provider';\nimport ViewportProvider from '../../services/viewport.provider';\nimport { Edition, Selection, RevoGrid, ThemeSpace, RevoPlugin } from '../../interfaces';\nimport ThemeService from '../../themeManager/themeService';\nimport { timeout } from '../../utils';\nimport AutoSize, { AutoSizeColumnConfig } from '../../plugins/autoSizeColumn';\nimport { columnTypes as columnDimensions, rowTypes as rowDimensions } from '../../store/storeTypes';\nimport FilterPlugin, { ColumnFilterConfig, FilterCollection } from '../../plugins/filter/filter.plugin';\nimport SortingPlugin from '../../plugins/sorting/sorting.plugin';\nimport ExportFilePlugin from '../../plugins/export/export.plugin';\nimport { DataInput } from '../../plugins/export/types';\nimport GroupingRowPlugin from '../../plugins/groupingRow/grouping.row.plugin';\nimport { GroupingOptions } from '../../plugins/groupingRow/grouping.row.types';\nimport { ColumnSource, RowSource } from '../data/columnService';\nimport { RevoViewPort } from './viewport';\nimport ViewportService, { FocusedData } from './viewport.service';\nimport { ViewPortSections } from './viewport.section';\nimport GridScrollingService from './viewport.scrolling.service';\nimport { UUID } from '../../utils/consts';\nimport SelectionStoreConnector from '../../services/selection.store.connector';\nimport { OrdererService } from '../order/orderRenderer';\nimport StretchColumn, { isStretchPlugin } from '../../plugins/stretchPlugin';\nimport { rowDefinitionByType, rowDefinitionRemoveByType } from './grid.helpers';\nimport ColumnPlugin from '../../plugins/moveColumn/columnDragPlugin';\nimport { getFromEvent } from '../../utils/events';\n\n/**\n * Slots\n * @slot data-{column-type}-{row-type}. @example data-rgCol-rgRow - main data slot\n * @slot focus-${view.type}-${data.type}. @example focus-rgCol-rgRow - focus layer for main data\n */\n@Component({\n  tag: 'revo-grid',\n  styleUrl: 'revo-grid-style.scss',\n})\nexport class RevoGridComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /** Excel like show rgRow indexe per rgRow */\n  @Prop() rowHeaders: RevoGrid.RowHeaders | boolean;\n  /**\n   * Defines how many rows/columns should be rendered outside visible area.\n   */\n  @Prop() frameSize: number = 1;\n  /**\n   * Indicates default rgRow size.\n   * By default 0, means theme package size will be applied\n   */\n  @Prop() rowSize: number = 0;\n  /** Indicates default column size. */\n  @Prop() colSize: number = 100;\n  /** When true, user can range selection. */\n  @Prop() range: boolean = false;\n  /** When true, grid in read only mode. */\n  @Prop() readonly: boolean = false;\n  /** When true, columns are resizable. */\n  @Prop() resize: boolean = false;\n  /** When true cell focus appear. */\n  @Prop() canFocus: boolean = true;\n  /** When true enable clipboard. */\n  @Prop() useClipboard: boolean = true;\n  /**\n   * Columns - defines an array of grid columns.\n   * Can be column or grouped column.\n   */\n  @Prop() columns: (RevoGrid.ColumnRegular | RevoGrid.ColumnGrouping)[] = [];\n  /**\n   * Source - defines main data source.\n   * Can be an Object or 2 dimensional array([][]);\n   * Keys/indexes referenced from columns Prop\n   */\n  @Prop() source: RevoGrid.DataType[] = [];\n  /** Pinned top Source: {[T in ColumnProp]: any} - defines pinned top rows data source. */\n  @Prop() pinnedTopSource: RevoGrid.DataType[] = [];\n  /** Pinned bottom Source: {[T in ColumnProp]: any} - defines pinned bottom rows data source. */\n  @Prop() pinnedBottomSource: RevoGrid.DataType[] = [];\n  /** Row properies applied */\n  @Prop() rowDefinitions: RevoGrid.RowDefinition[] = [];\n\n  /** Custom editors register */\n  @Prop() editors: Edition.Editors = {};\n\n  /**\n   * Apply changes typed in editor on editor close except Escape cases\n   * If custom editor in use @method getValue required\n   * Check interfaces.d.ts @EditorBase for more info\n   */\n  @Prop() applyOnClose = false;\n\n  /**\n   * Custom grid plugins\n   * Has to be predefined during first grid init\n   * Every plugin should be inherited from BasePlugin\n   */\n  @Prop() plugins: RevoPlugin.PluginClass[];\n\n  /** Column Types Format\n   *  Every type represent multiple column properties\n   *  Types will be merged but can be replaced with column properties\n   *  Types were made as separate objects to be reusable per multiple columns\n   */\n  @Prop() columnTypes: { [name: string]: RevoGrid.ColumnType } = {};\n\n  /** Theme name */\n  @Prop({ reflect: true, mutable: true }) theme: ThemeSpace.Theme = 'default';\n\n  /**\n   * Row class property\n   * Define this property in rgRow object and this will be mapped as rgRow class\n   */\n  @Prop({ reflect: true }) rowClass: string = '';\n\n  /**\n   * Autosize config\n   * Enable columns autoSize, for more details check @autoSizeColumn plugin\n   * By default disabled, hence operation is not resource efficient\n   * true to enable with default params (double header separator click for autosize)\n   * or provide config\n   */\n  @Prop() autoSizeColumn: boolean | AutoSizeColumnConfig = false;\n\n  /**\n   * Enables filter plugin\n   * Can be boolean\n   * Can be filter collection\n   */\n  @Prop() filter: boolean | ColumnFilterConfig = false;\n\n\n  /**\n   * Apply changes typed in editor on editor close except Escape cases\n   * If custom editor in use @method getValue required\n   * Check interfaces.d.ts @EditorBase for more info\n   */\n   @Prop() focusTemplate: RevoGrid.FocusTemplateFunc;\n\n  /**\n   * Enables column move plugin\n   * Can be boolean\n   */\n   @Prop() canMoveColumns: boolean = false;\n  /**\n   * Trimmed rows\n   * Functionality which allows to hide rows from main data set\n   * @trimmedRows are physical rgRow indexes to hide\n   */\n  @Prop() trimmedRows: Record<number, boolean> = {};\n\n  /**\n   * Enables export plugin\n   * Can be boolean\n   * Can be export options\n   */\n  @Prop() exporting = false;\n\n  /**\n   * Group models by provided properties\n   * Define properties to be groped by\n   */\n  @Prop() grouping: GroupingOptions;\n\n  /**\n   * Defines stretch strategy for columns with @StretchColumn plugin\n   * if there are more space on the right last column size would be increased\n   */\n  @Prop() stretch: boolean | string = true;\n\n\n  /**\n   * Additional data to be passed to plugins\n   */\n  @Prop() additionalData: any = {};\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * contentsizechanged event.\n   * Triggered when new content size applied.\n   * Not including header size\n   * Event is not returning size\n   * To get actual size use getContentSize after event triggered\n   */\n  @Event() contentsizechanged: EventEmitter<RevoGrid.MultiDimensionType>;\n  /**\n   * Before edit event.\n   * Triggered before edit data applied.\n   * Use e.preventDefault() to prevent edit data set and use you own.\n   * Use e.val = {your value} to replace edit result with your own.\n   */\n  @Event() beforeedit: EventEmitter<Edition.BeforeSaveDataDetails>;\n\n  /**\n   * Before range edit event.\n   * Triggered before range data applied, when range selection happened.\n   * Use e.preventDefault() to prevent edit data set and use you own.\n   */\n  @Event() beforerangeedit: EventEmitter<Edition.BeforeRangeSaveDataDetails>;\n\n  /**\n   * After edit.\n   * Triggered after data applied or range changed.\n   */\n  @Event() afteredit: EventEmitter<Edition.BeforeSaveDataDetails | Edition.BeforeRangeSaveDataDetails>;\n\n  /**\n   * Before autofill.\n   * Triggered before autofill applied.\n   * Use e.preventDefault() to prevent edit data apply.\n   */\n  @Event() beforeautofill: EventEmitter<Selection.ChangedRange>;\n\n  /**\n   * Before range apply.\n   * Triggered before range applied.\n   * Use e.preventDefault() to prevent range.\n   */\n  @Event() beforeange: EventEmitter<Selection.ChangedRange>;\n\n  /**\n   * Triggered after focus render finished.\n   * Can be used to access a focus element through @event.target\n   */\n  @Event() afterfocus: EventEmitter<{ model: any; column: RevoGrid.ColumnRegular; }>;\n\n  /**\n   * Before rgRow order apply.\n   * Use e.preventDefault() to prevent rgRow order change.\n   */\n  @Event() roworderchanged: EventEmitter<{ from: number; to: number }>;\n\n  /**\n   * Before source update sorting apply.\n   * Use this event if you intended to prevent sorting on data update.\n   * Use e.preventDefault() to prevent sorting data change during rows source update.\n   */\n  @Event() beforesourcesortingapply: EventEmitter;\n\n  /**\n   * Before sorting apply.\n   * Use e.preventDefault() to prevent sorting data change.\n   */\n  @Event() beforesortingapply: EventEmitter<{\n    column: RevoGrid.ColumnRegular;\n    order: 'desc' | 'asc';\n    additive: boolean;\n  }>;\n  /**\n   * Before sorting event.\n   * Initial sorting triggered, if this event stops no other event called.\n   * Use e.preventDefault() to prevent sorting.\n   */\n  @Event() beforesorting: EventEmitter<{\n    column: RevoGrid.ColumnRegular;\n    order: 'desc' | 'asc';\n    additive: boolean;\n  }>;\n\n  /**\n   * Row order change started.\n   * Use e.preventDefault() to prevent rgRow order change.\n   * Use e.text = 'new name' to change item name on start.\n   */\n  @Event() rowdragstart: EventEmitter<{ pos: RevoGrid.PositionItem; text: string }>;\n\n  /**\n   * On header click.\n   */\n  @Event() headerclick: EventEmitter<RevoGrid.ColumnRegular>;\n\n  /**\n   * Before cell focus changed.\n   * Use e.preventDefault() to prevent cell focus change.\n   */\n  @Event() beforecellfocus: EventEmitter<Edition.BeforeSaveDataDetails>;\n\n  /**\n   * Before grid focus lost happened.\n   * Use e.preventDefault() to prevent cell focus change.\n   */\n  @Event() beforefocuslost: EventEmitter<FocusedData | null>;\n  /**\n   * Before data apply.\n   * You can override data source here\n   */\n  @Event() beforesourceset: EventEmitter<{\n    type: RevoGrid.DimensionRows;\n    source: RevoGrid.DataType[];\n  }>;\n\n   /**\n   * Before data apply.\n   * You can override data source here\n   */\n  @Event({ eventName: 'before-any-source' }) beforeAnySource: EventEmitter<{\n    type: RevoGrid.DimensionRows;\n    source: RevoGrid.DataType[];\n  }>;\n\n  /**  After rows updated */\n  @Event() aftersourceset: EventEmitter<{\n    type: RevoGrid.DimensionRows;\n    source: RevoGrid.DataType[];\n  }>;\n\n  /**\n   * After all rows updated. Use it if you want to track all changes from sources pinned and main\n   */\n  @Event({ eventName: 'after-any-source' }) afterAnySource: EventEmitter<{\n    type: RevoGrid.DimensionRows;\n    source: RevoGrid.DataType[];\n  }>;\n\n  /**  Before column update */\n  @Event() beforecolumnsset: EventEmitter<ColumnCollection>;\n\n  /**  Before column applied but after column set gathered and viewport updated */\n  @Event() beforecolumnapplied: EventEmitter<ColumnCollection>;\n\n  /**  Column updated */\n  @Event() aftercolumnsset: EventEmitter<{\n    columns: ColumnCollection;\n    order: Record<RevoGrid.ColumnProp, 'asc' | 'desc'>;\n  }>;\n\n  /**\n   * Before filter applied to data source\n   * Use e.preventDefault() to prevent cell focus change\n   * Update @collection if you wish to change filters\n   */\n  @Event() beforefilterapply: EventEmitter<{ collection: FilterCollection }>;\n\n  /**\n   * Before filter trimmed values\n   * Use e.preventDefault() to prevent value trimming and filter apply\n   * Update @collection if you wish to change filters\n   * Update @itemsToFilter if you wish to filter indexes of trimming\n   */\n  @Event() beforefiltertrimmed: EventEmitter<{ collection: FilterCollection; itemsToFilter: Record<number, boolean> }>;\n\n  /**\n   * Before trimmed values\n   * Use e.preventDefault() to prevent value trimming\n   * Update @trimmed if you wish to filter indexes of trimming\n   */\n  @Event() beforetrimmed: EventEmitter<{ trimmed: Record<number, boolean>; trimmedType: string; type: string }>;\n\n  /**\n   * Notify trimmed applied\n   */\n  @Event() aftertrimmed: EventEmitter;\n\n  /**\n   * Triggered when view port scrolled\n   */\n  @Event() viewportscroll: EventEmitter<RevoGrid.ViewPortScrollEvent>;\n  /**\n   * Before export\n   * Use e.preventDefault() to prevent export\n   * Replace data in Event in case you want to modify it in export\n   */\n  @Event() beforeexport: EventEmitter<DataInput>;\n\n  /**\n   * Before edit started\n   * Use e.preventDefault() to prevent edit\n   */\n  @Event() beforeeditstart: EventEmitter<Edition.BeforeSaveDataDetails>;\n  /**\n   * After column resize\n   * Get resized columns\n   */\n  @Event() aftercolumnresize: EventEmitter<{ [index: number]: RevoGrid.ColumnRegular }>;\n  /**\n   * Before row definition\n   */\n  @Event() beforerowdefinition: EventEmitter<{ vals: any; oldVals: any; }>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n  /**\n   * Refreshes data viewport.\n   * Can be specific part as rgRow or pinned rgRow or 'all' by default.\n   */\n  @Method() async refresh(type: RevoGrid.DimensionRows | 'all' = 'all') {\n    this.dataProvider.refresh(type);\n  }\n\n  /**  Scrolls view port to specified rgRow index */\n  @Method() async scrollToRow(coordinate: number = 0) {\n    const y = this.dimensionProvider.getViewPortPos({\n      coordinate,\n      dimension: 'rgRow',\n    });\n    await this.scrollToCoordinate({ y });\n  }\n\n  /** Scrolls view port to specified column index */\n  @Method() async scrollToColumnIndex(coordinate: number = 0) {\n    const x = this.dimensionProvider.getViewPortPos({\n      coordinate,\n      dimension: 'rgCol',\n    });\n    await this.scrollToCoordinate({ x });\n  }\n\n  /**  Scrolls view port to specified column prop */\n  @Method() async scrollToColumnProp(prop: RevoGrid.ColumnProp) {\n    const coordinate = this.columnProvider.getColumnIndexByProp(prop, 'rgCol');\n    if (coordinate < 0) {\n      // already on the screen\n      return;\n    }\n    const x = this.dimensionProvider.getViewPortPos({\n      coordinate,\n      dimension: 'rgCol',\n    });\n    await this.scrollToCoordinate({ x });\n  }\n\n  /** Update columns */\n  @Method() async updateColumns(cols: RevoGrid.ColumnRegular[]) {\n    this.columnProvider.updateColumns(cols);\n  }\n\n  /** Add trimmed by type */\n  @Method() async addTrimmed(trimmed: Record<number, boolean>, trimmedType = 'external', type: RevoGrid.DimensionRows = 'rgRow') {\n    const event = this.beforetrimmed.emit({\n      trimmed,\n      trimmedType,\n      type,\n    });\n    if (event.defaultPrevented) {\n      return event;\n    }\n    this.dataProvider.setTrimmed({ [trimmedType]: event.detail.trimmed }, type);\n    this.aftertrimmed.emit();\n    return event;\n  }\n\n  /**  Scrolls view port to coordinate */\n  @Method() async scrollToCoordinate(cell: Partial<Selection.Cell>) {\n    this.viewport?.scrollToCell(cell);\n  }\n\n  /**  Bring cell to edit mode */\n  @Method() async setCellEdit(rgRow: number, prop: RevoGrid.ColumnProp, rowSource: RevoGrid.DimensionRows = 'rgRow') {\n    const rgCol = ColumnDataProvider.getColumnByProp(this.columns, prop);\n    if (!rgCol) {\n      return;\n    }\n    await timeout();\n    const colGroup = rgCol.pin || 'rgCol';\n    this.viewport?.setEdit(rgRow, this.columnProvider.getColumnIndexByProp(prop, colGroup), colGroup, rowSource);\n  }\n\n  /**  Set focus range */\n  @Method() async setCellsFocus(\n    cellStart: Selection.Cell = { x: 0, y: 0 },\n    cellEnd: Selection.Cell = { x: 0, y: 0 },\n    colType = 'rgCol',\n    rowType = 'rgRow',\n  ) {\n    this.viewport?.setFocus(colType, rowType, cellStart, cellEnd);\n  }\n\n  /**\n   * Register new virtual node inside of grid\n   * Used for additional items creation such as plugin elements\n   */\n  @Method() async registerVNode(elements: VNode[]) {\n    this.extraElements.push(...elements);\n    this.extraElements = [...this.extraElements];\n  }\n\n  /**  Get data from source */\n  @Method() async getSource(type: RevoGrid.DimensionRows = 'rgRow') {\n    return this.dataProvider.stores[type].store.get('source');\n  }\n\n  /**\n   * Get data from visible part of source\n   * Trimmed/filtered rows will be excluded\n   * @param type - type of source\n   */\n  @Method() async getVisibleSource(type: RevoGrid.DimensionRows = 'rgRow') {\n    return getVisibleSourceItem(this.dataProvider.stores[type].store);\n  }\n\n  /**\n   * Provides access to rows internal store observer\n   * Can be used for plugin support\n   * @param type - type of source\n   */\n  @Method() async getSourceStore(type: RevoGrid.DimensionRows = 'rgRow'): Promise<RowSource> {\n    return this.dataProvider.stores[type].store;\n  }\n  /**\n   * Provides access to column internal store observer\n   * Can be used for plugin support\n   * @param type - type of column\n   */\n  @Method() async getColumnStore(type: RevoGrid.DimensionCols = 'rgCol'): Promise<ColumnSource> {\n    return this.columnProvider.stores[type].store;\n  }\n\n  /**\n   * Update column sorting\n   * @param column - full column details to update\n   * @param index - virtual column index\n   * @param order - order to apply\n   */\n  @Method() async updateColumnSorting(column: RevoGrid.ColumnRegular, index: number, order: 'asc' | 'desc', additive: boolean) {\n    return this.columnProvider.updateColumnSorting(column, index, order, additive);\n  }\n\n  /**\n   * Clears column sorting\n   */\n  @Method() async clearSorting() {\n    this.columnProvider.clearSorting();\n  }\n\n  /**\n   * Receive all columns in data source\n   */\n  @Method() async getColumns(): Promise<RevoGrid.ColumnRegular[]> {\n    return this.columnProvider.getColumns();\n  }\n\n  /**\n   * Clear current grid focus\n   */\n  @Method() async clearFocus() {\n    const focused = this.viewport?.getFocused();\n    const event = this.beforefocuslost.emit(focused);\n    if (event.defaultPrevented) {\n      return;\n    }\n    this.selectionStoreConnector.clearAll();\n  }\n\n  /**\n   * Get all active plugins instances\n   */\n  @Method() async getPlugins(): Promise<RevoPlugin.Plugin[]> {\n    return [...this.internalPlugins];\n  }\n\n  /**\n   * Get the currently focused cell.\n   */\n  @Method() async getFocused(): Promise<FocusedData | null> {\n    return this.viewport?.getFocused();\n  }\n\n  /**\n   * Get size of content\n   * Including all pinned data\n   */\n  @Method() async getContentSize(): Promise<Selection.Cell> {\n    return this.dimensionProvider?.getFullSize();\n  }\n  /**\n   * Get the currently selected Range.\n   */\n  @Method() async getSelectedRange(): Promise<Selection.RangeArea|null> {\n    return this.viewport?.getSelectedRange();\n  }\n\n\n  // --------------------------------------------------------------------------\n  //\n  //  Listeners outside scope\n  //\n  // --------------------------------------------------------------------------\n\n  private clickTrackForFocusClear: number | null = null;\n  @Listen('touchstart', { target: 'document' })\n  @Listen('mousedown', { target: 'document' })\n  mousedownHandle(event: MouseEvent | TouchEvent) {\n    const screenX = getFromEvent(event, 'screenX');\n    const screenY = getFromEvent(event, 'screenY');\n    if (screenX === null || screenY === null) {\n      return;\n    }\n\n    this.clickTrackForFocusClear = screenX + screenY;\n  }\n  @Listen('touchend', { target: 'document' })\n  @Listen('mouseup', { target: 'document' })\n  mouseupHandle(event: MouseEvent | TouchEvent) {\n    const screenX = getFromEvent(event, 'screenX');\n    const screenY = getFromEvent(event, 'screenY');\n    if (screenX === null || screenY === null) {\n      return;\n    }\n\n    if (event.defaultPrevented) {\n      return;\n    }\n    const target = event.target as HTMLElement | null;\n    const pos = screenX + screenY;\n    // detect if mousemove then do nothing\n    if (Math.abs(this.clickTrackForFocusClear - pos) > 10) {\n      return;\n    }\n\n    // check if action finished inside of the document\n    // clear data which is outside of grid\n    // if event prevented or it is current table don't clear focus\n    if (target?.closest(`[${UUID}=\"${this.uuid}\"]`)) {\n      return;\n    }\n    this.clearFocus();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Listeners\n  //\n  // --------------------------------------------------------------------------\n\n  /** DRAG AND DROP */\n  @Listen('internalRowDragStart') onRowDragStarted(e: CustomEvent<{ pos: RevoGrid.PositionItem; text: string; event: MouseEvent }>) {\n    // e.cancelBubble = true;\n    const dragStart = this.rowdragstart.emit(e.detail);\n    if (dragStart.defaultPrevented) {\n      e.preventDefault();\n      return;\n    }\n    this.orderService?.start(this.element, { ...e.detail, ...dragStart.detail });\n  }\n\n  @Listen('internalRowDragEnd') onRowDragEnd() {\n    this.orderService?.end();\n  }\n\n  @Listen('internalRowDrag') onRowDrag({ detail }: CustomEvent<RevoGrid.PositionItem>) {\n    this.orderService?.move(detail);\n  }\n\n  @Listen('internalRowMouseMove') onRowMouseMove(e: CustomEvent<Selection.Cell>): void {\n    // e.cancelBubble = true;\n    this.orderService?.moveTip(e.detail);\n  }\n\n  @Listen('internalCellEdit') async onBeforeEdit(e: CustomEvent<Edition.BeforeSaveDataDetails>) {\n    // e.cancelBubble = true;\n    const { defaultPrevented, detail } = this.beforeedit.emit(e.detail);\n    await timeout();\n    // apply data\n    if (!defaultPrevented) {\n      this.dataProvider.setCellData(detail);\n      this.afteredit.emit(detail);\n    }\n  }\n\n  @Listen('internalRangeDataApply') onBeforeRangeEdit(e: CustomEvent<Edition.BeforeRangeSaveDataDetails>) {\n    // e.cancelBubble = true;\n    const { defaultPrevented, detail } = this.beforerangeedit.emit(e.detail);\n    if (defaultPrevented) {\n      e.preventDefault();\n      return;\n    }\n    this.afteredit.emit(detail);\n  }\n\n  @Listen('internalSelectionChanged') onRangeChanged(e: CustomEvent<Selection.ChangedRange>) {\n    // e.cancelBubble = true;\n    const beforeange = this.beforeange.emit(e.detail);\n    if (beforeange.defaultPrevented) {\n      e.preventDefault();\n    }\n    const beforeFill = this.beforeautofill.emit(beforeange.detail);\n    if (beforeFill.defaultPrevented) {\n      e.preventDefault();\n    }\n  }\n\n  @Listen('initialRowDropped') onRowDropped(e: CustomEvent<{ from: number; to: number }>) {\n    // e.cancelBubble = true;\n    const { defaultPrevented } = this.roworderchanged.emit(e.detail);\n    if (defaultPrevented) {\n      e.preventDefault();\n    }\n  }\n\n  @Listen('initialHeaderClick') onHeaderClick(e: CustomEvent<RevoGrid.InitialHeaderClick>) {\n    const { defaultPrevented } = this.headerclick.emit({\n      ...e.detail.column,\n      originalEvent: e.detail.originalEvent,\n    });\n    if (defaultPrevented) {\n      e.preventDefault();\n    }\n  }\n\n  @Listen('beforeFocusCell') onCellFocus(e: CustomEvent<Edition.BeforeSaveDataDetails>) {\n    // e.cancelBubble = true;\n    const { defaultPrevented } = this.beforecellfocus.emit(e.detail);\n    if (!this.canFocus || defaultPrevented) {\n      e.preventDefault();\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  // for internal plugin usage\n  @State() extraElements: VNode[] = [];\n\n  uuid: string | null = null;\n  columnProvider: ColumnDataProvider;\n  dataProvider: DataProvider;\n  dimensionProvider: DimensionProvider;\n  viewportProvider: ViewportProvider;\n  private themeService: ThemeService;\n  private viewport: ViewportService | null = null;\n\n  private orderService: OrdererService;\n  private selectionStoreConnector: SelectionStoreConnector;\n  private scrollingService: GridScrollingService;\n\n  /**\n   * Plugins\n   * Define plugins collection\n   */\n  private internalPlugins: RevoPlugin.Plugin[] = [];\n\n  @Element() element: HTMLRevoGridElement;\n\n  /**\n   * Column format change will trigger column structure update\n   */\n  @Watch('columnTypes') columnTypesChanged() {\n    this.columnChanged(this.columns);\n  }\n  @Watch('columns') columnChanged(newVal: RevoGrid.ColumnDataSchema[] = []) {\n    // clear existing data\n    this.dimensionProvider.dropColumns();\n    const columnGather = ColumnDataProvider.getColumns(newVal, 0, this.columnTypes);\n    this.beforecolumnsset.emit(columnGather);\n    for (let type of columnDimensions) {\n      const items = columnGather.columns[type];\n      this.dimensionProvider.setNewColumns(type, items.length, ColumnDataProvider.getSizes(items), type !== 'rgCol');\n    }\n    this.beforecolumnapplied.emit(columnGather);\n    const columns = this.columnProvider.setColumns(columnGather);\n    this.aftercolumnsset.emit({\n      columns,\n      order: this.columnProvider.order,\n    });\n  }\n\n  @Watch('rowSize') rowSizeChanged(s: number) {// clear existing data\n    this.dimensionProvider.setSettings({ originItemSize: s }, 'rgRow');\n    rowDimensions.forEach((t) => {\n      this.dimensionProvider.clearSize(\n        t,\n        this.dataProvider.stores[t].store.get('source').length\n      );\n      this.dimensionProvider.setCustomSizes(t, {}, true);\n    });\n  }\n\n  @Watch('theme') themeChanged(t: ThemeSpace.Theme) {\n    this.themeService.register(t);\n    this.dimensionProvider.setSettings({ originItemSize: this.themeService.rowSize }, 'rgRow');\n    this.dimensionProvider.setSettings({ originItemSize: this.colSize }, 'rgCol');\n  }\n\n  @Watch('source')\n  @Watch('pinnedBottomSource')\n  @Watch('pinnedTopSource')\n  dataSourceChanged<T extends RevoGrid.DataType>(\n    newVal: T[] = [],\n    _: T[]|undefined,\n    watchName: string\n  ) {\n    let type: RevoGrid.DimensionRows = 'rgRow';\n    switch (watchName) {\n      case 'pinnedBottomSource':\n        type = 'rowPinEnd';\n        break;\n      case 'pinnedTopSource':\n        type = 'rowPinStart';\n        break;\n      case 'source':\n        type = 'rgRow';\n        /** applied for source only for cross compatability between plugins */\n        const beforesourceset = this.beforesourceset.emit({\n          type,\n          source: newVal,\n        });\n        newVal = beforesourceset.detail.source as T[];\n        break;\n    }\n    const beforesourceset = this.beforeAnySource.emit({\n      type,\n      source: newVal,\n    });\n    const newSource = [...beforesourceset.detail.source];\n    this.dataProvider.setData(newSource, type);\n    \n    /** applied for source only for cross compatability between plugins */\n    if (watchName === 'source') {\n      this.aftersourceset.emit({\n        type,\n        source: newVal,\n      });\n    }\n    this.afterAnySource.emit({\n      type,\n      source: newVal,\n    });\n  }\n\n  @Watch('rowDefinitions') rowDefChanged(after: any, before?: any) {\n    const { detail: {\n      vals: newVal,\n      oldVals: oldVal\n    }} = this.beforerowdefinition.emit({\n      vals: after,\n      oldVals: before\n    });\n    // apply new vals\n    const newRows = rowDefinitionByType(newVal);\n    // clear current defs\n    if (oldVal) {\n      const remove = rowDefinitionRemoveByType(oldVal);\n      // clear all old data and drop sizes\n      each(remove, (_, t: RevoGrid.DimensionRows) => {\n        this.dimensionProvider.clearSize(\n          t,\n          this.dataProvider.stores[t].store.get('source').length\n        );\n      });\n    }\n    if (!newVal.length) {\n      return;\n    }\n    each(newRows, (r, k: RevoGrid.DimensionRows) => this.dimensionProvider.setCustomSizes(k, r.sizes || {}));\n  }\n\n  @Watch('trimmedRows') trimmedRowsChanged(newVal: Record<number, boolean> = {}) {\n    this.addTrimmed(newVal);\n  }\n  /**\n   * Grouping\n   */\n  @Watch('grouping') groupingChanged(newVal: GroupingOptions = {}) {\n    let grPlugin: GroupingRowPlugin | undefined;\n    for (let p of this.internalPlugins) {\n      const isGrouping = (p as unknown) as GroupingRowPlugin;\n      if (isGrouping.setGrouping) {\n        grPlugin = isGrouping;\n        break;\n      }\n    }\n    if (!grPlugin) {\n      return;\n    }\n    grPlugin.setGrouping(newVal || {});\n  }\n  /**\n   * Stretch Plugin Apply\n   */\n  @Watch('stretch') applyStretch(isStretch: boolean | string) {\n    if (isStretch === 'false') {\n      isStretch = false;\n    }\n    let stretch = this.internalPlugins.filter(p => isStretchPlugin(p))[0];\n    if ((typeof isStretch === 'boolean' && isStretch) || isStretch === 'true') {\n      if (!stretch) {\n        this.internalPlugins.push(\n          new StretchColumn(this.element, {\n            dataProvider: this.dataProvider,\n            columnProvider: this.columnProvider,\n            dimensionProvider: this.dimensionProvider,\n          }),\n        );\n      } else if (isStretchPlugin(stretch)) {\n        stretch.applyStretch(this.columnProvider.getRawColumns());\n      }\n    } else if (stretch) {\n      const index = this.internalPlugins.indexOf(stretch);\n      this.internalPlugins.splice(index, 1);\n    }\n  }\n\n  /** External subscribe */\n  @Event() filterconfigchanged: EventEmitter;\n  @Watch('filter') applyFilter(cfg: boolean | ColumnFilterConfig) {\n    this.filterconfigchanged.emit(cfg);\n  }\n\n  @Event() rowheaderschanged: EventEmitter;\n  @Watch('rowHeaders') rowHeadersChange(rowHeaders?: RevoGrid.RowHeaders | boolean) {\n    this.rowheaderschanged.emit(rowHeaders);\n  }\n\n  connectedCallback() {\n    this.viewportProvider = new ViewportProvider();\n    this.themeService = new ThemeService({\n      rowSize: this.rowSize,\n    });\n    const dimensionProviderConfig: DimensionConfig = {\n      realSizeChanged: (k: RevoGrid.MultiDimensionType) => this.contentsizechanged.emit(k),\n    };\n    this.dimensionProvider = new DimensionProvider(this.viewportProvider, dimensionProviderConfig);\n    this.columnProvider = new ColumnDataProvider();\n    this.selectionStoreConnector = new SelectionStoreConnector();\n    this.dataProvider = new DataProvider(this.dimensionProvider);\n    this.uuid = `${new Date().getTime()}-rvgrid`;\n\n    const pluginData = {\n      data: this.dataProvider,\n      column: this.columnProvider,\n      dimension: this.dimensionProvider,\n      viewport: this.viewportProvider,\n      selection: this.selectionStoreConnector,\n    };\n\n    if (this.autoSizeColumn) {\n      this.internalPlugins.push(\n        new AutoSize(\n          this.element,\n          {\n            dataProvider: this.dataProvider,\n            columnProvider: this.columnProvider,\n            dimensionProvider: this.dimensionProvider,\n          },\n          typeof this.autoSizeColumn === 'object' ? this.autoSizeColumn : undefined,\n        ),\n      );\n    }\n    if (this.filter) {\n      this.internalPlugins.push(new FilterPlugin(this.element, this.uuid, typeof this.filter === 'object' ? this.filter : undefined));\n    }\n    if (this.exporting) {\n      this.internalPlugins.push(new ExportFilePlugin(this.element));\n    }\n    this.internalPlugins.push(new SortingPlugin(this.element));\n\n    this.internalPlugins.push(\n      new GroupingRowPlugin(this.element, {\n        dataProvider: this.dataProvider,\n        columnProvider: this.columnProvider,\n      }),\n    );\n    if (this.canMoveColumns) {\n      this.internalPlugins.push(new ColumnPlugin(this.element, pluginData));\n    }\n    if (this.plugins) {\n      this.plugins.forEach(p => {\n        this.internalPlugins.push(\n          new p(this.element, pluginData),\n        );\n      });\n    }\n    this.applyStretch(this.stretch);\n    this.themeChanged(this.theme);\n    this.columnChanged(this.columns);\n\n    this.dataSourceChanged(this.source, undefined, 'source');\n    this.dataSourceChanged(this.pinnedTopSource, undefined, 'pinnedTopSource');\n    this.dataSourceChanged(this.pinnedBottomSource, undefined, 'pinnedBottomSource');\n\n    this.trimmedRowsChanged(this.trimmedRows);\n    this.rowDefChanged(this.rowDefinitions);\n    this.groupingChanged(this.grouping);\n\n    this.scrollingService = new GridScrollingService((e: RevoGrid.ViewPortScrollEvent) => {\n      this.dimensionProvider.setViewPortCoordinate({\n        coordinate: e.coordinate,\n        type: e.dimension,\n      });\n      this.viewportscroll.emit(e);\n    });\n  }\n\n  disconnectedCallback() {\n    // destroy plugins on element disconnect\n    each(this.internalPlugins, p => p.destroy());\n    this.internalPlugins = [];\n  }\n\n  render() {\n    const contentHeight = this.dimensionProvider.stores['rgRow'].store.get('realSize');\n    this.viewport = new ViewportService(\n      {\n        columnProvider: this.columnProvider,\n        dataProvider: this.dataProvider,\n        dimensionProvider: this.dimensionProvider,\n        viewportProvider: this.viewportProvider,\n        uuid: this.uuid,\n        scrollingService: this.scrollingService,\n        orderService: this.orderService,\n        selectionStoreConnector: this.selectionStoreConnector,\n        resize: c => this.aftercolumnresize.emit(c),\n      },\n      contentHeight,\n    );\n\n    const views: VNode[] = [];\n    if (this.rowHeaders && this.viewport.columns.length) {\n      const anyView = this.viewport.columns[0];\n      views.push(\n        <revogr-row-headers\n          additionalData={this.additionalData}\n          height={contentHeight}\n          rowClass={this.rowClass}\n          resize={this.resize}\n          dataPorts={anyView.dataPorts}\n          headerProp={anyView.headerProp}\n          uiid={anyView.prop[UUID]}\n          rowHeaderColumn={typeof this.rowHeaders === 'object' ? this.rowHeaders : undefined}\n          onScrollViewport={({ detail: e }: CustomEvent) => this.scrollingService.scrollService(e, 'headerRow')}\n          onElementToScroll={({ detail: e }: CustomEvent) => this.scrollingService.registerElement(e, 'headerRow')}\n        />,\n      );\n    }\n    views.push(\n      <ViewPortSections\n        additionalData={this.additionalData}\n        columnFilter={!!this.filter}\n        resize={this.resize}\n        readonly={this.readonly}\n        range={this.range}\n        rowClass={this.rowClass}\n        editors={this.editors}\n        applyEditorChangesOnClose={this.applyOnClose}\n        useClipboard={this.useClipboard}\n        columns={this.viewport.columns}\n        onSelectAll={() => {\n          this.selectionStoreConnector.selectAll();\n        }}\n        onEdit={detail => {\n          const event = this.beforeeditstart.emit(detail);\n          if (!event.defaultPrevented) {\n            this.selectionStoreConnector.setEdit(detail.val);\n          }\n        }}\n        onCancelEdit={() => {\n          this.selectionStoreConnector.setEdit(false);\n        }}\n        registerElement={(e, k) => this.scrollingService.registerElement(e, k)}\n        scrollSection={(details, k) => this.scrollingService.scrollService(details, k)}\n        scrollSectionSilent={(details, k) => this.scrollingService.scrollSilentService(details, k)}\n        focusTemplate={this.focusTemplate}\n      />,\n    );\n    return (\n      <Host {...{ [`${UUID}`]: this.uuid }}>\n        <RevoViewPort\n          viewports={this.viewportProvider.stores}\n          dimensions={this.dimensionProvider.stores}\n          orderRef={e => (this.orderService = e)}\n          registerElement={(e, k) => this.scrollingService.registerElement(e, k)}\n          nakedClick={() => this.viewport.clearEdit()}\n          onScroll={details => this.scrollingService.scrollService(details)}\n        >\n          <slot name='viewport'/>\n          {views}\n        </RevoViewPort>\n        {this.extraElements}\n      </Host>\n    );\n  }\n}\n"],"mappings":"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"}